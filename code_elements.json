[
    {
        "file_path": "../pytorch/setup.py",
        "functions": [
            "build_deps",
            "check_pydep",
            "configure_extension_build",
            "print_box",
            "report",
            "report",
            "check_file",
            "_embed_libiomp",
            "run",
            "build_extensions",
            "get_outputs",
            "create_compile_commands",
            "__init__",
            "__enter__",
            "__exit__",
            "run",
            "run",
            "make_relative_rpath_args",
            "load",
            "run"
        ],
        "classes": [
            "build_ext",
            "concat_license_files",
            "install",
            "clean",
            "wheel_concatenate"
        ]
    },
    {
        "file_path": "../pytorch/.github/scripts/generate_binary_build_matrix.py",
        "functions": [
            "is_pull_request",
            "generate_matrix",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.github/scripts/generate_pytorch_version.py",
        "functions": [
            "get_pytorch_root",
            "get_tag",
            "get_base_version",
            "main",
            "__init__",
            "get_post_build_suffix",
            "get_release_version",
            "get_nightly_version"
        ],
        "classes": [
            "NoGitTagException",
            "PytorchVersion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/aten/aten_test.py",
        "functions": [
            "test_add",
            "test_add_half",
            "test_pow",
            "test_sort",
            "test_sum",
            "test_index_uint8",
            "test_index_put",
            "test_unique",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref"
        ],
        "classes": [
            "TestATen"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/aten/gen_op.py",
        "functions": [
            "write",
            "read",
            "value_has_tensors",
            "value_is_tensor_type",
            "expand",
            "supports",
            "get_output",
            "attribute_names",
            "required_attribute_names",
            "self_as_first_argument",
            "get_num_inputs",
            "find_factory_methods",
            "emit_assignments"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/aten/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/aten/docs/sample.py",
        "functions": [
            "forward",
            "symbolic",
            "forward"
        ],
        "classes": [
            "MyFunction",
            "MyModule"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/aten/docs/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_batchmatmul_nnpi_fp16.py",
        "functions": [
            "test_batch_matmul"
        ],
        "classes": [
            "TestBatchMatMul"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_batchnorm_nnpi_fp16.py",
        "functions": [
            "reference_spatialbn_test16",
            "test_bn"
        ],
        "classes": [
            "BatchnormTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_chunking.py",
        "functions": [
            "_get_scale_zp",
            "test_ParallelFC"
        ],
        "classes": [
            "Fusions"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_deq_swish_quant_nnpi.py",
        "functions": [
            "_get_scale_zp",
            "_sigmoid",
            "_swish",
            "test_swish_int8"
        ],
        "classes": [
            "DeqSwishQuantTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_fc_nnpi_fp16.py",
        "functions": [
            "test_clip",
            "test_fc_exercise",
            "test_fc_numeric_cases",
            "test_fc_num0"
        ],
        "classes": [
            "FCTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_fusions.py",
        "functions": [
            "test_tanhquantize"
        ],
        "classes": [
            "Fusions"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_int8_ops_nnpi.py",
        "functions": [
            "_get_scale_zp",
            "test_int8_quantize",
            "test_int8_fc",
            "test_int8_small_input"
        ],
        "classes": [
            "Int8OpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_int8_quant.py",
        "functions": [
            "test_dequantize",
            "test_quantize"
        ],
        "classes": [
            "QuantTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_layernorm_nnpi_fp16.py",
        "functions": [
            "test_layernorm",
            "_get_scale_zp",
            "_layernorm_transform",
            "test_fused_ln_quantize"
        ],
        "classes": [
            "LayerNorm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_op_nnpi_fp16.py",
        "functions": [
            "_test_binary_op_graph",
            "test_add_graph",
            "test_sub_graph",
            "test_mul_graph",
            "test_div_graph",
            "_test_unary_op",
            "_test_op_w_ulp_error",
            "test_sigmoid",
            "test_tanh",
            "test_swish",
            "test_logit",
            "relu_test"
        ],
        "classes": [
            "ArithmeticOpsTest",
            "UnaryOpTest",
            "ReluTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_sls_4bit_nnpi_fp16.py",
        "functions": [
            "test_slws_fused_4bit_rowwise_all_same",
            "test_slws_fused_4bit_rowwise"
        ],
        "classes": [
            "SparseLengthsSum4BitFakeNNPIFp16Test"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_sls_8bit_nnpi_fp16.py",
        "functions": [
            "Skip_test_SLS_NonQuantized_fp16",
            "test_slws_fused_8bit_rowwise_all_same",
            "test_slws_fused_8bit_rowwise",
            "test_small_sls",
            "test_sls_layernorm"
        ],
        "classes": [
            "SparseLengthsSum8BitFakeNNPIFp16Test"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/fakelowp/test/test_sls_8bit_nnpi_fp32.py",
        "functions": [
            "test_slws_fused_8bit_rowwise_acc32_nnpi",
            "test_small_sls_acc32"
        ],
        "classes": [
            "SparseLengthsSum8BitFakeNNPIFp32Test"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/gloo/gloo_test.py",
        "functions": [
            "__enter__",
            "__exit__",
            "run_test_locally",
            "run_test_distributed",
            "create_common_world",
            "synchronize",
            "_test_broadcast",
            "test_broadcast",
            "_test_allreduce",
            "_test_allreduce_multicw",
            "test_allreduce",
            "_test_reduce_scatter",
            "test_reduce_scatter",
            "_test_allgather",
            "test_allgather",
            "test_forked_cw",
            "_test_barrier",
            "test_barrier",
            "_test_close_connection",
            "test_close_connection",
            "_test_io_error",
            "test_io_error",
            "run_fn"
        ],
        "classes": [
            "TemporaryDirectory",
            "TestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/gloo/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/nccl/nccl_ops_test.py",
        "functions": [
            "gpu_device",
            "benchmark",
            "test_nccl_allreduce",
            "test_nccl_broadcast",
            "test_nccl_reduce",
            "test_nccl_allgather",
            "test_nccl_reduce_scatter",
            "_test_nccl_sync",
            "test_timings",
            "allreduce",
            "broadcast",
            "reduce",
            "allgather",
            "reduce_scatter"
        ],
        "classes": [
            "NCCLOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/nccl/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/nnpack/nnpack_ops_test.py",
        "functions": [
            "benchmark",
            "has_avx2",
            "test_convolution_correctness",
            "test_max_pool_correctness",
            "test_relu_correctness",
            "test_leaky_relu_correctness",
            "test_timings",
            "test_relu_timings"
        ],
        "classes": [
            "NNPackOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/nnpack/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/AnyExp.py",
        "functions": [
            "initOpts",
            "initDefaultModuleMap",
            "registerModuleMap",
            "aquireDatasets",
            "createTrainerClass",
            "overrideAdditionalMethods",
            "initialize_params_from_file",
            "__init__",
            "get_input_dataset",
            "get_model_input_fun",
            "init_model",
            "init_metrics",
            "getMeterClass",
            "add_metric",
            "extendMetricsOutput",
            "init_plots",
            "add_plot",
            "init_logs",
            "list_of_epochs",
            "list_of_epoch_iters",
            "fun_per_epoch_b4RunNet",
            "fun_per_epoch_aftRunNet",
            "checkpoint",
            "gen_checkpoint_path",
            "fun_per_iter_b4RunNet",
            "fun_per_iter_aftRunNetB4Test",
            "fun_per_iter_aftRunNetAftTest",
            "fun_conclude_operator",
            "createMetricsPlotsModelsOutputs",
            "assembleAllOutputs",
            "gen_input_builder_fun",
            "gen_forward_pass_builder_fun",
            "gen_param_update_builder_fun",
            "gen_optimizer_fun",
            "gen_rendezvous_ctx",
            "run_training_net",
            "run_testing_net",
            "planning_output",
            "prep_data_parallel_models",
            "prep_a_data_parallel_model",
            "loadCheckpoint",
            "buildModelAndTrain"
        ],
        "classes": [
            "AnyExpTrainer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/AnyExpOnTerm.py",
        "functions": [
            "runShardedTrainLoop",
            "trainFun",
            "simpleTrainFun"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/checkpoint.py",
        "functions": [
            "initialize_params_from_file",
            "initialize_master_xpu_model_params",
            "broadcast_parameters",
            "save_model_params",
            "save_model_params_blob",
            "unscope_name",
            "scoped_name"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/compute_loss.py",
        "functions": [
            "__init__",
            "Reset",
            "Add",
            "Compute"
        ],
        "classes": [
            "ComputeLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/compute_topk_accuracy.py",
        "functions": [
            "__init__",
            "Reset",
            "Add",
            "Compute"
        ],
        "classes": [
            "ComputeTopKAccuracy"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/meter.py",
        "functions": [
            "__init__",
            "Reset",
            "Add",
            "Compute"
        ],
        "classes": [
            "Meter"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/ModuleRegister.py",
        "functions": [
            "registerModuleMap",
            "constructTrainerClass",
            "overrideAdditionalMethods",
            "getModule",
            "getClassFromModule"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/module_map.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/output_generator.py",
        "functions": [
            "fun_conclude_operator",
            "assembleAllOutputs"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/caffe2_resnet50_default_forward.py",
        "functions": [
            "gen_forward_pass_builder_fun",
            "create_resnet50_model_ops"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/caffe2_resnet50_default_param_update.py",
        "functions": [
            "gen_param_update_builder_fun",
            "add_parameter_update_ops"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/explicit_resnet_forward.py",
        "functions": [
            "gen_forward_pass_builder_fun",
            "resnet_imagenet_create_model",
            "model_creator",
            "__init__",
            "add_shortcut",
            "conv_bn",
            "conv_bn_relu",
            "multiway_bottleneck_block",
            "group_bottleneck_block",
            "bottleneck_block",
            "basic_block",
            "residual_layer"
        ],
        "classes": [
            "ResNetModelHelper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/explicit_resnet_param_update.py",
        "functions": [
            "gen_param_update_builder_fun",
            "add_parameter_update_ops"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/gfs_IN1k.py",
        "functions": [
            "gen_input_builder_fun",
            "get_input_dataset",
            "get_model_input_fun",
            "AddImageInput",
            "add_image_input"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/IN1k_resnet.py",
        "functions": [
            "init_model",
            "fun_per_epoch_b4RunNet",
            "fun_per_iter_b4RunNet",
            "run_training_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/IN1k_resnet_no_test_model.py",
        "functions": [
            "init_model",
            "fun_per_epoch_b4RunNet",
            "fun_per_iter_b4RunNet",
            "run_training_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/override_no_test_model_no_checkpoint.py",
        "functions": [
            "checkpoint",
            "prep_data_parallel_models",
            "run_testing_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/rendezvous_filestore.py",
        "functions": [
            "gen_rendezvous_ctx"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/playground/resnetdemo/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/prof/cuda_profile_ops_test.py",
        "functions": [
            "test_run"
        ],
        "classes": [
            "CudaProfileOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/prof/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/script/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/script/examples/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/tensorboard/tensorboard.py",
        "functions": [
            "_show_graph",
            "visualize_cnn",
            "visualize_net",
            "visualize_ops",
            "cli",
            "write_events",
            "graph_def_to_event",
            "tensorboard_graphs",
            "tensorboard_events",
            "parse_net_def",
            "parse_summary",
            "get_named_summaries",
            "inferred_histo",
            "named_summaries_to_events",
            "event"
        ],
        "classes": [
            "Config"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/tensorboard/tensorboard_exporter.py",
        "functions": [
            "_make_unique_name",
            "_convert_to_ssa",
            "_get_blob_names",
            "_remap_keys",
            "_rename_all",
            "_add_gradient_scope",
            "_replace_colons",
            "_fill_missing_operator_names",
            "_tf_device",
            "_add_tf_shape",
            "_set_tf_attr",
            "_operator_to_node",
            "_blob_to_node",
            "_operators_to_graph_def",
            "_propagate_device_option",
            "_try_get_shapes",
            "nets_to_graph_def",
            "cnn_to_graph_def",
            "ops_to_graph_def",
            "ssa_name",
            "g",
            "f",
            "f"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/tensorboard/tensorboard_exporter_test.py",
        "functions": [
            "test_that_operators_gets_non_colliding_names",
            "test_that_replacing_colons_gives_non_colliding_names",
            "test_that_adding_gradient_scope_does_no_fancy_renaming",
            "test_that_auto_ssa_gives_non_colliding_names",
            "test_simple_cnnmodel"
        ],
        "classes": [
            "TensorboardExporterTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/tensorboard/tensorboard_test.py",
        "functions": [
            "load_events",
            "test_events",
            "test_tensorboard_graphs"
        ],
        "classes": [
            "TensorboardTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/tensorboard/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/contrib/warpctc/ctc_ops_test.py",
        "functions": [
            "softmax",
            "verify_cost",
            "test_ctc_cost_cpu",
            "test_ctc_cost_gpu",
            "test_ctc_forward_only_cpu",
            "test_ctc_forward_only_gpu"
        ],
        "classes": [
            "CTCOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/contrib/warpctc/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/core/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/core/nomnigraph/op_gen.py",
        "functions": [
            "parse_lines",
            "gen_class",
            "gen_classes",
            "gen_enum",
            "gen_names"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/core/nomnigraph/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/distributed/file_store_handler_op_test.py",
        "functions": [
            "setUp",
            "tearDown",
            "create_store_handler",
            "test_set_get",
            "test_get_timeout"
        ],
        "classes": [
            "TestFileStoreHandlerOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/distributed/redis_store_handler_op_test.py",
        "functions": [
            "setUp",
            "tearDown",
            "create_store_handler",
            "test_set_get",
            "test_get_timeout"
        ],
        "classes": [
            "TestRedisStoreHandlerOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/distributed/store_ops_test_util.py",
        "functions": [
            "_test_set_get",
            "test_set_get",
            "test_get_timeout"
        ],
        "classes": [
            "StoreOpsTests"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/distributed/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/experiments/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/convnet_benchmarks.py",
        "functions": [
            "MLP",
            "AlexNet",
            "OverFeat",
            "VGGA",
            "net_DAG_Builder",
            "_InceptionModule",
            "Inception",
            "AddInput",
            "AddParameterUpdate",
            "Benchmark",
            "GetArgumentParser"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/device_reduce_sum_bench.py",
        "functions": [
            "parse_args",
            "main",
            "__new__",
            "__init__",
            "display",
            "run",
            "run",
            "run"
        ],
        "classes": [
            "BenchmarkMeta",
            "Benchmark",
            "SumElements",
            "SumSqrElements",
            "SoftMaxWithLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/funhash_op_test.py",
        "functions": [
            "test_funhash"
        ],
        "classes": [
            "TestFunHash"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/net_construct_bench.py",
        "functions": [
            "AddMomentumParameterUpdate",
            "Create",
            "main",
            "create_resnet50_model_ops",
            "add_parameter_update_ops",
            "add_image_input"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/SparseTransformer.py",
        "functions": [
            "maskNallocate",
            "transFCRelu",
            "Prune2Sparse",
            "net2list",
            "netbuilder",
            "__init__",
            "insertInput",
            "deleteInput"
        ],
        "classes": [
            "NetDefNode"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/sparse_funhash_op_test.py",
        "functions": [
            "test_funhash"
        ],
        "classes": [
            "TestFunHash"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/sparse_reshape_op_test.py",
        "functions": [
            "test_reshape",
            "test_basic_reshape",
            "test_missing_dim",
            "test_stride_only",
            "test_sparse_reshape_mm"
        ],
        "classes": [
            "TestSparseMatrixReshapeOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/tt_contraction_op_test.py",
        "functions": [
            "test_tt_contraction",
            "tt_contraction_ref"
        ],
        "classes": [
            "TestTTContraction"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/tt_pad_op_test.py",
        "functions": [
            "test_tt_pad",
            "tt_pad_ref"
        ],
        "classes": [
            "TestTTPad"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/experiments/python/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/perfkernels/hp_emblookup_codegen.py",
        "functions": [
            "unroll",
            "generic",
            "compute",
            "compute"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/perfkernels/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/proto/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/allcompare_test.py",
        "functions": [
            "allcompare_process",
            "__enter__",
            "__exit__",
            "test_allcompare"
        ],
        "classes": [
            "TemporaryDirectory",
            "TestAllCompare"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/attention.py",
        "functions": [
            "s",
            "_calc_weighted_context",
            "_calc_attention_weights",
            "_calc_attention_logits_from_sum_match",
            "_apply_fc_weight_for_sum_match",
            "apply_recurrent_attention",
            "apply_regular_attention",
            "apply_dot_attention",
            "apply_soft_coverage_attention"
        ],
        "classes": [
            "AttentionType"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/benchmark_generator.py",
        "functions": [
            "parse_kwarg",
            "main",
            "make_blob_on_context"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/binarysize.py",
        "functions": [
            "GetSymbolTrie",
            "MaybeAddColor",
            "ReadableSize",
            "PrintTrie",
            "main",
            "__init__"
        ],
        "classes": [
            "Trie"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/brew.py",
        "functions": [
            "__init__",
            "__getattr__",
            "Register",
            "has_helper",
            "scope_wrapper"
        ],
        "classes": [
            "HelperWrapper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/brew_test.py",
        "functions": [
            "setUp",
            "test_dropout",
            "test_fc",
            "test_relu",
            "test_tanh",
            "test_validate",
            "test_arg_scope",
            "test_arg_scope_single",
            "test_arg_scope_nested",
            "test_double_register",
            "test_has_helper",
            "test_model_helper",
            "test_cnn_model_helper_deprecated",
            "test_get_params",
            "test_param_consistence",
            "test_cond",
            "test_loop",
            "test_relu",
            "test_tanh",
            "myhelper",
            "myhelper2",
            "myhelper3",
            "param",
            "to_str_list"
        ],
        "classes": [
            "BrewTest",
            "BrewGPUTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/build.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/cached_reader.py",
        "functions": [
            "__init__",
            "_init_reader_schema",
            "build_cache_step",
            "_save_field_blobs_to_db_file"
        ],
        "classes": [
            "CachedReader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/caffe_translator.py",
        "functions": [
            "_StateMeetsRule",
            "_ShouldInclude",
            "_GetLegacyDims",
            "_GetLegacyPadArgs",
            "_AdjustDims",
            "_RemoveLegacyPad",
            "_GetBlobDimMap",
            "_GetInputDims",
            "TranslateModel",
            "ConvertTensorProtosToInitNet",
            "BaseTranslate",
            "AddArgument",
            "TranslateInput",
            "TranslateVideoData",
            "TranslateData",
            "_TranslateStridePadKernelHelper",
            "TranslateConvNd",
            "TranslateConv",
            "TranslateDeconv",
            "TranslateCrop",
            "TranslateRelu",
            "TranslatePool",
            "TranslatePool3D",
            "TranslateLRN",
            "TranslateInnerProduct",
            "TranslateDropout",
            "TranslateSoftmax",
            "TranslateSoftmaxWithLoss",
            "TranslateAccuracy",
            "TranslateConcat",
            "TranslateTanH",
            "TranslateInstanceNorm",
            "TranslateBatchNorm",
            "TranslateElementWise",
            "TranslateScale",
            "TranslateReshape",
            "TranslateFlatten",
            "TranslateSigmoid",
            "TranslateROIPooling",
            "TranslatePRelu",
            "TranslateReduction",
            "Register",
            "TranslateLayer",
            "TranslateModel",
            "Wrapper"
        ],
        "classes": [
            "TranslatorRegistry"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/caffe_translator_test.py",
        "functions": [
            "setUpModule",
            "testBlobs"
        ],
        "classes": [
            "TestNumericalEquivalence"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/checkpoint.py",
        "functions": [
            "get_ckpt_filename",
            "db_name",
            "epoch_limiter",
            "__init__",
            "nodes_to_checkpoint",
            "compile",
            "__enter__",
            "__exit__",
            "add_stop_condition",
            "__init__",
            "init",
            "blob_list",
            "_timed_task",
            "collect_checkpoint_stats",
            "load",
            "load_blobs_from_checkpoint",
            "check_db_exists",
            "report_checkpoint_stats",
            "save",
            "write_checkpoint_metadata",
            "get_resume_from_epoch_id",
            "set_params",
            "cp_accessible",
            "__init__",
            "_task_group",
            "init",
            "load",
            "load_blobs_locally",
            "get_ckpt_db_name",
            "report_checkpoint_stats",
            "save",
            "write_checkpoint_metadata",
            "get_resume_from_epoch_id",
            "set_params",
            "cp_accessible",
            "build",
            "__init__",
            "train",
            "load_blobs_from_checkpoints",
            "save_checkpoints",
            "add_op",
            "add_op",
            "add_op"
        ],
        "classes": [
            "Job",
            "CheckpointManager",
            "MultiNodeCheckpointManager",
            "UploadTaskGroupBuilder",
            "JobRunner"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/checkpoint_test.py",
        "functions": [
            "build_pipeline",
            "local_copy_op",
            "copy_op",
            "__init__",
            "build",
            "run_with",
            "test_single_checkpoint",
            "test_ckpt_name_and_load_model_from_ckpts",
            "test_upload_checkpoint",
            "test_ckpt_save_failure",
            "test_download_group_simple",
            "test_reuse_checkpoint_manager",
            "inc_total",
            "fetch_total",
            "builder",
            "builder",
            "fetch_total"
        ],
        "classes": [
            "UploadToLocalFile",
            "TestCheckpoint"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/cnn.py",
        "functions": [
            "__init__",
            "ImageInput",
            "VideoInput",
            "PadImage",
            "ConvNd",
            "Conv",
            "ConvTranspose",
            "GroupConv",
            "GroupConv_Deprecated",
            "FC",
            "PackedFC",
            "FC_Prune",
            "FC_Decomp",
            "FC_Sparse",
            "Dropout",
            "LRN",
            "Softmax",
            "SpatialBN",
            "SpatialGN",
            "InstanceNorm",
            "Relu",
            "PRelu",
            "Concat",
            "DepthConcat",
            "Sum",
            "Transpose",
            "Iter",
            "Accuracy",
            "MaxPool",
            "MaxPoolWithIndex",
            "AveragePool",
            "XavierInit",
            "ConstantInit",
            "MSRAInit",
            "ZeroInit",
            "AddWeightDecay",
            "CPU",
            "GPU"
        ],
        "classes": [
            "CNNModelHelper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/context.py",
        "functions": [
            "_context_registry",
            "_get_managed_classes",
            "__init__",
            "_stack",
            "enter",
            "exit",
            "get_active",
            "__init__",
            "get",
            "current",
            "__enter__",
            "__exit__",
            "__call__",
            "wrapper"
        ],
        "classes": [
            "_ContextInfo",
            "_ContextRegistry",
            "Managed",
            "DefaultManaged"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/context_test.py",
        "functions": [
            "use_my_context",
            "testMultiThreaded",
            "testDecorator",
            "testNonDefaultCurrent",
            "testDefaultCurrent",
            "testNestedContexts",
            "testChildClasses"
        ],
        "classes": [
            "MyContext",
            "DefaultMyContext",
            "ChildMyContext",
            "TestContext"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/control.py",
        "functions": [
            "_get_next_step_name",
            "_MakeList",
            "_IsNets",
            "_PrependNets",
            "_AppendNets",
            "GetConditionBlobFromNet",
            "BoolNet",
            "NotNet",
            "_CopyConditionBlobNet",
            "MergeConditionNets",
            "CombineConditions",
            "Do",
            "DoParallel",
            "_RunOnceIf",
            "_RunOnceIfNot",
            "For",
            "While",
            "Until",
            "DoWhile",
            "DoUntil",
            "Switch",
            "SwitchNot",
            "If",
            "IfNot",
            "if_step",
            "while_step"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/control_ops_grad.py",
        "functions": [
            "gen_do_gradient",
            "dedupe_g_output",
            "gen_while_gradient",
            "_prepare_gradient_while_ops",
            "_get_do_arguments",
            "gen_if_gradient",
            "_gen_subnet_gradient",
            "_get_net_argument",
            "getNetArgument",
            "_gen_subgradient_pass",
            "_do_op_sanity_check_and_process",
            "_prepare_blob_copy_op",
            "_prepare_gradient_do_op",
            "_gen_grad_zero_init_ops",
            "_prepare_gradient_if_op",
            "disambiguate_grad_if_op_output"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/control_ops_grad_test.py",
        "functions": [
            "test_disambiguate_grad_if_op_output"
        ],
        "classes": [
            "TestControl"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/control_ops_util.py",
        "functions": [
            "get_external_blob_names",
            "add_if_op",
            "add_while_op"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/control_test.py",
        "functions": [
            "setUp",
            "CheckNetOutput",
            "CheckNetAllOutput",
            "BuildAndRunPlan",
            "ForLoopTest",
            "testForLoopWithNets",
            "testForLoopWithStep",
            "WhileLoopTest",
            "testWhileLoopWithNet",
            "testWhileLoopWithStep",
            "UntilLoopTest",
            "testUntilLoopWithNet",
            "testUntilLoopWithStep",
            "DoWhileLoopTest",
            "testDoWhileLoopWithNet",
            "testDoWhileLoopWithStep",
            "DoUntilLoopTest",
            "testDoUntilLoopWithNet",
            "testDoUntilLoopWithStep",
            "IfCondTest",
            "testIfCondTrueOnNet",
            "testIfCondTrueOnBlob",
            "testIfCondFalseOnNet",
            "testIfCondFalseOnBlob",
            "IfElseCondTest",
            "testIfElseCondTrueOnNet",
            "testIfElseCondTrueOnBlob",
            "testIfElseCondFalseOnNet",
            "testIfElseCondFalseOnBlob",
            "IfNotCondTest",
            "testIfNotCondTrueOnNet",
            "testIfNotCondTrueOnBlob",
            "testIfNotCondFalseOnNet",
            "testIfNotCondFalseOnBlob",
            "IfNotElseCondTest",
            "testIfNotElseCondTrueOnNet",
            "testIfNotElseCondTrueOnBlob",
            "testIfNotElseCondFalseOnNet",
            "testIfNotElseCondFalseOnBlob",
            "testSwitch",
            "testSwitchNot",
            "testBoolNet",
            "testCombineConditions",
            "testMergeConditionNets"
        ],
        "classes": [
            "TestControl"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/convert.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/convert_test.py",
        "functions": [
            "setUp"
        ],
        "classes": [
            "TestOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/convnet_benchmarks.py",
        "functions": [
            "MLP",
            "AlexNet",
            "OverFeat",
            "VGGA",
            "_InceptionModule",
            "Inception",
            "AddParameterUpdate",
            "Benchmark",
            "GetArgumentParser"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/convnet_benchmarks_test.py",
        "functions": [
            "testConvnetBenchmarks"
        ],
        "classes": [
            "TestConvnetBenchmarks"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/core.py",
        "functions": [
            "_InitDataType",
            "_GetRegisteredOperators",
            "RefreshRegisteredOperators",
            "GlobalInit",
            "GetGlobalInitArgs",
            "IsOperator",
            "IsOperatorWithEngine",
            "IsGPUDeviceType",
            "DeviceOption",
            "device_option_equal",
            "InferBlobDevices",
            "InferOpBlobDevicesAsDict",
            "InferOpBlobDevices",
            "InferOpDeviceAsBlobDevices",
            "ScopedName",
            "ScopedBlobReference",
            "_RectifyInputOutput",
            "CreateOperator",
            "_RegisterPythonImpl",
            "CreatePythonOperator",
            "GetIndexFromGradientList",
            "get_ssa",
            "get_undefined_blobs",
            "get_output_producers",
            "get_op_ids_in_path",
            "recurrent_network_op_remap",
            "control_op_remap",
            "remap_proto",
            "clone_and_bind_net",
            "_get_blob_ref",
            "_recover_record_by_prefix",
            "remap_input",
            "copy_func_between_devices",
            "device_equal",
            "update_placeholder_op_output",
            "InjectCrossDeviceCopies",
            "InjectDeviceCopiesAmongNets",
            "InjectDeviceCopiesAmongNetsWithoutB2D",
            "get_net_name",
            "output_to_list",
            "_add_net_to_dict",
            "add_nets_in_order",
            "to_execution_step",
            "execution_step",
            "scoped_execution_step",
            "_extract_stacktrace",
            "__init__",
            "__hash__",
            "__eq__",
            "__ne__",
            "__str__",
            "__repr__",
            "__add__",
            "__radd__",
            "Net",
            "GetNameScope",
            "GetUnscopedName",
            "_CreateAndAddToNet",
            "__getattr__",
            "__dir__",
            "__init__",
            "SanityCheck",
            "Play",
            "CheckGradientOperatorInput",
            "AppendSparseGenerators",
            "BuildGradientGenerators",
            "_GetSumOpOutputName",
            "_SetSumOpsDeviceOption",
            "_DisambiguateGradOpOutput",
            "_CheckSumOpsConflict",
            "_MakeDenseSumOps",
            "_MakeSparseSumOps",
            "_MakeSumOps",
            "_VerifyGradientGenerators",
            "DoGradientAccumulation",
            "_AppendAutoGradGenerator",
            "_GetInitGradients",
            "_GenerateGradientsForForwardOp",
            "GetBackwardPass",
            "RegisterGradient",
            "_GetGradientForOpCC",
            "GetGradientForOp",
            "GetBackwardPass",
            "get_remapped_str",
            "current_prefix",
            "_get_next_net_name",
            "__init__",
            "AppendNet",
            "LogInfo",
            "add_attribute",
            "get_attributes",
            "set_rand_seed",
            "Name",
            "__str__",
            "Const",
            "BlobIsDefined",
            "UsesBlob",
            "UsedBlobNames",
            "GetBlobRef",
            "Clone",
            "ClonePartial",
            "Proto",
            "insert_op_at_idx",
            "reroute_tensor",
            "PopulateProtoWithFileName",
            "NextScopedBlob",
            "NextBlob",
            "NextName",
            "_ExtendOps",
            "_CheckLookupTables",
            "_InvalidateLookupTables",
            "_RecreateLookupTables",
            "AddGradientOperators",
            "AddArgument",
            "AddExternalInput",
            "AddExternalOutput",
            "AddScopedExternalInputs",
            "AddScopedExternalOutputs",
            "AddObserver",
            "RemoveObserver",
            "NumObservers",
            "external_inputs",
            "external_outputs",
            "set_input_record",
            "recover_input_record_by_prefix",
            "set_output_record",
            "recover_output_record_by_prefix",
            "AppendOutputRecordField",
            "input_record",
            "output_record",
            "AddExternalInputs",
            "AddExternalOutputs",
            "DeduplicateGradientSlices",
            "_RunAllOnGPU",
            "RunAllOnGPU",
            "RunAllOnMKL",
            "RunAllOnIDEEP",
            "_CreateAndAddToSelf",
            "__getattr__",
            "__dir__",
            "Python",
            "is_external_input",
            "extend_ops",
            "__init__",
            "__eq__",
            "__hash__",
            "_get_next_step_name",
            "__init__",
            "get_net",
            "Name",
            "__str__",
            "_assert_can_mutate",
            "_notify_is_used",
            "Proto",
            "HasNets",
            "HasSubsteps",
            "Nets",
            "Substeps",
            "SetIter",
            "SetCreateWorkspace",
            "SetNumConcurrentInstances",
            "SetOnlyOnce",
            "SetShouldStopBlob",
            "RunEveryMillis",
            "SetReportNet",
            "AddSubstep",
            "SetConcurrentSubsteps",
            "AddNet",
            "get_all_attributes",
            "create_from_proto",
            "__init__",
            "__str__",
            "Proto",
            "AddNets",
            "Nets",
            "AddStep",
            "Steps",
            "get_all_attributes",
            "create_from_proto",
            "versionMismatchInfoOut",
            "versionMismatchInfoIn",
            "remove_suffix",
            "Wrapper",
            "from_untyped",
            "to_untyped",
            "do_set",
            "get_remapped_str",
            "remap_list",
            "remap_op",
            "remap",
            "_find_tensor_input_op",
            "make_builder",
            "fun",
            "fun",
            "fun",
            "_gen_new_name"
        ],
        "classes": [
            "DataType",
            "BlobReference",
            "IR",
            "GradientRegistry",
            "Net",
            "RemapEntry",
            "ExecutionStep",
            "Plan"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/core_gradients_test.py",
        "functions": [
            "NeedAll",
            "GIS",
            "CopyDeviceOption",
            "AddDirectGradient",
            "AddUseOutputGradient",
            "AddUseInputGradient",
            "AddNogradient",
            "assertOperatorListEqual",
            "testDirect",
            "testDirectImplicitGradientSource",
            "testDoesNotGenerateUnnecessaryGradients",
            "testDirectButNoOutputGradientGiven",
            "testDirectInPlace",
            "testVersionMismatch",
            "testUseOutput",
            "testUseOutputInPlace",
            "testUseOutputButOutputHasBeenChanged",
            "testUseInput",
            "testUseInputButInputHasBeenChanged",
            "testMultiUseInput",
            "testMultiUseInputButWithNoGradient",
            "testMultiUseInputAndMultipleVersions",
            "testMultiUseInputAutoGenSumDevice",
            "testMultiUseInputAndMultipleVersionsBig",
            "testGradientMappingUsingSumOp",
            "testGradientCalculationWithPrint",
            "testStopGradient",
            "testStopGradientOrphan",
            "testStopGradientInplace",
            "testStopGradientWithMultiUseOperators",
            "test_zero_gradient",
            "test_two_grads",
            "testSparseAccumulationWithValues",
            "testSparseGradientToDense",
            "testSparseAccumulationWithIndicesAndValues",
            "testNormalAccumulation",
            "testAccumulationWithNoGradientBranch",
            "testAddOpInMiddle",
            "testAddAndDynamicConstant",
            "testAddAndStaticConstant",
            "testSubOpInMiddle",
            "testAddOpAtLeaf",
            "testSubOpAtLeaf",
            "testMultiLayerAddOps",
            "testMultiLayerSubOps",
            "testAccumulationRuns",
            "testIncorrectOperator",
            "testDeviceOptionsPropagation"
        ],
        "classes": [
            "TestGradientCalculation",
            "TestSparseGradientsAccumulation",
            "TestGradientsAccumulationWithNoGradientOps",
            "TestGradientsAccumulationWithPassThroughGradients"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/core_test.py",
        "functions": [
            "testBlobReferenceIsIndependentFromNameScope",
            "testNameScopeWithOp",
            "testNameScopeWithReset",
            "testDeviceScope",
            "testNameAndDeviceScopeTogether",
            "testPartialClone",
            "test_mask_clone_update_external_list",
            "test_control_op_remap",
            "testAddExternalInputShouldRaiseIfDuplicate",
            "testAddExternalInputShouldRaiseIfDuplicateInSameCall",
            "testSetInputRecordWithBlobs",
            "testSetInputRecordWithoutBlobs",
            "testCreate",
            "assertOperatorListEqual",
            "test_next_blob",
            "test_auto_naming",
            "test_external_inputs_merged_correctly",
            "test_external_inputs_merged_correctlyB",
            "test_extract_simple",
            "op_name_check",
            "test_operator_constructor_traceback",
            "test_operator_runtime_traceback",
            "test_c_workspace_constructor",
            "test_c_workspace_runtime",
            "test_async_exception_handling",
            "test_create_plan_from_proto_correctly",
            "test_is_operator",
            "test_is_operator_with_engine",
            "test_check_equal_node_name",
            "test_check_equal_default_value",
            "test_inject_copy",
            "setUp",
            "_test_op",
            "test_infer_device",
            "test_infer_device_split_by_lengths",
            "test_infer_device_adam",
            "test_infer_device_cross_device",
            "test_device_inference_function",
            "test_inject_copy",
            "test_cross_nets",
            "test_cross_nets_no_change",
            "test_inject_copy_multi_use",
            "test_inject_copy_placeholder_ops",
            "test_blob_inplace",
            "test_reroute_tensor",
            "test_rnn_run_on_gpu",
            "net_assert",
            "create_net",
            "add_ops"
        ],
        "classes": [
            "TestScopes",
            "TestCloneNet",
            "TestExternalInputs",
            "TestCreateOperator",
            "TestAutoNaming",
            "TestAppendNet",
            "TestExtractPredictorNet",
            "TestOperatorTraceback",
            "TestCreatePlan",
            "TestOpRegistryKey",
            "TestDeviceOption",
            "TestInferDeviceCpuOnly",
            "TestInferDevice",
            "TestRerouteTensor",
            "TestRunAllOnGPU"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/crf.py",
        "functions": [
            "__init__",
            "crf_loss",
            "_path_binary_scores",
            "_gather_entries_sum",
            "_crf_forward",
            "build_crf_net",
            "update_predictions",
            "pad_labels",
            "pad_predictions",
            "s",
            "crf_update_predictions_op"
        ],
        "classes": [
            "CRFWithLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/crf_predict.py",
        "functions": [
            "crf_update_predictions",
            "apply_crf"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/crf_viterbi_test.py",
        "functions": [
            "test_crf_viterbi"
        ],
        "classes": [
            "TestCrfDecode"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/dataio.py",
        "functions": [
            "CountUntil",
            "__init__",
            "schema",
            "_set_schema",
            "setup_ex",
            "read_ex",
            "read_record_ex",
            "read",
            "reset",
            "read_record",
            "execution_step",
            "schema",
            "write",
            "write_record",
            "setup_ex",
            "write_ex",
            "write_record_ex",
            "commit",
            "schema",
            "setup",
            "new_reader",
            "__init__",
            "schema",
            "setup",
            "new_reader",
            "__init__",
            "schema",
            "setup",
            "reader",
            "writer",
            "num_readers",
            "num_writers",
            "_new_writer",
            "_new_reader",
            "__init__",
            "setup_ex",
            "read_ex",
            "__init__",
            "setup_ex",
            "read_ex",
            "setup_limiter",
            "check_limiter_condition",
            "data_finished",
            "__init__",
            "setup_limiter",
            "check_limiter_condition",
            "__init__",
            "setup_limiter",
            "check_limiter_condition",
            "__init__",
            "setup_ex",
            "read_ex",
            "__init__",
            "setup_ex",
            "read_ex",
            "reset",
            "__init__",
            "schema",
            "setup",
            "new_reader",
            "sleep_op"
        ],
        "classes": [
            "Reader",
            "Writer",
            "ReaderBuilder",
            "PipedReaderBuilder",
            "Pipe",
            "CounterReader",
            "ReaderWithLimitBase",
            "ReaderWithLimit",
            "ReaderWithTimeLimit",
            "ReaderWithDelay",
            "CompositeReader",
            "CompositeReaderBuilder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/dataset.py",
        "functions": [
            "Const",
            "execution_step_with_progress",
            "__init__",
            "setup_ex",
            "read",
            "reset",
            "__init__",
            "setup_ex",
            "reset",
            "computeoffset",
            "sort_and_shuffle",
            "read",
            "__init__",
            "setup_ex",
            "write",
            "commit",
            "__init__",
            "trim",
            "init_empty",
            "init_from_dataframe",
            "get_blobs",
            "content",
            "field_names",
            "field_types",
            "reader",
            "random_reader",
            "writer"
        ],
        "classes": [
            "_DatasetReader",
            "_DatasetRandomReader",
            "_DatasetWriter",
            "Dataset"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/data_parallel_model.py",
        "functions": [
            "Parallelize_GPU",
            "Parallelize_CPU",
            "Parallelize_iDeep",
            "Parallelize",
            "Parallelize_GPU_BMUF",
            "Parallelize_CPU_BMUF",
            "Parallelize_BMUF",
            "CreateNet",
            "RunInitNet",
            "RunWarmup",
            "RunNet",
            "_AddBarrierToModelNets",
            "_CreateBarrierNet",
            "Synchronize",
            "ConvertNetForDevice",
            "_ForEachDevice",
            "_AddGradientOperators",
            "ExtractPredictorNet",
            "GetCheckpointParams",
            "FinalizeAfterCheckpoint",
            "GetLearningRateBlobNames",
            "_Broadcast",
            "_AllReduce",
            "_SyncAllParams",
            "AddBlobSync",
            "AddDistributedBlobSync",
            "_SyncAllParamsDistributed",
            "_SyncAllParamsSingleHost",
            "_AllReduceBlobs",
            "_PruneParametersForSharing",
            "_RemapParameterBlobsForSharedModel",
            "_AllReduceBlobsDistributed",
            "_AllReduceBlobsSingleHost",
            "_BroadcastComputedParams",
            "_BroadcastComputedParamsDistributed",
            "_BroadcastComputedParamsSingleHost",
            "_GetReverseOrderedGrads",
            "stripBlobName",
            "_AnalyzeOperators",
            "_InferBlobDevice",
            "_IsIDEEPBlob",
            "_IsGPUBlob",
            "_GroupByDevice",
            "_ValidateParams",
            "_ComputeBlobsToSync",
            "_OptimizeGradientMemorySimple",
            "_AddDynamicMemoryOptimization",
            "OptimizeGradientMemory",
            "_CreateOrCloneCommonWorld",
            "_RunComparison",
            "_InterleaveOps",
            "_CPUInterDeviceBatchNormalization",
            "_GPUInterDeviceBatchNormalization",
            "_v",
            "_g",
            "_v_prev",
            "_InitializeModels",
            "_InitializeParamUpdate",
            "create_grad",
            "sumN",
            "modify_ops",
            "__init__",
            "get_control_and_context",
            "map_ops",
            "extract_sort_key",
            "_cpuReduce",
            "_gpuReduce",
            "broadcast",
            "allreduce"
        ],
        "classes": [
            "CollectivesConcurrencyControl"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/data_parallel_model_test.py",
        "functions": [
            "__enter__",
            "__exit__",
            "run_model",
            "run_test_locally",
            "test_equiv",
            "test_checkpoint_params",
            "test_net_conversion_and_append_net",
            "test_synchronization_barrier",
            "test_pre_train_synchronization_barrier",
            "test_device_scope_check",
            "test_net_transformer_function",
            "test_multi_device_bn_op_level_cpu",
            "test_multi_device_bn_op_level_gpu",
            "_bn_check_op_level",
            "test_multi_device_bn_net_lvl_cpu",
            "test_multi_device_bn_net_lvl_gpu",
            "_test_multi_device_bn_net_lvl",
            "run_model",
            "test_equiv_recurrent",
            "run_model",
            "_test_equiv_sparse",
            "test_equiv_sparse",
            "_run_model",
            "_model_build_fun",
            "_param_update_fun",
            "_generate_data",
            "test_parallelize_bmuf",
            "run_model",
            "test_sparse_shared_indices_gpu",
            "input_builder_fun",
            "model_build_fun",
            "add_optimizer",
            "run_fn",
            "add_input_ops",
            "add_model_ops",
            "add_optimizer",
            "add_input_ops",
            "add_model_ops",
            "add_optimizer",
            "run",
            "run",
            "add_input_ops",
            "add_optimizer",
            "add_model_ops",
            "_test_forward_pass",
            "_test_backward_pass",
            "add_input_ops",
            "add_model_ops",
            "add_optimizer",
            "_verify_bn_outputs",
            "_create_model",
            "input_builder_fun",
            "model_build_fun",
            "param_update_fun",
            "input_builder_fun",
            "model_build_fun",
            "param_update_fun",
            "input_builder_fun",
            "input_builder_fun",
            "input_builder_fun",
            "model_build_fun",
            "param_update_fun",
            "add_input_ops",
            "add_model_ops",
            "add_optimizer",
            "add_input_ops",
            "add_model_ops",
            "add_optimizer",
            "add_input_ops_no_combine",
            "add_input_ops_combine",
            "add_model_ops",
            "add_optimizer"
        ],
        "classes": [
            "TemporaryDirectory",
            "DataParallelModelTest",
            "RecurrentNetworkParallelTest",
            "SparseDataParallelModelTest",
            "ParallelizeBMUFTest",
            "SparseDataParallelModelTestWithSharedIndices"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/data_workers.py",
        "functions": [
            "get_worker_ids",
            "init_data_input_workers",
            "enqueuer",
            "__init__",
            "start",
            "stop",
            "cleanup",
            "_get",
            "_validate_chunk",
            "put",
            "_enqueue_batch_direct",
            "_enqueue_batch",
            "_init_scratch",
            "_enqueue",
            "_create_caffe2_queues",
            "_create_caffe2_ops",
            "_log_inputs_per_interval",
            "__init__",
            "get_queue",
            "reset_data_input",
            "__init__",
            "run",
            "finish",
            "create_queue"
        ],
        "classes": [
            "BatchFeeder",
            "GlobalCoordinator",
            "DataWorker"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/data_workers_test.py",
        "functions": [
            "dummy_fetcher",
            "dummy_fetcher_rnn",
            "testNonParallelModel",
            "testRNNInput",
            "testInputOrder",
            "dummy_fetcher_rnn_ordered1"
        ],
        "classes": [
            "DataWorkersTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/db_file_reader.py",
        "functions": [
            "__init__",
            "_init_name",
            "_init_reader_schema",
            "setup_ex",
            "read",
            "_init_field_blobs_as_empty",
            "_feed_field_blobs_from_db_file",
            "_extract_db_name_from_db_path"
        ],
        "classes": [
            "DBFileReader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/db_test.py",
        "functions": [
            "setUp",
            "testSimple"
        ],
        "classes": [
            "TestDB"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/device_checker.py",
        "functions": [
            "__init__",
            "CheckSimple",
            "CheckNet"
        ],
        "classes": [
            "DeviceChecker"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/dyndep.py",
        "functions": [
            "InitOpsLibrary",
            "GetImportedOpsLibraries",
            "_init_impl"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/embedding_generation_benchmark.py",
        "functions": [
            "generate_data",
            "generate_embedding_table",
            "create_model",
            "Caffe2EmbeddingGeneration",
            "Benchmark",
            "GetArgumentParser"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/experiment_util.py",
        "functions": [
            "set_runtime_args",
            "log",
            "__init__",
            "logstr",
            "log"
        ],
        "classes": [
            "ExternalLogger",
            "ModelTrainerLog"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/extension_loader.py",
        "functions": [
            "DlopenGuard"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/fakefp16_transform_lib.py",
        "functions": [
            "fakeFp16FuseOps"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/functional.py",
        "functions": [
            "namedtupledict",
            "getitem",
            "__getattribute__",
            "op_func",
            "get_name_list"
        ],
        "classes": [
            "_Functional"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/functional_test.py",
        "functions": [
            "_tensor_splits",
            "test_relu",
            "test_concat",
            "test_split",
            "split_ref"
        ],
        "classes": [
            "TestFunctional"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/fused_8bit_rowwise_conversion_ops_test.py",
        "functions": [
            "bytes_to_floats",
            "floats_to_bytes",
            "fused_rowwise_8bit_quantize_reference",
            "fused_rowwise_8bit_quantize_dequantize_reference",
            "test_quantize_op",
            "test_quantize_and_dequantize_op"
        ],
        "classes": [
            "TestFused8BitRowwiseQuantizationConversion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/gradient_checker.py",
        "functions": [
            "getGradientForOp",
            "_get_grad_blob",
            "_get_grad",
            "_assert_close",
            "CompareNets",
            "Check",
            "__init__",
            "GetLossAndGrad",
            "CheckSimple",
            "_assertInferTensorChecks",
            "_get_output_with_grad_names",
            "GetLoss",
            "GetValue"
        ],
        "classes": [
            "NetGradientChecker",
            "GradientChecker"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/gradient_check_test.py",
        "functions": [
            "setUp",
            "testLRN",
            "testFlatten",
            "setUp",
            "testConcatNHWC",
            "testConcatNCHW",
            "setUp",
            "testRelu",
            "setUp",
            "testTanh",
            "setUp",
            "testAbs",
            "setUp",
            "testExp",
            "setUp",
            "testCos",
            "setUp",
            "testSin",
            "setUp",
            "testSigmoid",
            "setUp",
            "testSum",
            "setUp",
            "testMakeTwoClass",
            "test_net_gradient_checker",
            "test_net_comparison",
            "testIf",
            "testWhile"
        ],
        "classes": [
            "TestLRN",
            "TestFlatten",
            "TestConcat",
            "TestRelu",
            "TestTanh",
            "TestAbs",
            "TestExp",
            "TestCos",
            "TestSin",
            "TestSigmoid",
            "TestSum",
            "TestMakeTwoClass",
            "TestNetGradientChecker",
            "TestIf",
            "TestWhile"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/gru_cell.py",
        "functions": [
            "__init__",
            "_apply",
            "prepare_input",
            "get_state_names",
            "get_output_dim"
        ],
        "classes": [
            "GRUCell"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/hip_test_util.py",
        "functions": [
            "run_in_hip"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/hsm_util.py",
        "functions": [
            "create_node_with_words",
            "create_node_with_nodes",
            "create_hierarchy",
            "create_path",
            "recursive_path_builder"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/hypothesis_test.py",
        "functions": [
            "sigmoid",
            "_tensor_and_prefix",
            "_tensor_and_indices",
            "_dtypes",
            "_test_binary",
            "_test_binary_broadcast",
            "settings",
            "test_binary",
            "test_binary_broadcast",
            "test_comparison_ops",
            "test_sum",
            "test_row_mul",
            "test_max",
            "test_add",
            "test_sub",
            "test_mul",
            "test_div",
            "test_negative",
            "test_tanh",
            "test_averaged_loss",
            "test_softsign",
            "test_random_seed_behaviour",
            "test_fully_connected_axis",
            "test_recurrent",
            "test_depth_concat",
            "test_depth_concat_with_order",
            "test_last_n_windows",
            "test_print",
            "test_momentum_sgd",
            "test_rmsprop_sgd",
            "_dense_ftrl",
            "test_ftrl_sgd",
            "_dense_gftrl",
            "test_gftrl_sgd",
            "test_sparse_ftrl_sgd",
            "_dense_ftrl_send_alpha_by_input",
            "test_ftrl_sgd_send_alpha_by_input",
            "test_sparse_ftrl_sgd_send_alpha_by_input",
            "test_unique",
            "test_accuracy",
            "test_perplexity",
            "test_lengths_to_segment_ids",
            "test_lengths_range_fill",
            "test_segment_ids_to_ranges",
            "test_lengths_to_ranges",
            "test_lengths_to_offsets",
            "test_multi_class_accuracy",
            "test_segment_ids_to_lengths",
            "test_lengths_to_weights",
            "test_abs",
            "test_cos",
            "test_sin",
            "test_exp",
            "test_log",
            "test_blobs_dequeue_timeout",
            "test_blobs_queue_threading",
            "test_safe_blobs_queue",
            "test_weighted_sample_blobs_queue",
            "test_squeeze_expand_dims",
            "test_tt_layer",
            "test_tt_sls_layer",
            "test_tt_sls_gradientop",
            "test_tt_sls_gradientop1",
            "test_tt_sls",
            "test_tt_sls_repro",
            "test_tt_sls_gradientop2",
            "test_dag_net_forking",
            "test_slice",
            "test_shape",
            "test_shape_with_axes",
            "test_has_elements",
            "test_should_stop_as_criteria_net_execution_step",
            "test_disabled_execution_step",
            "test_iter_count_with_execution_step",
            "test_atomic_iter_with_concurrent_steps",
            "test_cast",
            "test_logit",
            "test_replace_nan",
            "test_constant_fill",
            "test_constant_fill_from_tensor",
            "test_elman_recurrent_network",
            "test_space_to_batch",
            "test_batch_to_space",
            "test_scale",
            "test_string_serde",
            "test_same_pad_image",
            "test_pad_image",
            "test_instance_norm",
            "test_sparse_to_dense",
            "test_dot_product",
            "test_dot_product_with_padding",
            "test_dot_product_with_rep_padding",
            "test_ensure_dense",
            "test_accumulate_histogram_op",
            "test_safe_dequeue_blob__raises_exception_when_hang",
            "wrapped",
            "cast_ref",
            "ref",
            "elementwise_max",
            "not_overflow",
            "ref",
            "ref",
            "not_overflow",
            "ref",
            "ref",
            "non_zero",
            "div_dtypes",
            "softsign",
            "run",
            "prod",
            "depth_concat",
            "depth_concat_with_order",
            "momentum_sgd",
            "rmsprop",
            "ftrl",
            "ftrl",
            "unique_valid",
            "op_ref",
            "op_ref",
            "op_ref",
            "op_ref",
            "op_ref",
            "lengths_to_segment_ids",
            "op_ref",
            "op_ref",
            "op_ref",
            "lengths_to_ids",
            "ids_to_lengths",
            "lengths_to_weights",
            "abs_ref",
            "cos_ref",
            "sin_ref",
            "exp_ref",
            "log_ref",
            "enqueue",
            "append",
            "expand_dims_ref",
            "squeeze_ref",
            "run",
            "slice_ref",
            "shape_ref",
            "createNets",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "reference",
            "ref_nchw",
            "ref_nhwc",
            "sparse_to_dense",
            "sparse_to_dense_noshapeinfer",
            "dotproduct",
            "dotproduct",
            "dotproduct",
            "histogram",
            "_net_instance_cancel",
            "numpy_pad_ref",
            "numpy_pad_ref",
            "numpy_pad_ref",
            "numpy_pad_ref"
        ],
        "classes": [
            "TestOperators"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/hypothesis_test_util.py",
        "functions": [
            "is_sandcastle",
            "is_travis",
            "to_float32",
            "settings",
            "floats",
            "dims",
            "elements_of_type",
            "arrays",
            "tensor",
            "tensor1d",
            "segment_ids",
            "lengths",
            "segmented_tensor",
            "lengths_tensor",
            "sparse_segmented_tensor",
            "sparse_lengths_tensor",
            "tensors",
            "tensors1d",
            "device_checker_device_options",
            "gradient_checker_device_option",
            "temp_workspace",
            "runOpBenchmark",
            "runOpOnInput",
            "assertDeviceChecks",
            "assertGradientChecks",
            "_assertGradReferenceChecks",
            "_assertInferTensorChecks",
            "assertReferenceChecks",
            "assertValidationChecks",
            "assertRunOpRaises"
        ],
        "classes": [
            "HypothesisTestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep_test_util.py",
        "functions": [
            "device_checker_device_options",
            "gradient_checker_device_option"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/layers_test.py",
        "functions": [
            "testSparseDropoutWithReplacement",
            "testAddLoss",
            "testFilterMetricSchema",
            "testAddOutputSchema",
            "_test_net",
            "testFCWithoutBias",
            "testFCWithBootstrap",
            "testFCwithAxis2",
            "testFCTransposed",
            "testFCTransposedWithMaxFCSize",
            "testSparseLookupSumPoolingWithEviction",
            "testSparseLookupSumPooling",
            "testSparseFeatureHashIdList",
            "testSparseFeatureHashIdScoreList",
            "testSparseLookupIncorrectPositionWeightedOnIdList",
            "testSparseLookupPositionWeightedOnIdList",
            "testSparseLookupPositionWeightedOnIdScoreList",
            "testSparseLookupIncorrectRecencyWeightedOnIdList",
            "testSparseLookupRecencyWeightedOnIdScoreList",
            "testPairwiseSimilarityWithAllEmbeddings",
            "testPairwiseSimilarityWithXandYEmbeddings",
            "testPairwiseSimilarityWithXandYEmbeddingsAndGather",
            "testPairwiseSimilarityIncorrectInput",
            "testConcat",
            "testSamplingTrain",
            "testBatchLRLoss",
            "testBatchLRLossWithUncertainty",
            "testMarginRankLoss",
            "testBPRLoss",
            "testBatchMSELoss",
            "testBatchHuberLoss",
            "testBatchSigmoidCrossEntropyLoss",
            "testBatchSoftmaxLoss",
            "testBatchSoftmaxLossWeight",
            "testBatchNormalization",
            "testLayerNormalization",
            "testLastNWindowCollector",
            "testReservoirSamplingWithID",
            "testUniformSampling",
            "testUniformSamplingWithIncorrectSampleSize",
            "testGatherRecord",
            "testMapToRange",
            "testSelectRecordByContext",
            "testFunctionalLayer",
            "testFunctionalLayerHelper",
            "testFunctionalLayerHelperAutoInference",
            "testHalfToFloatTypeInference",
            "testFunctionalLayerHelperAutoInferenceScalar",
            "testFunctionalLayerInputCoercion",
            "testFunctionalLayerWithOutputNames",
            "testFunctionalLayerSameOperatorOutputNames",
            "testFunctionalLayerWithOutputDtypes",
            "testPropagateRequestOnly",
            "testSetRequestOnly",
            "testDropout",
            "testMergeIdListsLayer",
            "testRandomFourierFeatures",
            "testArcCosineFeatureMap",
            "testSemiRandomFeatures",
            "testConv",
            "testAdaptiveWeight",
            "testConstantWeight",
            "testHomotopyWeight",
            "_testLabelSmooth",
            "testLabelSmoothForCategoricalLabel",
            "testLabelSmoothForBinaryProbLabel",
            "testBlobWeightedSum",
            "testFeatureSparseToDenseGetAccessedFeatures",
            "test_get_key",
            "testSparseLookupWithAttentionWeightOnIdScoreList",
            "normalize",
            "_rff_hypothesis_test",
            "_arc_cosine_hypothesis_test",
            "_semi_random_hypothesis_test",
            "get_blob_weighted_sum",
            "_is_id_list",
            "_is_id_score_list",
            "old_get_sparse_key_logic"
        ],
        "classes": [
            "TestLayers"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layer_model_helper.py",
        "functions": [
            "__init__",
            "clear_output_schema",
            "set_initialize_params",
            "add_metric_field",
            "filter_metrics_schema",
            "add_ad_hoc_plot_blob",
            "_get_global_constant_initializer_op",
            "add_global_constant",
            "maybe_add_global_constant",
            "_init_global_constants",
            "_add_global_constants",
            "create_init_net",
            "_validate_param_shape",
            "_validate_param_optim",
            "create_param",
            "next_layer_name",
            "add_layer",
            "get_parameter_blobs",
            "add_post_grad_net_modifiers",
            "add_final_net_modifiers",
            "seed",
            "sequence_seed",
            "store_seed",
            "apply_seed",
            "default_optimizer",
            "default_optimizer",
            "input_feature_schema",
            "trainer_extra_schema",
            "metrics_schema",
            "output_schema",
            "output_schema",
            "preproc_output_schema",
            "preproc_output_schema",
            "prediction",
            "add_prediction",
            "transfer_learning_blob_name_mappings",
            "transfer_learning_blob_name_mappings",
            "loss",
            "loss",
            "has_loss",
            "add_loss",
            "add_output_schema",
            "add_trainer_extra_schema",
            "__getattr__",
            "layers",
            "apply_regularizers_on_loss",
            "apply_regularizers_after_optimizer",
            "apply_post_grad_net_modifiers",
            "apply_final_net_modifiers",
            "apply_optimizers",
            "_GetOne",
            "NoOptim",
            "breakdown_map",
            "breakdown_map",
            "is_functional_layer",
            "resolve_functional_layer",
            "initializer",
            "wrapper",
            "wrapper",
            "apply_operator"
        ],
        "classes": [
            "LayerModelHelper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layer_parameter_sharing_test.py",
        "functions": [
            "test_layer_parameter_name",
            "test_layer_shared_parameter_name_different_namescopes",
            "test_layer_shared_parameter_name_within_same_namescope",
            "test_layer_shared_parameter_name_within_same_namescope_customized_name",
            "test_layer_shared_parameter_name_different_shapes",
            "test_layer_duplicated_parameter_init",
            "test_layer_shared_parameter_optim_validator"
        ],
        "classes": [
            "ParameterSharingTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layer_test_util.py",
        "functions": [
            "__new__",
            "setUp",
            "setup_example",
            "reset_model",
            "new_record",
            "get_training_nets",
            "get_eval_net",
            "get_predict_net",
            "run_train_net",
            "run_train_net_forward_only",
            "assertBlobsEqual",
            "assertArgsEqual",
            "assertNetContainOps",
            "parse_args"
        ],
        "classes": [
            "OpSpec",
            "LayersTestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/lazy.py",
        "functions": [
            "RegisterLazyImport",
            "TriggerLazyImport"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/lazy_dyndep.py",
        "functions": [
            "RegisterOpsLibrary",
            "SetErrorHandler",
            "GetImportedOpsLibraries",
            "_import_lazy"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/lazy_dyndep_test.py",
        "functions": [
            "allcompare_process",
            "__enter__",
            "__exit__",
            "test_allcompare",
            "test_errorhandler",
            "test_importaftererror",
            "test_workspacecreatenet",
            "handler",
            "handler",
            "handlernoop",
            "handler"
        ],
        "classes": [
            "TemporaryDirectory",
            "TestLazyDynDepAllCompare",
            "TestLazyDynDepError"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/lengths_reducer_fused_8bit_rowwise_ops_test.py",
        "functions": [
            "compare_rowwise",
            "test_sparse_lengths_sum",
            "test_sparse_lengths_mean"
        ],
        "classes": [
            "TestLengthsReducerOpsFused8BitRowwise"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/lengths_reducer_rowwise_8bit_ops_test.py",
        "functions": [
            "FakeQuantization8BitsRowwise",
            "test_quantize_op",
            "test_quantize_tensor_with_const_row_op",
            "test_SparseSegmentUint8"
        ],
        "classes": [
            "TestQuantize8bits"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/lstm_benchmark.py",
        "functions": [
            "generate_data",
            "create_model",
            "Caffe2LSTM",
            "Benchmark",
            "GetArgumentParser"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/memonger.py",
        "functions": [
            "share_grad_blobs",
            "optimize_inference_for_dag",
            "estimate_memory_usage",
            "release_blobs_when_used",
            "_find_source_nodes",
            "_find_target_nodes",
            "_add_single_target_ifneeded",
            "_get_path",
            "_get_longest_paths",
            "_build_tree",
            "_compute_tree_height",
            "_sort_tree_leaves",
            "topological_sort_traversal_longest_path",
            "topological_sort_traversal",
            "compute_ranges",
            "is_compatible",
            "compute_blob_assignments",
            "_get_max_size",
            "get_memory_usage",
            "compute_assignments_greedy",
            "_get_count",
            "compute_assignments_dp",
            "get_updated_ranges",
            "compute_assignments",
            "verify_assignments",
            "compute_interference_graph",
            "apply_assignments",
            "apply_recurrent_blob_assignments",
            "optimize_inference_fast",
            "optimize_interference",
            "verify_inplace_blobs",
            "verify_graph_equality",
            "blob_nbytes",
            "compute_statistics",
            "collect_blob_sizes",
            "is_grad_blob",
            "is_grad_op",
            "is_activation_blob",
            "split_net",
            "num_bytes",
            "_next_available_idx",
            "_get_height",
            "_get_height",
            "_get_sorted_leaves",
            "_get_compatible_prev",
            "_find_best",
            "_get_max_live",
            "_update_range",
            "canonical_name",
            "get_inplaces",
            "parent_list",
            "is_compatible_all"
        ],
        "classes": [
            "AssignmentAlgorithm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/memonger_test.py",
        "functions": [
            "has_blob",
            "count_blobs",
            "test_simple_memonger",
            "test_fast_memonger",
            "test_fast_memonger_unique_outputs",
            "test_gradient_optim",
            "test_memonger_mix_cpu_gpu",
            "test_gradient_optim_tree",
            "test_forward_optim_tree_daggy",
            "test_forward_optim_tree_harder",
            "test_forward_optim_tree_dag_traversal",
            "test_forward_optim_tree_enforce_inplace_op_invalid",
            "test_forward_optim_tree_enforce_inplace_op_valid_and_as_head",
            "test_rnn",
            "test_compute_interference_graph_inplace_ops",
            "test_topological_sort_longest_path",
            "test_topological_sort_longest_path_multi_target",
            "test_topological_sort_longest_path_single_node",
            "test_compute_assignments_greedy",
            "test_compute_assignments_dp",
            "test_compute_assignments_dp1",
            "test_verify_graph_equality",
            "test_verify_graph_equality_harder",
            "test_verify_graph_inequality",
            "test_verify_graph_inequality_harder",
            "test_release_blobs_when_used"
        ],
        "classes": [
            "MemongerTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl_test_util.py",
        "functions": [
            "device_checker_device_options",
            "gradient_checker_device_option"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/model_device_test.py",
        "functions": [
            "_MiniAlexNetNoDropout",
            "_testMiniAlexNet",
            "testMiniAlexNetNCHW"
        ],
        "classes": [
            "TestMiniAlexNet"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/model_helper.py",
        "functions": [
            "ExtractPredictorNet",
            "__init__",
            "arg_scope",
            "get_name",
            "_infer_param_shape",
            "_update_param_info_deprecated",
            "_normalize_tags",
            "create_param",
            "get_param_info",
            "add_param_DEPRECATED",
            "AddParameter",
            "_NormalizeNamescope",
            "GetParams",
            "Proto",
            "InitProto",
            "RunAllOnGPU",
            "CreateDB",
            "AddGradientOperators",
            "get_param_to_grad",
            "GetOptimizationParamInfo",
            "_Validate",
            "Validate",
            "GetComputedParams",
            "GetAllParams",
            "TensorProtosDBInput",
            "GetDevices",
            "__getattr__",
            "__dir__",
            "GetCompleteNet",
            "ConstructInitTrainNetfromNet",
            "validate_op",
            "rename_list"
        ],
        "classes": [
            "ModelHelper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/dataio_test.py",
        "functions": [
            "make_source_dataset",
            "make_destination_dataset",
            "__init__",
            "schema",
            "setup",
            "new_reader",
            "test_composite_reader",
            "test_composite_reader_builder",
            "test_runtime_threads",
            "_test_limit_reader_init_shared",
            "_test_limit_reader_shared",
            "test_count_limit_reader_without_limit",
            "test_count_limit_reader_with_zero_limit",
            "test_count_limit_reader_with_low_limit",
            "test_count_limit_reader_with_high_limit",
            "test_time_limit_reader_without_limit",
            "test_time_limit_reader_with_short_limit",
            "test_time_limit_reader_with_long_limit",
            "setUp",
            "tearDown",
            "_delete_path",
            "_make_temp_path",
            "_build_source_reader",
            "_read_all_data",
            "test_cached_reader",
            "test_db_file_reader",
            "proc"
        ],
        "classes": [
            "TestReaderBuilder",
            "TestCompositeReader",
            "TestReaderWithLimit",
            "TestDBFileReader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/filler_test.py",
        "functions": [
            "test_filler"
        ],
        "classes": [
            "TestFiller"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layer_model_instantiator.py",
        "functions": [
            "_filter_layers",
            "shrink_output_schema",
            "generate_predict_net",
            "generate_eval_net",
            "_generate_training_net_only",
            "generate_training_nets_forward_only",
            "generate_training_nets"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/model_helper_test.py",
        "functions": [
            "test_get_complete_net_type",
            "test_get_complete_net"
        ],
        "classes": [
            "ModelHelperTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/numa_benchmark.py",
        "functions": [
            "build_net",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor_constants.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/regularizer_context.py",
        "functions": [
            "has_regularizer",
            "get_regularizer",
            "_context_class"
        ],
        "classes": [
            "RegularizerContext",
            "UseRegularizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modifier_context.py",
        "functions": [
            "__init__",
            "_rebuild_modifiers",
            "_has_modifier",
            "_get_modifier",
            "push_modifiers",
            "pop_modifiers",
            "__init__",
            "_context_class",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "ModifierContext",
            "UseModifierBase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/muji.py",
        "functions": [
            "OnGPU",
            "OnCPU",
            "Allreduce",
            "Allreduce2",
            "Allreduce4",
            "Allreduce4Group2",
            "Allreduce8",
            "AllreduceFallback"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/muji_test.py",
        "functions": [
            "RunningAllreduceWithGPUs",
            "testAllreduceFallback",
            "testAllreduceSingleGPU",
            "testAllreduceWithTwoGPUs",
            "testAllreduceWithFourGPUs",
            "testAllreduceWithFourGPUsAndTwoGroups",
            "testAllreduceWithEightGPUs"
        ],
        "classes": [
            "TestMuji"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/net_builder.py",
        "functions": [
            "__init__",
            "stop_blob",
            "stop_if",
            "_assert_mutable",
            "_update_lexical_scope",
            "_reset_children",
            "add",
            "current_net",
            "freeze",
            "get",
            "__exit__",
            "merge_nets",
            "__str__",
            "net",
            "__getattr__",
            "task_group",
            "stop",
            "stop_if",
            "loop",
            "stop_guard",
            "If",
            "IfNet",
            "Else",
            "WhileNet",
            "Condition",
            "task_init",
            "task_exit",
            "task_instance_init",
            "task_instance_exit",
            "local_init",
            "local_exit",
            "task_reporter",
            "local_reporter",
            "__init__",
            "__exit__",
            "__init__",
            "setup",
            "exit",
            "__init__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__",
            "has_stopped",
            "__init__",
            "iter",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "Elif",
            "Else",
            "__init__",
            "add",
            "__exit__",
            "__init__",
            "__exit__",
            "__init__",
            "__exit__",
            "__init__",
            "__exit__"
        ],
        "classes": [
            "NetBuilder",
            "Operations",
            "_ReporterBuilder",
            "_SetupBuilder",
            "_RunOnce",
            "_StopGuard",
            "_Loop",
            "_RunIf",
            "_RunIfNet",
            "_RunElseNet",
            "_RunWhileNet",
            "_RunWhileCondition"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/net_builder_test.py",
        "functions": [
            "python_op_builder",
            "_test_loop",
            "_test_inner_stop",
            "_test_outer",
            "_test_if",
            "my_op",
            "test_ops",
            "_expected_loop",
            "_actual_loop",
            "test_net_multi_use",
            "test_loops",
            "test_setup",
            "test_multi_instance_python_op",
            "test_multi_instance",
            "test_if_net",
            "test_while_net"
        ],
        "classes": [
            "PythonOpStats",
            "TestNetBuilder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/net_drawer.py",
        "functions": [
            "_rectify_operator_and_name",
            "_escape_label",
            "GetOpNodeProducer",
            "GetBlobNodeProducer",
            "GetPydotGraph",
            "GetPydotGraphMinimal",
            "GetOperatorMapForPlan",
            "_draw_nets",
            "_draw_steps",
            "GetPlanGraph",
            "GetGraphInJson",
            "GetGraphPngSafe",
            "main",
            "ReallyGetOpNode",
            "ReallyGetBlobNode",
            "get_label",
            "substep_edge"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/net_printer.py",
        "functions": [
            "analyze_op",
            "analyze_net",
            "analyze_step",
            "analyze_task",
            "analyze_task_group",
            "analyze_job",
            "analyze",
            "_sanitize_str",
            "_arg_val",
            "commonprefix",
            "format_value",
            "factor_prefix",
            "call",
            "format_device_option",
            "print_op",
            "print_net_def",
            "print_net",
            "_get_step_context",
            "print_step",
            "_print_task_output",
            "print_task",
            "print_task_group",
            "print_job",
            "to_string",
            "debug_net",
            "register",
            "__call__",
            "__init__",
            "workspace",
            "set_workspace",
            "define_blob",
            "need_blob",
            "__init__",
            "context",
            "add",
            "__str__",
            "__init__",
            "_register"
        ],
        "classes": [
            "Visitor",
            "Analyzer",
            "Text",
            "Printer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/net_printer_test.py",
        "functions": [
            "example_loop",
            "example_task",
            "example_job",
            "test_print",
            "test_valid_job",
            "test_undefined_blob",
            "test_multiple_definition"
        ],
        "classes": [
            "TestNetPrinter"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/nomnigraph.py",
        "functions": [
            "render",
            "__init__",
            "dataFlow",
            "controlFlow",
            "nodes",
            "operators",
            "tensors",
            "createNode",
            "deleteNode",
            "createEdge",
            "deleteEdge",
            "replaceNode",
            "replaceProducer",
            "replaceAllUsesWith",
            "replaceAsConsumer",
            "replaceSubgraph",
            "deleteSubgraph",
            "createUniqueDataNode",
            "convertToCaffe2Proto",
            "match"
        ],
        "classes": [
            "NNModule"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/nomnigraph_test.py",
        "functions": [
            "test_simple",
            "test_core_net_simple",
            "test_core_net_controlflow",
            "test_core_net_nn_accessors",
            "test_netdef_simple",
            "test_operatordef_simple",
            "test_invalid_node",
            "test_edges_simple",
            "test_edges_complex",
            "test_traversal",
            "test_debug",
            "test_match_graph_node",
            "test_match_graph_node_strict",
            "test_match_graph",
            "test_delete_subgraph",
            "test_replace_subraph",
            "test_genericGraph",
            "test_createUniqueDataNode",
            "test_convertToProto",
            "test_node_interactions",
            "test_delete_node",
            "test_replace_producer",
            "test_replace_all_uses_with",
            "test_replace_as_consumer",
            "test_annotation_basic",
            "test_annotation_from_graph",
            "test_annotation_operator_def",
            "test_annotation_device_option",
            "test_has_device_option",
            "test_distributed_annotations",
            "test_distributed_device_map"
        ],
        "classes": [
            "TestBindings"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/nomnigraph_transformations.py",
        "functions": [
            "transpose_network"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/nomnigraph_transformations_test.py",
        "functions": [
            "test_simple_replace",
            "test_simple_rewire",
            "test_transpose_network"
        ],
        "classes": [
            "TestNomnigraphTransformations"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/normalizer.py",
        "functions": [
            "__init__",
            "__call__",
            "_run",
            "__init__",
            "_run",
            "__init__",
            "_run"
        ],
        "classes": [
            "Normalizer",
            "BatchNormalizer",
            "LayerNormalizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/normalizer_context.py",
        "functions": [
            "has_normalizer",
            "get_normalizer",
            "_context_class"
        ],
        "classes": [
            "NormalizerContext",
            "UseNormalizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/normalizer_test.py",
        "functions": [
            "test_normalizer_context"
        ],
        "classes": [
            "TestNormalizerContext"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/numa_test.py",
        "functions": [
            "build_test_net",
            "test_numa"
        ],
        "classes": [
            "NUMATest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/observer_test.py",
        "functions": [
            "setUp",
            "testObserver",
            "test_observer_rnn_executor",
            "enable_rnn_executor"
        ],
        "classes": [
            "TestObservers"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_fp_exceptions_test.py",
        "functions": [
            "setThrowIfFpExceptions",
            "test_fp_exception_divbyzero"
        ],
        "classes": [
            "OperatorFPExceptionsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/optimizer.py",
        "functions": [
            "_get_param_to_device",
            "get_param_device",
            "get_lr_injection",
            "set_lr_injection",
            "_calc_norm_ratio",
            "_build",
            "add_weight_decay",
            "build_sgd",
            "build_multi_precision_sgd",
            "build_fp16_sgd",
            "build_ftrl",
            "build_gftrl",
            "build_adagrad",
            "build_wngrad",
            "build_storm",
            "build_adadelta",
            "build_adam",
            "build_yellowfin",
            "build_rms_prop",
            "__init__",
            "__call__",
            "_run",
            "get_cpu_blob_name",
            "get_gpu_blob_name",
            "attributes",
            "make_unique_blob_name",
            "build_lr",
            "add_lr_multiplier",
            "_add_local_lr_multiplier",
            "_clear_local_lr_multiplier",
            "dedup",
            "get_auxiliary_parameters",
            "scale_learning_rate",
            "create_lars_inputs",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "__init__",
            "_run",
            "__init__",
            "_run",
            "__init__",
            "_process_swa_options",
            "_process_ema_options",
            "_process_pruning_options",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate",
            "__init__",
            "_run",
            "scale_learning_rate"
        ],
        "classes": [
            "Optimizer",
            "SgdOptimizer",
            "MultiPrecisionSgdOptimizer",
            "FP16SgdOptimizer",
            "WeightDecayBuilder",
            "AdagradOptimizer",
            "WngradOptimizer",
            "StormOptimizer",
            "AdadeltaOptimizer",
            "FtrlOptimizer",
            "GFtrlOptimizer",
            "AdamOptimizer",
            "YellowFinOptimizer",
            "RmsPropOptimizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/optimizer_context.py",
        "functions": [
            "has_optimizer",
            "get_optimizer",
            "_context_class"
        ],
        "classes": [
            "OptimizerContext",
            "UseOptimizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/optimizer_test.py",
        "functions": [
            "testSparse",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "testGPUDense",
            "build_optimizer",
            "check_optimizer",
            "testSparse",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "testDense",
            "testGPUDense",
            "build_optimizer",
            "check_optimizer",
            "testDense",
            "testGPUDense",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "build_optimizer",
            "check_optimizer",
            "testSparse",
            "deb",
            "get_lr_mu",
            "caffe2_yellowfin",
            "numpy_yellowfin",
            "compare_yellowfin_models",
            "test_caffe2_cpu_vs_numpy",
            "test_caffe2_gpu_vs_numpy",
            "build_optimizer",
            "check_optimizer",
            "testSparse",
            "test_multiple_optimizers",
            "test_weight_decay",
            "test_optimizer_context",
            "infer_blob_device"
        ],
        "classes": [
            "TestLars",
            "TestMomentumSgd",
            "TestSgd",
            "TestMultiPrecisionSgd",
            "TestFtrl",
            "TestGFtrl",
            "TestAdagrad",
            "TestRowWiseAdagrad",
            "TestRowWiseAdagradWithCounter",
            "TestWngrad",
            "TestStorm",
            "TestAdadelta",
            "TestAdam",
            "TestSparseRAdam",
            "TestYellowFin",
            "TestRmsProp",
            "TestMultiOptimizers",
            "TestWeightDecay",
            "TestOptimizerContext"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/optimizer_test_util.py",
        "functions": [
            "_createDense",
            "testDense",
            "testGPUDense",
            "testSparse",
            "_gradient_ratio_reference",
            "test_global_norm_based_gradient_clipping",
            "test_lr_injection"
        ],
        "classes": [
            "OptimizerTestBase",
            "LRModificationTestBase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/parallelize_bmuf_distributed_test.py",
        "functions": [
            "bmuf_process",
            "_model_build_fun",
            "_input_builder_fun",
            "_param_update_fun",
            "_generate_data",
            "_device_pid",
            "test_bmuf_distributed",
            "_test_bmuf_distributed"
        ],
        "classes": [
            "DistributedTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/parallel_workers.py",
        "functions": [
            "init_workers",
            "run_worker",
            "__init__",
            "reset_metrics",
            "log_metrics",
            "put_metric",
            "start",
            "stop",
            "cleanup",
            "__init__",
            "is_active",
            "init",
            "_start",
            "_stop",
            "_wait_finish",
            "get_worker_ids",
            "__init__",
            "add",
            "get_new_worker_id",
            "get_worker_ids",
            "start",
            "stop",
            "stop_coordinator",
            "register_shutdown_handler",
            "__init__",
            "start",
            "run",
            "handle_exception",
            "finish",
            "cleanup"
        ],
        "classes": [
            "Metrics",
            "State",
            "WorkerCoordinator",
            "GlobalWorkerCoordinator",
            "Worker"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/parallel_workers_test.py",
        "functions": [
            "create_queue",
            "create_worker",
            "dequeue_value",
            "dummy_worker",
            "testParallelWorkers",
            "testParallelWorkersInitFun",
            "testParallelWorkersShutdownFun",
            "init_fun",
            "shutdown_fun"
        ],
        "classes": [
            "ParallelWorkersTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/pipeline.py",
        "functions": [
            "_init_output",
            "make_processor",
            "normalize_processor_output",
            "pipe",
            "pipe_and_output",
            "processor_name",
            "_runtime_threads_task",
            "_static_threads_task",
            "_pipe_step",
            "__init__",
            "__init__",
            "schema",
            "setup_ex",
            "read_ex",
            "__init__",
            "schema",
            "setup",
            "__call__",
            "blob_maps",
            "processor_schema"
        ],
        "classes": [
            "Output",
            "ProcessingReader",
            "NetProcessor"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/pipeline_test.py",
        "functions": [
            "test_dequeue_many",
            "proc1",
            "proc2"
        ],
        "classes": [
            "TestPipeline"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/python_op_test.py",
        "functions": [
            "SubFunctionThatThrowsCustomError",
            "MainOpFunctionThatThrowsCustomError",
            "MainOpFunctionThatThrowsCustomErrorInBuilder",
            "op_builder",
            "my_op",
            "test_feed",
            "test_exception",
            "test_exception_builder",
            "test_feed_with_helper_function",
            "test_builder_tuple",
            "test_feed_with_gc",
            "test_reshape",
            "test_workspace_manipulation",
            "test_caught_exception_doesnt_terminate",
            "test_multithreaded_evaluation",
            "test_gradient",
            "test_gradient_multiple",
            "test_gradient_multiple_with_indices",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "grad_f",
            "f",
            "grad_f",
            "f",
            "grad_f"
        ],
        "classes": [
            "CustomError",
            "PythonOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/queue_util.py",
        "functions": [
            "enqueue",
            "dequeue",
            "close_queue",
            "__init__",
            "setup_ex",
            "read_ex",
            "read",
            "__init__",
            "setup_ex",
            "write_ex",
            "__init__",
            "reader",
            "writer",
            "queue",
            "__init__",
            "setup"
        ],
        "classes": [
            "_QueueReader",
            "_QueueWriter",
            "QueueWrapper",
            "Queue"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/record_queue.py",
        "functions": [
            "__init__",
            "read",
            "__init__",
            "write",
            "__init__",
            "build"
        ],
        "classes": [
            "_QueueReader",
            "_QueueWriter",
            "RecordQueue"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/recurrent.py",
        "functions": [
            "recurrent_net",
            "set_rnn_executor_config",
            "retrieve_step_blobs",
            "s",
            "unpack_triple",
            "map_to_dual_list",
            "add_arg"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/regularizer.py",
        "functions": [
            "__init__",
            "__call__",
            "_run_on_loss",
            "_run_after_optimizer",
            "_feature_grouping",
            "_ensure_clipped",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_on_loss",
            "__init__",
            "_run_after_optimizer",
            "__init__",
            "_run_after_optimizer",
            "__init__",
            "_run_after_optimizer",
            "__init__",
            "__init__",
            "__init__",
            "_run_on_loss",
            "_run_after_optimizer",
            "__init__",
            "_run_after_optimizer",
            "__init__",
            "_run_on_loss"
        ],
        "classes": [
            "RegularizationBy",
            "Regularizer",
            "L1Norm",
            "LpNorm",
            "L0ApproxNorm",
            "L1NormTrimmed",
            "L2Norm",
            "ElasticNet",
            "ElasticNetL1NormTrimmed",
            "MaxNorm",
            "ConstantNorm",
            "SparseLpNorm",
            "SparseL1Norm",
            "SparseL2Norm",
            "LogBarrier",
            "BoundedGradientProjection",
            "GroupL1Norm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/regularizer_test.py",
        "functions": [
            "test_regularizer_context",
            "test_log_barrier",
            "test_bounded_grad_proj",
            "test_group_l1_norm",
            "test_l1_norm_trimmed",
            "test_elastic_l1_norm_trimmed",
            "ref",
            "ref",
            "compare_reference"
        ],
        "classes": [
            "TestRegularizerContext",
            "TestRegularizer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/rnn_cell.py",
        "functions": [
            "_RectifyName",
            "_RectifyNames",
            "_LSTM",
            "GetLSTMParamNames",
            "InitFromLSTMParams",
            "cudnn_LSTM",
            "LSTMWithAttention",
            "_layered_LSTM",
            "__init__",
            "initializer",
            "initializer",
            "scope",
            "apply_over_sequence",
            "apply",
            "_apply",
            "_rectify_apply_inputs",
            "apply_override",
            "prepare_input",
            "get_output_state_index",
            "get_state_names",
            "get_state_names_override",
            "get_output_dim",
            "_prepare_output",
            "_prepare_output_sequence",
            "__init__",
            "create_states",
            "__init__",
            "apply_override",
            "prepare_input",
            "get_state_names",
            "get_output_dim",
            "__init__",
            "apply_override",
            "get_input_params",
            "get_recurrent_params",
            "prepare_input",
            "get_state_names_override",
            "get_output_dim",
            "__init__",
            "_apply",
            "get_input_params",
            "prepare_input",
            "get_state_names",
            "_apply",
            "_apply",
            "__init__",
            "_apply",
            "_prepare_output",
            "_prepare_output_sequence",
            "_apply_dropout",
            "__init__",
            "create_states",
            "__init__",
            "layer_scoper",
            "prepare_input",
            "_apply",
            "get_state_names",
            "get_output_state_index",
            "_prepare_output",
            "_prepare_output_sequence",
            "__init__",
            "_apply",
            "get_attention_weights",
            "prepare_input",
            "build_initial_coverage",
            "get_state_names",
            "get_output_dim",
            "get_output_state_index",
            "_prepare_output",
            "_prepare_output_sequence",
            "__init__",
            "__init__",
            "__init__",
            "apply_over_sequence",
            "helper",
            "init"
        ],
        "classes": [
            "RNNCell",
            "LSTMInitializer",
            "BasicRNNCell",
            "LSTMCell",
            "LayerNormLSTMCell",
            "MILSTMCell",
            "LayerNormMILSTMCell",
            "DropoutCell",
            "MultiRNNCellInitializer",
            "MultiRNNCell",
            "AttentionCell",
            "LSTMWithAttentionCell",
            "MILSTMWithAttentionCell",
            "UnrolledCell"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/schema.py",
        "functions": [
            "_join_field_name",
            "_normalize_field",
            "Map",
            "MapWithEvicted",
            "NamedTuple",
            "Tuple",
            "RawTuple",
            "from_dtype",
            "from_column_list",
            "from_blob_list",
            "as_record",
            "FetchRecord",
            "FeedRecord",
            "NewRecord",
            "ConstRecord",
            "InitEmptyRecord",
            "is_schema_subset",
            "equal_schemas",
            "schema_check",
            "data_type_for_dtype",
            "dtype_for_core_type",
            "attach_metadata_to_scalars",
            "__init__",
            "clone_schema",
            "field_names",
            "field_types",
            "field_metadata",
            "field_blobs",
            "all_scalars",
            "has_blobs",
            "clone",
            "_set_parent",
            "slice",
            "_child_base_id",
            "__eq__",
            "_pprint_impl",
            "__repr__",
            "__init__",
            "field_names",
            "field_types",
            "field_metadata",
            "field_blobs",
            "all_scalars",
            "has_blobs",
            "clone",
            "_pprint_impl",
            "__getattr__",
            "__getitem__",
            "__init__",
            "field_names",
            "field_types",
            "field_metadata",
            "field_blobs",
            "all_scalars",
            "has_blobs",
            "clone",
            "_pprint_impl",
            "__getattr__",
            "__getitem__",
            "__init__",
            "_struct_from_nested_name",
            "get_children",
            "field_names",
            "field_types",
            "field_metadata",
            "field_blobs",
            "all_scalars",
            "has_blobs",
            "clone",
            "_get_field_by_nested_name",
            "_pprint_impl",
            "__contains__",
            "__len__",
            "__getitem__",
            "get",
            "__getattr__",
            "__setattr__",
            "__add__",
            "__sub__",
            "__init__",
            "field_names",
            "field_type",
            "field_types",
            "field_metadata",
            "has_blobs",
            "field_blobs",
            "all_scalars",
            "clone",
            "get",
            "__call__",
            "metadata",
            "set_metadata",
            "_validate_metadata",
            "set_value",
            "set",
            "set_type",
            "_pprint_impl",
            "id",
            "__init__",
            "add_child",
            "get_field",
            "print_recursively",
            "fetch",
            "feed",
            "create_internal"
        ],
        "classes": [
            "Metadata",
            "Field",
            "List",
            "ListWithEvicted",
            "Struct",
            "Scalar",
            "_SchemaNode"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/schema_test.py",
        "functions": [
            "testInitShouldSetEmptyParent",
            "testInitShouldSetFieldOffsets",
            "testInitShouldSetFieldOffsetsIfNoChildren",
            "testPicklable",
            "testListSubclassClone",
            "testListWithEvictedSubclassClone",
            "testStructSubclassClone",
            "testNormalizeField",
            "testTuple",
            "testRawTuple",
            "testStructIndexing",
            "testListInStructIndexing",
            "testListWithEvictedInStructIndexing",
            "testMapInStructIndexing",
            "testPreservesMetadata",
            "testDupField",
            "testAssignToField",
            "testPreservesEmptyFields",
            "testStructSubstraction",
            "testStructNestedSubstraction",
            "testStructAddition",
            "testStructNestedAddition",
            "testGetFieldByNestedName",
            "testAddFieldByNestedName",
            "testContains",
            "testFromEmptyColumnList",
            "testFromColumnList",
            "testStructGet",
            "testScalarForVoidType",
            "testScalarShape",
            "testDtypeForCoreType"
        ],
        "classes": [
            "TestField",
            "TestDB",
            "Subclass",
            "Subclass",
            "Subclass"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/scope.py",
        "functions": [
            "CurrentNameScope",
            "CurrentDeviceScope",
            "NameScope",
            "DeviceScope",
            "EmptyNameScope",
            "EmptyDeviceScope"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/scope_test.py",
        "functions": [
            "thread_runner",
            "testNamescopeBasic",
            "testNamescopeAssertion",
            "testEmptyNamescopeBasic",
            "testDevicescopeBasic",
            "testEmptyDevicescopeBasic",
            "testDevicescopeAssertion",
            "testTags",
            "testMultiThreaded"
        ],
        "classes": [
            "TestScope"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/session.py",
        "functions": [
            "__init__",
            "__init__",
            "is_open",
            "compile",
            "run",
            "close",
            "fetch_output",
            "_run_compiled",
            "_compile_task_group",
            "_do_close",
            "__enter__",
            "__exit__",
            "__init__",
            "_compile_task_group",
            "_run_compiled",
            "_fetch_output"
        ],
        "classes": [
            "CompiledRunnable",
            "Session",
            "LocalSession"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/session_test.py",
        "functions": [
            "test_local_session",
            "proc1",
            "proc2"
        ],
        "classes": [
            "TestLocalSession"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/sparse_to_dense_mask_test.py",
        "functions": [
            "test_sparse_to_dense_mask_float",
            "test_sparse_to_dense_mask_invalid_inputs",
            "test_sparse_to_dense_mask_subtensor",
            "test_sparse_to_dense_mask_string",
            "test_sparse_to_dense_mask_empty_lengths",
            "test_sparse_to_dense_mask_no_lengths",
            "test_sparse_to_dense_mask_presence_mask"
        ],
        "classes": [
            "TestSparseToDenseMask"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/sparse_to_dense_test.py",
        "functions": [
            "test_sparse_to_dense",
            "test_sparse_to_dense_shape_inference",
            "test_sparse_to_dense_invalid_inputs",
            "test_sparse_to_dense_with_data_to_infer_dim"
        ],
        "classes": [
            "TestSparseToDense"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/task.py",
        "functions": [
            "_merge_node_kwargs",
            "get_setup_nets",
            "add_setup_steps",
            "final_output",
            "__init__",
            "add_node",
            "nodes",
            "node_kwargs",
            "__repr__",
            "__init__",
            "__str__",
            "__repr__",
            "kwargs",
            "__init__",
            "add_remote_net",
            "remote_nets",
            "add",
            "tasks",
            "num_registered_tasks",
            "used_nodes",
            "report_step",
            "report_net",
            "tasks_by_node",
            "to_task",
            "workspace_type",
            "__repr__",
            "__init__",
            "set",
            "get",
            "fetch",
            "__repr__",
            "__init__",
            "names",
            "set_values",
            "__repr__",
            "_get_next_name",
            "__init__",
            "__enter__",
            "__exit__",
            "workspace_type",
            "_assert_not_used",
            "add_output",
            "add_outputs",
            "set_step",
            "get_step",
            "output_list",
            "outputs",
            "_notify_used",
            "__repr__",
            "__init__",
            "setup",
            "exit",
            "__repr__"
        ],
        "classes": [
            "Cluster",
            "Node",
            "WorkspaceType",
            "TaskGroup",
            "TaskOutput",
            "TaskOutputList",
            "Task",
            "SetupNets"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/task_test.py",
        "functions": [
            "testRepr",
            "testEffectlessRepr"
        ],
        "classes": [
            "TestTask"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test_util.py",
        "functions": [
            "rand_array",
            "randBlob",
            "randBlobFloat32",
            "randBlobsFloat32",
            "numOps",
            "str_compare",
            "get_default_test_flags",
            "caffe2_flaky",
            "is_flaky_test_mode",
            "setUpClass",
            "setUp",
            "tearDown"
        ],
        "classes": [
            "TestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/text_file_reader.py",
        "functions": [
            "__init__",
            "read"
        ],
        "classes": [
            "TextFileReader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/timeout_guard.py",
        "functions": [
            "CompleteInTimeOrDie",
            "EuthanizeIfNecessary",
            "__init__",
            "run",
            "forcequit"
        ],
        "classes": [
            "WatcherThread"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/toy_regression_test.py",
        "functions": [
            "testToyRegression"
        ],
        "classes": [
            "TestToyRegression"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/transformations.py",
        "functions": [
            "fuseNNPACKConvRelu",
            "optimizeForMKLDNN",
            "fuseConvBN",
            "__init__",
            "runTransform",
            "__getattr__"
        ],
        "classes": [
            "Transformer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/transformations_test.py",
        "functions": [
            "_base_test_net",
            "_add_nnpack",
            "_fuse_nnpack_convrelu",
            "test_transformer_AddNNPACK",
            "test_transformer_FuseNNPACKConvRelu",
            "test_noFuseNNPACKConvRelu",
            "test_transformer_FuseNNPACKConvReluNoInplace",
            "test_transformer_FuseNNPACKConvReluInplaceRelu",
            "test_transformer_FuseNNPACKConvReluPingPongNaming",
            "test_transformer_FuseNNPACKConvReluFollowedByMultipleInputOp",
            "test_transformer_FuseNNPACKConvReluInplaceFollowedByMultipleInputOp",
            "test_transformer_FuseConvBN",
            "test_transformer_FuseConvBNNoConvBias",
            "test_transformer_FuseConvBNNoConvBiasDuplicatedName",
            "test_transformer_FuseConv3DBN",
            "test_converterDontEnforceUnusedInputs",
            "test_converterDontEnforceUnusedOutputs"
        ],
        "classes": [
            "TestTransformations"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/tt_core.py",
        "functions": [
            "init_tt_cores",
            "matrix_to_tt",
            "tt_svd",
            "fc_net_to_tt_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/tt_core_test.py",
        "functions": [
            "test_full_tt_svd"
        ],
        "classes": [
            "TestTTSVD"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/utils.py",
        "functions": [
            "OpAlmostEqual",
            "CaffeBlobToNumpyArray",
            "Caffe2TensorToNumpyArray",
            "NumpyArrayToCaffe2Tensor",
            "MakeArgument",
            "TryReadProtoWithClass",
            "GetContentFromProto",
            "GetContentFromProtoString",
            "ConvertProtoToBinary",
            "GetGPUMemoryUsageStats",
            "ResetBlobs",
            "raiseIfNotEqual",
            "debug",
            "BuildUniqueMutexIter",
            "EnumClassKeyVals",
            "ArgsToDict",
            "NHWC2NCHW",
            "NCHW2NHWC",
            "clean_op",
            "run",
            "wrapper",
            "func"
        ],
        "classes": [
            "DebugMode"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/utils_test.py",
        "functions": [
            "testArgsToDict",
            "testBuildUniqueMutexIter"
        ],
        "classes": [
            "TestUtils"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/visualize.py",
        "functions": [
            "ChannelFirst",
            "ChannelLast",
            "__init__",
            "ShowSingle",
            "ShowMultiple",
            "ShowImages",
            "ShowChannels",
            "get_patch_shape",
            "ShowSingle",
            "ShowMultiple",
            "ShowImages",
            "ShowChannels",
            "ShowSingle",
            "ShowMultiple",
            "ShowImages",
            "ShowChannels"
        ],
        "classes": [
            "PatchVisualizer",
            "NHWC",
            "NCHW"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/workspace.py",
        "functions": [
            "FillRandomNetworkInputs",
            "_GetFreeFlaskPort",
            "StartMint",
            "StringifyProto",
            "ResetWorkspace",
            "CreateNet",
            "Predictor",
            "GetOperatorCost",
            "RunOperatorOnce",
            "RunOperatorMultiple",
            "RunOperatorsOnce",
            "ClearGlobalNetObserver",
            "CallWithExceptionIntercept",
            "RunNetOnce",
            "RunNet",
            "RunPlan",
            "RunPlanInBackground",
            "InferShapesAndTypes",
            "_StringifyName",
            "StringifyBlobName",
            "StringifyNetName",
            "GetNetName",
            "FeedBlob",
            "FetchBlobs",
            "FetchBlob",
            "FetchTorch",
            "FetchInt8Blob",
            "FetchInt8BlobRealVal",
            "_Workspace_fetch_int8_blob",
            "ApplyTransform",
            "ApplyTransformIfFaster",
            "GetNameScope",
            "IsImmediate",
            "WorkspaceGuard",
            "StartImmediate",
            "StopImmediate",
            "ImmediateBlobs",
            "RunOperatorImmediate",
            "FetchImmediate",
            "FeedImmediate",
            "_Workspace_create_net_with_exception_intercept",
            "_Workspace_run",
            "_Workspace_feed_blob",
            "_Workspace_remove_blob",
            "_Blob_feed",
            "_Tensor_to_torch",
            "_Blob_to_torch",
            "GetGpuPeerAccessPattern",
            "GetGpuPeerAccessPattern",
            "__getitem__",
            "__setitem__",
            "__len__",
            "__iter__",
            "__contains__"
        ],
        "classes": [
            "_BlobDict"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/workspace_test.py",
        "functions": [
            "setUp",
            "testRootFolder",
            "testWorkspaceHasBlobWithNonexistingName",
            "testRunOperatorOnce",
            "testGetOperatorCost",
            "testRunNetOnce",
            "testCurrentWorkspaceWrapper",
            "testRunPlan",
            "testRunPlanInBackground",
            "testConstructPlanFromSteps",
            "testResetWorkspace",
            "testTensorAccess",
            "testFetchFeedBlob",
            "testFetchFeedBlobViaBlobReference",
            "testFetchFeedBlobTypes",
            "testFetchFeedBlobBool",
            "testGetBlobSizeBytes",
            "testFetchFeedBlobZeroDim",
            "testFetchFeedLongStringTensor",
            "testFetchFeedShortStringTensor",
            "testFetchFeedPlainString",
            "testFetchBlobs",
            "testFetchFeedViaBlobDict",
            "testTorchInterop",
            "setUp",
            "testCreateWorkspace",
            "setUp",
            "testFetchBlobGPU",
            "testGetGpuPeerAccessPattern",
            "testTorchInterop",
            "testFeedFetchBlobIDEEP",
            "testImmediateEnterExit",
            "testImmediateRunsCorrectly",
            "testImmediateRootFolder",
            "testEnforce",
            "test_net_execution",
            "test_operator_run",
            "test_net_run",
            "test_plan_run",
            "test_net_create",
            "test_array_serde",
            "test_string_serde",
            "test_exception",
            "_create_model",
            "test_predictor_memory_model",
            "test_simple_transform",
            "test_registry_invalid",
            "test_apply_transform_if_faster",
            "__init__",
            "forward",
            "multi_input",
            "multi_output",
            "_createFeedModule",
            "testCreation",
            "testForward",
            "testMultiInputOutput",
            "testSerialization",
            "_createFeedModule",
            "_get_modules_bytes"
        ],
        "classes": [
            "TestWorkspace",
            "TestMultiWorkspaces",
            "TestWorkspaceGPU",
            "TestWorkspaceIDEEP",
            "TestImmedibate",
            "TestCppEnforceAsException",
            "TestCWorkspace",
            "TestPredictor",
            "TestTransform",
            "MyModule",
            "TestScriptModule",
            "TestScriptModuleFromString"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/_import_c_extension.py",
        "functions": [
            "_TensorCPU_shape",
            "_TensorCPU_reshape"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/benchmarks/concat_benchmark.py",
        "functions": [
            "benchmark_concat"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/benchmarks/fused_rowwise_nbit_conversion_bench.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/benchmarks/sparse_lengths_sum_nbit_benchmark.py",
        "functions": [
            "benchmark_sparse_lengths_sum",
            "f"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/benchmarks/sparse_normalize_benchmark.py",
        "functions": [
            "benchmark_sparse_normalize",
            "f"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/docs/formatter.py",
        "functions": [
            "__init__",
            "clone",
            "dump",
            "parseAndAdd",
            "addRaw",
            "addLine",
            "addLinebreak",
            "addHeader",
            "addEmphasis",
            "addList",
            "addLink",
            "addCode",
            "addCodeLink",
            "addTable",
            "addBreak",
            "addRaw",
            "addLine",
            "addLinebreak",
            "addHeader",
            "addEmphasis",
            "addList",
            "addLink",
            "addCodeLink",
            "addCode",
            "addTable",
            "addBreak"
        ],
        "classes": [
            "Formatter",
            "Markdown"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/docs/generator.py",
        "functions": [
            "__init__",
            "upload",
            "__init__",
            "create_body",
            "update",
            "getOperatorDoc",
            "getOperatorEngine",
            "getOperators",
            "createBody",
            "__init__",
            "getDeviceImpl",
            "generateDoc",
            "__init__",
            "addEngines",
            "generateDoc",
            "generateTable",
            "generateInterface",
            "generateCodeLink",
            "getInfo",
            "generateDevices",
            "generateEngines",
            "generateSchema",
            "filePriority",
            "makeDesc"
        ],
        "classes": [
            "DocUploader",
            "DocGenerator",
            "OpDocGenerator",
            "OperatorEngine",
            "OperatorDoc"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/docs/github.py",
        "functions": [
            "getCodeLink",
            "__init__",
            "upload",
            "addHeader",
            "addDocHeader",
            "addTable",
            "addTableHTML",
            "generateDoc",
            "generateCodeLink",
            "getInfo",
            "generateSchema",
            "getOperatorDoc",
            "getOperatorEngine",
            "createBody"
        ],
        "classes": [
            "GHOpDocUploader",
            "GHMarkdown",
            "GHOperatorEngine",
            "GHOperatorDoc",
            "GHOpDocGenerator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/docs/parser.py",
        "functions": [
            "__init__",
            "parseText",
            "parse"
        ],
        "classes": [
            "Parser"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/docs/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/examples/char_rnn.py",
        "functions": [
            "CreateNetOnce",
            "main",
            "__init__",
            "CreateModel",
            "_idx_at_pos",
            "TrainModel",
            "GenerateText"
        ],
        "classes": [
            "CharRNN"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/examples/imagenet_trainer.py",
        "functions": [
            "AddImageInput",
            "AddNullInput",
            "SaveModel",
            "LoadModel",
            "RunEpoch",
            "Train",
            "main",
            "create_resnext_model_ops",
            "create_shufflenet_model_ops",
            "add_optimizer",
            "add_post_sync_ops",
            "add_image_input",
            "add_image_input",
            "test_input_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/examples/lmdb_create_example.py",
        "functions": [
            "create_db",
            "read_db_with_caffe2",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/examples/resnet50_trainer.py",
        "functions": [
            "AddImageInput",
            "AddNullInput",
            "SaveModel",
            "LoadModel",
            "RunEpoch",
            "Train",
            "main",
            "create_resnext_model_ops",
            "create_shufflenet_model_ops",
            "add_optimizer",
            "add_post_sync_ops",
            "add_image_input",
            "add_image_input",
            "test_input_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/examples/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/fakelowp/init_shared_libs.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/fakelowp/test_utils.py",
        "functions": [
            "print_test_debug_info",
            "print_net",
            "_sigmoid",
            "_tanh",
            "_swish",
            "_gelu_by_sigmoid",
            "_acc_func",
            "_get_ulp16",
            "compute_ulp_error"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/fakelowp/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/algebra.py",
        "functions": [
            "transpose",
            "sum",
            "reduce_sum",
            "sub",
            "mat_mul",
            "arg_min",
            "batch_mat_mul",
            "sparse_lengths_sum_4bit_rowwise_sparse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/arg_scope.py",
        "functions": [
            "arg_scope",
            "get_current_scope"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/array_helpers.py",
        "functions": [
            "concat",
            "depth_concat"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/control_ops.py",
        "functions": [
            "cond",
            "loop"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/conv.py",
        "functions": [
            "_ConvBase",
            "conv_nd",
            "conv",
            "conv_transpose",
            "group_conv",
            "group_conv_deprecated"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/db_input.py",
        "functions": [
            "db_input"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/dropout.py",
        "functions": [
            "dropout"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/elementwise_linear.py",
        "functions": [
            "_elementwise_linear",
            "elementwise_linear"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/fc.py",
        "functions": [
            "_FC_or_packed_FC",
            "fc",
            "packed_fc",
            "fc_decomp",
            "fc_prune",
            "fc_sparse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/nonlinearity.py",
        "functions": [
            "prelu",
            "relu",
            "tanh"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/normalization.py",
        "functions": [
            "lrn",
            "softmax",
            "instance_norm",
            "spatial_bn",
            "spatial_gn",
            "layer_norm",
            "moments_with_running_stats",
            "init_blob"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/pooling.py",
        "functions": [
            "max_pool",
            "average_pool",
            "max_pool_with_index"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/quantization.py",
        "functions": [
            "fused_8bit_rowwise_quantized_to_float"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/tools.py",
        "functions": [
            "image_input",
            "video_input"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/train.py",
        "functions": [
            "_get_weights",
            "iter",
            "accuracy",
            "add_weight_decay"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/helpers/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/adam_op_test.py",
        "functions": [
            "test_adam",
            "test_adam_output_grad"
        ],
        "classes": [
            "TestAdamOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/blobs_queue_db_test.py",
        "functions": [
            "test_create_blobs_queue_db_string",
            "test_create_blobs_queue_db_tensor",
            "_test_create_blobs_queue_db",
            "_add_blob_to_queue",
            "_create_test_tensor_protos",
            "add_blobs",
            "add_blobs"
        ],
        "classes": [
            "BlobsQueueDBTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/channel_shuffle_op_test.py",
        "functions": [
            "test_channel_shuffle"
        ],
        "classes": [
            "ChannelShuffleTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/concat_split_op_test.py",
        "functions": [
            "_tensor_splits",
            "test_concat",
            "test_split",
            "test_concat_add_axis",
            "test_concat_with_TensorCPU",
            "split_ref"
        ],
        "classes": [
            "TestConcatSplitOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/convfusion_op_test.py",
        "functions": [
            "test_convolution_relu_fusion",
            "test_convolution_sum_fusion",
            "test_convolution_sum_relu_fusion",
            "test_convolution_grouped_sum_relu_fusion",
            "test_convolution_bn_folding",
            "test_convolution_affch_folding"
        ],
        "classes": [
            "ConvFusionTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/conv_op_test.py",
        "functions": [
            "test_convolution",
            "test_winograd_convolution",
            "test_depthwise_convolution"
        ],
        "classes": [
            "ConvTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/conv_transpose_test.py",
        "functions": [
            "test_convolution_transpose_gradients"
        ],
        "classes": [
            "ConvTransposeTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/copy_op_test.py",
        "functions": [
            "_get_deep_device",
            "test_copy_to_ideep",
            "test_copy_to_ideep_zero_dim",
            "test_copy_from_ideep",
            "test_copy_from_ideep_zero_dim",
            "test_copy_from_ideep_fallthrough"
        ],
        "classes": [
            "CopyTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/dropout_op_test.py",
        "functions": [
            "test_dropout_is_test",
            "test_dropout_ratio0",
            "reference_dropout_test",
            "reference_dropout_ratio0"
        ],
        "classes": [
            "DropoutTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/elementwise_sum_op_test.py",
        "functions": [
            "test_elementwise_sum",
            "test_elementwise_sum_fallback",
            "test_int8_elementwise_sum"
        ],
        "classes": [
            "ElementwiseSumTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/expanddims_squeeze_op_test.py",
        "functions": [
            "test_squeeze",
            "test_squeeze_fallback",
            "test_expand_dims",
            "test_expand_dims_fallback"
        ],
        "classes": [
            "ExpandDimsSqueezeTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/fc_op_test.py",
        "functions": [
            "test_fc_2_dims",
            "test_fc_with_axis",
            "test_fc_with_axis_w",
            "test_fc_4_dims_src",
            "test_fc_4_dims",
            "test_int8_fc_4_dims"
        ],
        "classes": [
            "FcTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/leaky_relu_op_test.py",
        "functions": [
            "_get_inputs",
            "_get_op",
            "_feed_inputs",
            "test_leaky_relu_gradients",
            "test_leaky_relu_model_helper_helper"
        ],
        "classes": [
            "LeakyReluTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/LRN_op_test.py",
        "functions": [
            "test_LRN"
        ],
        "classes": [
            "LRNTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/moment_sgd_op_test.py",
        "functions": [
            "test_MomentumSGDUpdate"
        ],
        "classes": [
            "TestMomentumSGDUpdateOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/operator_fallback_op_test.py",
        "functions": [
            "test_in_place"
        ],
        "classes": [
            "TestFallbackOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/order_switch_op_test.py",
        "functions": [
            "test_nchw2nhwc",
            "test_nhwc2nchw"
        ],
        "classes": [
            "OrderSwitchTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/pool_op_test.py",
        "functions": [
            "test_pooling",
            "test_int8_pooling"
        ],
        "classes": [
            "PoolTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/pre_convert_test.py",
        "functions": [
            "test_preConvert",
            "AddModel",
            "AddTrainingOperators"
        ],
        "classes": [
            "PreConvertTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/relu_op_test.py",
        "functions": [
            "test_relu",
            "test_int8_relu"
        ],
        "classes": [
            "ReluTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/reshape_op_test.py",
        "functions": [
            "_test_reshape",
            "test_reshape_ops",
            "test_basic_reshape",
            "test_int64_reshape_input",
            "test_missing_dim",
            "test_in_place",
            "test_zero_dim",
            "test_zero_dim_and_missing_dim",
            "test_backprop",
            "test_input_shape_changes"
        ],
        "classes": [
            "TestReShapeOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/shape_op_test.py",
        "functions": [
            "test_shape",
            "test_shape_with_axes"
        ],
        "classes": [
            "ShapeTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/sigmoid_op_test.py",
        "functions": [
            "test_sigmoid"
        ],
        "classes": [
            "SigmoidTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/softmax_op_test.py",
        "functions": [
            "test_softmax"
        ],
        "classes": [
            "SoftmaxTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/spatial_bn_op_test.py",
        "functions": [
            "test_spatialbn_test_mode",
            "test_spatialbn_train_mode",
            "test_spatialbn_train_mode_gradient_check",
            "reference_spatialbn_test"
        ],
        "classes": [
            "TestSpatialBN"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/test_ideep_net.py",
        "functions": [
            "GetArgumentParser",
            "benchmark"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/transform_ideep_net.py",
        "functions": [
            "pairwise",
            "last_producer",
            "blob_uses",
            "GetArgumentParser",
            "fuse_first_bn",
            "fuse_bn",
            "fuse_first_mul_add",
            "fuse_mul_add",
            "add_tensor",
            "gen_init_net_from_blobs",
            "fuse_conv_relu",
            "Optimize",
            "s"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/transpose_op_test.py",
        "functions": [
            "test_transpose",
            "transpose_ref"
        ],
        "classes": [
            "TransposeTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/weightedsum_op_test.py",
        "functions": [
            "test_weighted_sum",
            "weighted_sum_op_ref"
        ],
        "classes": [
            "TestWeightedSumOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/ideep/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/fc_with_bootstrap.py",
        "functions": [
            "get_fc_predictor_version",
            "__init__",
            "_generate_bootstrapped_indices",
            "_bootstrap_ops",
            "_insert_fc_ops",
            "_add_ops",
            "add_ops",
            "add_train_ops",
            "get_fp16_compatible_parameters",
            "param_blobs"
        ],
        "classes": [
            "FCWithBootstrap"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/adaptive_weight.py",
        "functions": [
            "__init__",
            "concat_data",
            "log_std_init",
            "log_std_weight",
            "log_std_reg",
            "inv_var_init",
            "inv_var_weight",
            "inv_var_reg",
            "_add_ops_impl",
            "add_ops"
        ],
        "classes": [
            "AdaptiveWeight"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/add_bias.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "AddBias"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/arc_cosine_feature_map.py",
        "functions": [
            "__init__",
            "_initialize_params",
            "_heaviside_with_power",
            "add_ops"
        ],
        "classes": [
            "ArcCosineFeatureMap"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_huber_loss.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "BatchHuberLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_lr_loss.py",
        "functions": [
            "__init__",
            "init_weight",
            "update_weight",
            "add_ops"
        ],
        "classes": [
            "BatchLRLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_mse_loss.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "BatchMSELoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_normalization.py",
        "functions": [
            "__init__",
            "_add_ops",
            "add_train_ops",
            "add_eval_ops",
            "add_ops"
        ],
        "classes": [
            "BatchNormalization"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_sigmoid_cross_entropy_loss.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "BatchSigmoidCrossEntropyLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/batch_softmax_loss.py",
        "functions": [
            "__init__",
            "initialize_label_smoothing_constants",
            "compute_smoothed_label",
            "add_ops"
        ],
        "classes": [
            "BatchSoftmaxLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/blob_weighted_sum.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "BlobWeightedSum"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/bpr_loss.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "BPRLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/bucket_weighted.py",
        "functions": [
            "__init__",
            "get_memory_usage",
            "add_ops"
        ],
        "classes": [
            "BucketWeighted"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/build_index.py",
        "functions": [
            "__init__",
            "add_train_ops",
            "add_eval_ops",
            "add_ops"
        ],
        "classes": [
            "MapToRange"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/concat.py",
        "functions": [
            "get_concatenated_feature_to_index",
            "__init__",
            "add_ops"
        ],
        "classes": [
            "Concat"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/constant_weight.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "ConstantWeight"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/conv.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "Conv"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/dropout.py",
        "functions": [
            "__init__",
            "_add_ops",
            "add_train_ops",
            "add_eval_ops",
            "add_ops"
        ],
        "classes": [
            "Dropout"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/fc.py",
        "functions": [
            "get_fc_predictor_version",
            "__init__",
            "calculate_fc_output_dims",
            "_insert_fc_ops",
            "_add_ops",
            "add_ops",
            "add_train_ops",
            "get_fp16_compatible_parameters",
            "param_blobs"
        ],
        "classes": [
            "FC"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/fc_without_bias.py",
        "functions": [
            "__init__",
            "_add_ops",
            "param_blobs"
        ],
        "classes": [
            "FCWithoutBias"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/feature_sparse_to_dense.py",
        "functions": [
            "__init__",
            "add_ops",
            "get_metadata",
            "get_accessed_features"
        ],
        "classes": [
            "FeatureSparseToDense"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/functional.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "Functional"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/gather_record.py",
        "functions": [
            "__init__",
            "_gather_scalar",
            "_gather_struct",
            "_gather_list",
            "_dispatch",
            "add_ops"
        ],
        "classes": [
            "GatherRecord"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/homotopy_weight.py",
        "functions": [
            "__init__",
            "solve_inv_lr_params",
            "create_atomic_iter",
            "update_weight",
            "add_ops"
        ],
        "classes": [
            "HomotopyWeight"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/label_smooth.py",
        "functions": [
            "__init__",
            "set_dim",
            "set_smooth_matrix",
            "add_ops_for_binary_prob_label",
            "add_ops_for_categorical_label",
            "add_ops"
        ],
        "classes": [
            "LabelSmooth"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/last_n_window_collector.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "LastNWindowCollector"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/layers.py",
        "functions": [
            "almost_equal_schemas",
            "get_key",
            "get_categorical_limit",
            "get_avg_length",
            "set_request_only",
            "register_layer",
            "layer_exists",
            "get_layer_class",
            "create_layer",
            "is_request_only_scalar",
            "__init__",
            "initializer",
            "initializer",
            "shape",
            "shape",
            "_infer_shape_from_initializer",
            "__str__",
            "__init__",
            "get_type",
            "_check_output_schema",
            "predict_input_record",
            "input_record",
            "predict_output_schema",
            "predict_output_schema",
            "output_schema",
            "output_schema",
            "get_parameters",
            "get_fp16_compatible_parameters",
            "get_memory_usage",
            "get_accessed_features",
            "add_init_params",
            "create_param",
            "get_next_blob_reference",
            "add_operators",
            "add_ops",
            "add_eval_ops",
            "add_train_ops",
            "add_ops_to_accumulate_pred",
            "add_param_copy_operators",
            "export_output_for_metrics",
            "export_params_for_metrics"
        ],
        "classes": [
            "InstantiationContext",
            "LayerParameter",
            "ModelLayer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/layer_normalization.py",
        "functions": [
            "__init__",
            "add_ops_with_layer_norm_op",
            "add_ops_without_layer_norm_op",
            "add_ops"
        ],
        "classes": [
            "LayerNormalization"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/margin_rank_loss.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "MarginRankLoss"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/merge_id_lists.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "MergeIdLists"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/pairwise_similarity.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "PairwiseSimilarity"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/position_weighted.py",
        "functions": [
            "__init__",
            "get_memory_usage",
            "add_ops"
        ],
        "classes": [
            "PositionWeighted"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/random_fourier_features.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "RandomFourierFeatures"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/reservoir_sampling.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "ReservoirSampling"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/sampling_train.py",
        "functions": [
            "__init__",
            "add_ops",
            "add_train_ops"
        ],
        "classes": [
            "SamplingTrain"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/sampling_trainable_mixin.py",
        "functions": [
            "__init__",
            "param_blobs",
            "train_param_blobs",
            "train_param_blobs",
            "_add_ops",
            "add_ops",
            "add_train_ops"
        ],
        "classes": [
            "SamplingTrainableMixin"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/select_record_by_context.py",
        "functions": [
            "__init__",
            "_set_output_blobs",
            "add_ops",
            "add_eval_ops",
            "add_train_ops",
            "add_ops_to_accumulate_pred"
        ],
        "classes": [
            "SelectRecordByContext"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/semi_random_features.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "SemiRandomFeatures"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/sparse_dropout_with_replacement.py",
        "functions": [
            "__init__",
            "_add_ops",
            "add_train_ops",
            "add_eval_ops",
            "add_ops"
        ],
        "classes": [
            "SparseDropoutWithReplacement"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/sparse_feature_hash.py",
        "functions": [
            "__init__",
            "extract_hash_size",
            "add_ops"
        ],
        "classes": [
            "SparseFeatureHash"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/sparse_lookup.py",
        "functions": [
            "get_trainer_version_based_on_optim",
            "get_sparse_lookup_predictor_version",
            "get_sparse_lookup_trainer_version",
            "_is_id_list",
            "_is_id_score_list",
            "__init__",
            "get_memory_usage",
            "get_fp16_compatible_parameters",
            "support_8bit",
            "get_8bits_compatible_parameters",
            "_get_default_init_op",
            "_gather_wrapper",
            "_sparse_lengths_weighted_reducer",
            "_add_ops_id_list",
            "_add_ops_id_score_list",
            "_add_ops",
            "add_train_ops",
            "add_ops"
        ],
        "classes": [
            "SparseLookup"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/split.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "Split"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/tags.py",
        "functions": [
            "__init__",
            "add_tags",
            "remove_tags",
            "__init__",
            "__enter__",
            "__exit__",
            "__call__",
            "wrapper"
        ],
        "classes": [
            "TagContext",
            "Tags"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/uniform_sampling.py",
        "functions": [
            "__init__",
            "add_ops"
        ],
        "classes": [
            "UniformSampling"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/layers/__init__.py",
        "functions": [
            "import_recursive",
            "find_subclasses_recursively"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/mint/app.py",
        "functions": [
            "jsonify_nvd3",
            "visualize_summary",
            "visualize_print_log",
            "visualize_file",
            "index",
            "visualization",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/mint/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_concat_op_test.py",
        "functions": [
            "test_mkl_concat"
        ],
        "classes": [
            "MKLConcatTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_conv_op_test.py",
        "functions": [
            "test_mkl_convolution"
        ],
        "classes": [
            "MKLConvTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_copy_op_test.py",
        "functions": [
            "test_mkl_copy",
            "test_mkl_zero_copy"
        ],
        "classes": [
            "MKCopyTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_elementwise_add_op_test.py",
        "functions": [
            "test_mkl_elementwise_add"
        ],
        "classes": [
            "MKLElementwiseAddTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_elementwise_sum_op_test.py",
        "functions": [
            "test_mkl_elementwise_sum"
        ],
        "classes": [
            "MKLElementwiseSumTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_fc_op_test.py",
        "functions": [
            "test_mkl_fc"
        ],
        "classes": [
            "MKLFcTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_fc_speed_test.py",
        "functions": [
            "testFCSpeed",
            "testConvReluMaxPoolFcSpeed"
        ],
        "classes": [
            "TestMKLBasic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_fill_op_test.py",
        "functions": [
            "test_mkl_fill"
        ],
        "classes": [
            "MKLFillTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_LRN_op_test.py",
        "functions": [
            "test_mkl_LRN"
        ],
        "classes": [
            "MKLLRNTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_LRN_speed_test.py",
        "functions": [
            "testLRNSpeed",
            "testConvReluLRNSpeed"
        ],
        "classes": [
            "TestMKLBasic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_pool_op_test.py",
        "functions": [
            "test_mkl_pooling"
        ],
        "classes": [
            "MKLPoolTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_pool_speed_test.py",
        "functions": [
            "testMaxPoolingSpeed",
            "testAveragePoolingSpeed",
            "testConvReluMaxPoolSpeed"
        ],
        "classes": [
            "TestMKLBasic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_relu_op_test.py",
        "functions": [
            "test_mkl_relu"
        ],
        "classes": [
            "MKLReluTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_sbn_op_test.py",
        "functions": [
            "test_spatialbn_test_mode",
            "test_spatialbn_train_mode"
        ],
        "classes": [
            "MKLSpatialBNTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_sbn_speed_test.py",
        "functions": [
            "testSpatialBNTestingSpeed",
            "testSpatialBNTrainingSpeed"
        ],
        "classes": [
            "TestMKLBasic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_sigmoid_op_test.py",
        "functions": [
            "test_mkl_sigmoid"
        ],
        "classes": [
            "MKLSigmoidTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_speed_test.py",
        "functions": [
            "testReLUSpeed",
            "testConvSpeed"
        ],
        "classes": [
            "TestMKLBasic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/mkl_squeeze_op_test.py",
        "functions": [
            "test_mkl_squeeze"
        ],
        "classes": [
            "MKLSqueezeTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/rewrite_graph.py",
        "functions": [
            "rewrite_init_net_simple",
            "last_producer",
            "fix_BoxWithNMSLimit",
            "rewrite_run_net_simple",
            "rewrite_run_net_simple_xrayocr_lstm",
            "rewrite_model_helper_simple",
            "mkl_tmp",
            "mkl_tmp",
            "cpu_tmp"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/rewrite_graph_test.py",
        "functions": [
            "deterministic_io",
            "simple_fc",
            "double_matmul",
            "simple_relu",
            "simple_mlp",
            "simple_cnn",
            "alexnet",
            "simple_resnet",
            "complex_resnet",
            "test_mkl_simple_rewrite",
            "test_mkl_resnet_rewrite",
            "test_mkl_multi_output_rewrite",
            "test_mkl_alexnet_rewrite",
            "run",
            "run",
            "run",
            "run"
        ],
        "classes": [
            "MKLRewriteTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/mkl/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_histogram_for_blobs.py",
        "functions": [
            "__init__",
            "modify_net",
            "field_name_suffix"
        ],
        "classes": [
            "ComputeHistogramForBlobs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_histogram_for_blobs_test.py",
        "functions": [
            "histogram",
            "test_compute_histogram_for_blobs",
            "test_compute_histogram_for_blobs_modify_output_record"
        ],
        "classes": [
            "ComputeHistogramForBlobsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_norm_for_blobs.py",
        "functions": [
            "__init__",
            "modify_net",
            "field_name_suffix"
        ],
        "classes": [
            "ComputeNormForBlobs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_norm_for_blobs_test.py",
        "functions": [
            "test_compute_norm_for_blobs",
            "test_compute_norm_for_blobs_modify_output_record",
            "test_compute_averaged_norm_for_blobs",
            "test_compute_norm_for_blobs_no_print",
            "test_compute_l1_norm_for_blobs",
            "test_compute_l1_averaged_norm_for_blobs",
            "test_compute_norm_row_index_for_blobs"
        ],
        "classes": [
            "ComputeNormForBlobsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_statistics_for_blobs.py",
        "functions": [
            "__init__",
            "modify_net",
            "field_name_suffix"
        ],
        "classes": [
            "ComputeStatisticsForBlobs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/compute_statistics_for_blobs_test.py",
        "functions": [
            "test_compute_statistics_for_blobs",
            "test_compute_statistics_for_blobs_modify_output_record"
        ],
        "classes": [
            "ComputeStatisticsForBlobsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/get_entry_from_blobs.py",
        "functions": [
            "__init__",
            "modify_net",
            "field_name_suffix"
        ],
        "classes": [
            "GetEntryFromBlobs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/get_entry_from_blobs_test.py",
        "functions": [
            "test_get_entry_from_blobs",
            "test_get_entry_from_blobs_modify_output_record"
        ],
        "classes": [
            "GetEntryFromBlobsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/gradient_clipping.py",
        "functions": [
            "__init__",
            "modify_net"
        ],
        "classes": [
            "GradientClipping"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/gradient_clipping_test.py",
        "functions": [
            "test_gradient_clipping_by_norm",
            "test_gradient_clipping_by_norm_l1_norm",
            "test_gradient_clipping_by_norm_using_param_norm",
            "test_gradient_clipping_by_norm_compute_norm_ratio",
            "test_gradient_clipping_by_value",
            "test_gradient_clipping_by_norm_including_blobs",
            "test_gradient_clipping_by_norm_excluding_blobs"
        ],
        "classes": [
            "GradientClippingTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/initializers.py",
        "functions": [
            "update_initializer",
            "__init__",
            "update",
            "create_param",
            "create_param",
            "update",
            "create_param",
            "update",
            "create_param",
            "get_initializer_args"
        ],
        "classes": [
            "Initializer",
            "ExternalInitializer",
            "PseudoFP16Initializer",
            "ReversePseudoFP16Initializer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/initializers_test.py",
        "functions": [
            "test_fc_initializer",
            "test_fc_fp16_initializer",
            "test_fc_external_initializer"
        ],
        "classes": [
            "InitializerTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/net_modifier.py",
        "functions": [
            "__init__",
            "modify_net",
            "__call__"
        ],
        "classes": [
            "NetModifier"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/parameter_info.py",
        "functions": [
            "__init__",
            "parameter",
            "optimizer",
            "optimizer",
            "__str__"
        ],
        "classes": [
            "ParameterTags",
            "ParameterInfo"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/parameter_sharing.py",
        "functions": [
            "_normalize_namescope",
            "ParameterSharing",
            "__init__",
            "_resolve_scope_overrides",
            "get_parameter_name",
            "add_scope_overrides",
            "pop"
        ],
        "classes": [
            "ParameterSharingContext"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/parameter_sharing_test.py",
        "functions": [
            "test_parameter_sharing_default_scopes",
            "test_parameter_sharing_nested_scopes",
            "test_parameter_sharing_subscopes",
            "test_create_param",
            "test_deep_hierarchy",
            "test_parameter_sharing_brew"
        ],
        "classes": [
            "ParameterSharingTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/modeling/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/models/download.py",
        "functions": [
            "signalHandler",
            "deleteDirectory",
            "progressBar",
            "downloadFromURLToFile",
            "getURLFromName",
            "downloadModel",
            "validModelName",
            "__init__",
            "_model_dir",
            "_download",
            "get_c2_model_dbg",
            "get_c2_model"
        ],
        "classes": [
            "ModelDownloader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/imagenet_trainer_test_utils.py",
        "functions": [
            "has_blob",
            "count_blobs",
            "count_shared_blobs",
            "test_shared_grads",
            "test_forward_only",
            "test_forward_only_fast_simplenet"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/models/resnet.py",
        "functions": [
            "create_resnet_32x32",
            "create_resnext",
            "create_resnet50",
            "__init__",
            "add_conv",
            "add_relu",
            "add_spatial_bn",
            "add_bottleneck",
            "add_simple_block"
        ],
        "classes": [
            "ResNetBuilder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/resnet_test.py",
        "functions": [
            "test_resnet_shared_grads",
            "test_resnet_forward_only",
            "test_resnet_forward_only_fast_simplenet"
        ],
        "classes": [
            "ResnetMemongerTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/shufflenet.py",
        "functions": [
            "create_shufflenet",
            "__init__",
            "create",
            "add_spatial_ds_unit",
            "add_basic_unit",
            "add_detection_unit",
            "add_conv1x1_bn",
            "add_dwconv3x3_bn"
        ],
        "classes": [
            "ShuffleNetV2Builder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/shufflenet_test.py",
        "functions": [
            "test_shufflenet_shared_grads",
            "test_shufflenet_forward_only",
            "test_shufflenet_forward_only_fast_simplenet"
        ],
        "classes": [
            "ShufflenetMemongerTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/models/__sym_init__.py",
        "functions": [
            "_parseFile"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/beam_search.py",
        "functions": [
            "__init__",
            "get_step_model",
            "get_previous_tokens",
            "get_timestep",
            "apply",
            "choose_state_per_hypo"
        ],
        "classes": [
            "BeamSearchForwardOnly"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/seq2seq_beam_search_test.py",
        "functions": [
            "_build_seq2seq_model",
            "_run_compare_train_inference",
            "test_attention",
            "test_2layer_attention",
            "test_multi_decoder"
        ],
        "classes": [
            "Seq2SeqBeamSearchTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/seq2seq_model_helper.py",
        "functions": [
            "__init__",
            "AddParam",
            "GetNonTrainableParams",
            "GetAllParams"
        ],
        "classes": [
            "Seq2SeqModelHelper"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/seq2seq_model_helper_test.py",
        "functions": [
            "testConstuctor",
            "testAddParam",
            "testGetNonTrainableParams",
            "testGetAllParams"
        ],
        "classes": [
            "Seq2SeqModelHelperTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/seq2seq_util.py",
        "functions": [
            "gen_vocab",
            "get_numberized_sentence",
            "rnn_unidirectional_layer",
            "rnn_bidirectional_layer",
            "build_embeddings",
            "get_layer_scope",
            "build_embedding_encoder",
            "build_initial_rnn_decoder_states",
            "build_embedding_decoder",
            "output_projection",
            "scope",
            "_get_attention_type",
            "__init__",
            "get_state_names",
            "get_outputs_with_grads",
            "get_output_dim",
            "get_attention_weights",
            "apply",
            "apply_over_sequence"
        ],
        "classes": [
            "LSTMWithAttentionDecoder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/train.py",
        "functions": [
            "prepare_batch",
            "gen_batches",
            "run_seq2seq_model",
            "main",
            "_build_model",
            "_build_shared",
            "_build_embeddings",
            "model_build_fun",
            "forward_model_build_fun",
            "_calc_norm_ratio",
            "_apply_norm_ratio",
            "norm_clipped_grad_update",
            "norm_clipped_sparse_grad_update",
            "total_loss_scalar",
            "_init_model",
            "__init__",
            "__enter__",
            "__exit__",
            "initialize_from_scratch",
            "get_current_step",
            "inc_current_step",
            "step",
            "save",
            "create_net",
            "clipped_grad_update_bound"
        ],
        "classes": [
            "Seq2SeqModelCaffe2"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/translate.py",
        "functions": [
            "_weighted_sum",
            "run_seq2seq_beam_decoder",
            "main",
            "get_model_file",
            "get_db_type",
            "build_word_rewards",
            "load_models",
            "get_model_file",
            "get_db_type",
            "scope",
            "_build_decoder",
            "__init__",
            "decode"
        ],
        "classes": [
            "Seq2SeqModelCaffe2EnsembleDecoderBase",
            "Seq2SeqModelCaffe2EnsembleDecoder"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/models/seq2seq/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/backend.py",
        "functions": [
            "force_unicode",
            "get_device_option",
            "convertAttributeProto",
            "from_onnx",
            "caffe2",
            "__init__",
            "dummy_name",
            "run_node",
            "_create_tensor_filling_op",
            "_rnn_reform_weights",
            "_make_rnn_direction",
            "_create_rnn_variant",
            "_create_control_op",
            "_remove_ssa",
            "_create_if",
            "_create_loop",
            "_substitute_raw_value",
            "_visit_and_substitute_raw_values",
            "_external_value_resolution_pass",
            "_direct_initialize_parameters",
            "_direct_initialize_inputs",
            "optimize_onnx",
            "prepare_zip_archive",
            "prepare",
            "_onnx_node_to_caffe2_op",
            "_common_onnx_node_to_caffe2_op",
            "_all_names_in_graph",
            "_graph_to_net",
            "_onnx_model_to_caffe2_net",
            "onnx_graph_to_caffe2_net",
            "supports_device",
            "is_compatible",
            "tensor2list",
            "kmap",
            "reform",
            "make_cell",
            "make_rnn",
            "reform",
            "make_cell",
            "make_rnn",
            "reform",
            "make_cell",
            "make_rnn"
        ],
        "classes": [
            "OnnxAttributes",
            "OnnxNode",
            "Caffe2Backend"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/backend_cpp_rep.py",
        "functions": [
            "__init__",
            "init_net",
            "pred_net",
            "external_outputs",
            "external_inputs",
            "run"
        ],
        "classes": [
            "Caffe2CppRep"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/backend_rep.py",
        "functions": [
            "__init__",
            "_name_scope",
            "run"
        ],
        "classes": [
            "Caffe2Rep"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/error.py",
        "functions": [],
        "classes": [
            "BaseException",
            "Unsupported"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/frontend.py",
        "functions": [
            "dummy_name",
            "_common_caffe2_arg_to_onnx_attr",
            "caffe2_arg_to_onnx_attr",
            "_common_caffe2_op_to_onnx_node",
            "caffe2_op_to_onnx_node",
            "_all_names_in_net",
            "_extract_value_info",
            "caffe2_net_to_onnx_graph",
            "caffe2_init_net_to_initializer",
            "_filter_fake_init",
            "ssa_rewrite",
            "_ssa_rewrite",
            "caffe2_net_to_onnx_model",
            "ssa_name"
        ],
        "classes": [
            "Caffe2Frontend"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/helper.py",
        "functions": [
            "c2_native_run_op",
            "c2_native_run_net",
            "load_caffe2_net",
            "save_caffe2_net",
            "benchmark_caffe2_model",
            "benchmark_pytorch_model"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/onnxifi.py",
        "functions": [
            "onnxifi_caffe2_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/test_onnxifi.py",
        "functions": [
            "_print_net",
            "test_relu_graph",
            "test_conv_graph",
            "setUp",
            "_add_head_tail",
            "test_resnet50_core"
        ],
        "classes": [
            "OnnxifiTest",
            "OnnxifiTransformTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/workspace.py",
        "functions": [
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__getattr__",
            "__del__",
            "f"
        ],
        "classes": [
            "_WorkspaceCtx",
            "Workspace"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/bin/conversion.py",
        "functions": [
            "caffe2_to_onnx",
            "onnx_to_caffe2"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/bin/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/c2_ref_test.py",
        "functions": [
            "test_dummy_name",
            "test_check_arguments",
            "test_dynamicslice_3inputs_graph",
            "test_dynamicslice_4inputs_graph",
            "test_relu_graph",
            "test_elementwiselinear",
            "test_initializer",
            "test_reducemean",
            "test_upsample",
            "test_fc",
            "test_gemm",
            "test_gemm_conversion",
            "test_mergedim",
            "test_tensor_filling_ops",
            "test_tensor_filling_ops_c_backend",
            "test_concat",
            "test_slice",
            "test_cast",
            "setUp",
            "_test_net",
            "test_alexnet",
            "test_resnet50",
            "test_vgg16",
            "test_zfnet",
            "test_inception_v1",
            "test_inception_v2",
            "test_squeezenet",
            "test_densenet121",
            "test_bvlc_googlenet",
            "test_bvlc_reference_caffenet",
            "test_bvlc_reference_rcnn_ilsvrc13",
            "sigmoid"
        ],
        "classes": [
            "TestCaffe2Basic",
            "TestCaffe2End2End"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/conversion_test.py",
        "functions": [
            "_run_command",
            "test_caffe2_to_onnx",
            "test_caffe2_to_onnx_value_info",
            "test_onnx_to_caffe2",
            "test_onnx_to_caffe2_zipfile",
            "_make_fake_if_op",
            "test_onnx_to_caffe2_if",
            "_make_fake_loop_op",
            "test_onnx_to_caffe2_loop",
            "test_convert_end2end"
        ],
        "classes": [
            "TestConversion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/helper_test.py",
        "functions": [
            "test_dummy_name"
        ],
        "classes": [
            "TestCaffe2Basic"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/onnx_backend_test.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/ssa_test.py",
        "functions": [
            "test_ssa",
            "test_idempotence"
        ],
        "classes": [
            "TestFrontendSSAConversion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/test_utils.py",
        "functions": [
            "setUp",
            "assertSameOutputs",
            "add_test_case"
        ],
        "classes": [
            "TestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/onnx/tests/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/activation_ops_test.py",
        "functions": [
            "test_relu",
            "test_relu_empty_input",
            "test_relu_fp16",
            "test_relu_n",
            "test_elu",
            "test_prelu",
            "test_leaky_relu",
            "test_leaky_relu_default",
            "test_gelu",
            "test_mish",
            "relu_ref",
            "relu_ref",
            "relu_ref",
            "relu_grad_ref",
            "relu_n_ref",
            "elu_ref",
            "prelu_ref",
            "leaky_relu_ref",
            "leaky_relu_ref",
            "gelu_ref",
            "mish_ref"
        ],
        "classes": [
            "TestActivations"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/adadelta_test.py",
        "functions": [
            "ref_adadelta",
            "test_adadelta",
            "test_sparse_adadelta",
            "test_sparse_adadelta_empty",
            "ref_sparse",
            "ref_sparse_empty"
        ],
        "classes": [
            "TestAdadelta"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/adagrad_test.py",
        "functions": [
            "test_adagrad",
            "test_adagrad_output_effective_lr",
            "test_adagrad_output_effective_lr_and_update",
            "test_sparse_adagrad",
            "test_sparse_adagrad_empty",
            "test_row_wise_sparse_adagrad",
            "test_row_wise_sparse_adagrad_empty"
        ],
        "classes": [
            "TestAdagrad"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/adagrad_test_helper.py",
        "functions": [
            "ref_adagrad",
            "adagrad_sparse_test_helper",
            "ref_sparse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/adam_test.py",
        "functions": [
            "ref_adam",
            "ref_row_wise_adam",
            "test_adam",
            "test_adam_output_grad",
            "test_sparse_adam",
            "test_sparse_adam_output_grad",
            "test_row_wise_sparse_adam",
            "test_row_wise_sparse_adam_output_grad",
            "ref_sparse",
            "ref_sparse_output_grad",
            "ref_row_wise_sparse",
            "ref_row_wise_sparse_output_grad"
        ],
        "classes": [
            "TestAdam"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/affine_channel_op_test.py",
        "functions": [
            "affine_channel_nchw_ref",
            "affine_channel_nhwc_ref",
            "test_affine_channel_2d",
            "test_affine_channel_3d",
            "ref_op",
            "ref_op"
        ],
        "classes": [
            "TestAffineChannelOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/alias_with_name_test.py",
        "functions": [
            "test_alias_with_name_op",
            "reference_func"
        ],
        "classes": [
            "TestAliasWithNameOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/apmeter_test.py",
        "functions": [
            "calculate_ap",
            "test_average_precision",
            "test_average_precision_small_buffer",
            "op_ref",
            "op_ref"
        ],
        "classes": [
            "TestAPMeterOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/arg_ops_test.py",
        "functions": [
            "test_argmax",
            "test_argmin",
            "argmax_ref",
            "argmin_ref"
        ],
        "classes": [
            "TestArgOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/assert_test.py",
        "functions": [
            "test_assert",
            "assert_ref"
        ],
        "classes": [
            "TestAssert"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/async_net_barrier_test.py",
        "functions": [
            "test_async_net_barrier_op",
            "reference_func"
        ],
        "classes": [
            "TestAsyncNetBarrierOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/atomic_ops_test.py",
        "functions": [
            "test_atomic_ops",
            "test_atomic64_ops"
        ],
        "classes": [
            "TestAtomicOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/basic_rnn_test.py",
        "functions": [
            "basic_rnn_reference",
            "test_basic_rnn"
        ],
        "classes": [
            "BasicRNNCellTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/batch_box_cox_test.py",
        "functions": [
            "_inputs",
            "test_batch_box_cox",
            "test_lambda1_is_all_zero",
            "test_lambda1_is_partially_zero",
            "test_bound_base_away_from_zero",
            "batch_box_cox",
            "ref"
        ],
        "classes": [
            "TestBatchBoxCox"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/batch_bucketize_op_test.py",
        "functions": [
            "test_batch_bucketize_example",
            "test_batch_bucketize",
            "ref",
            "ref"
        ],
        "classes": [
            "TestBatchBucketize"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/batch_sparse_to_dense_op_test.py",
        "functions": [
            "test_batch_sparse_to_dense",
            "test_batch_dense_to_sparse",
            "batch_sparse_to_dense_ref",
            "batch_dense_to_sparse_ref"
        ],
        "classes": [
            "TestBatchSparseToDense"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/bbox_transform_test.py",
        "functions": [
            "bbox_transform",
            "clip_tiled_boxes",
            "generate_rois",
            "bbox_transform_rotated",
            "clip_tiled_boxes_rotated",
            "generate_rois_rotated",
            "test_bbox_transform",
            "test_bbox_transform_batch",
            "bbox_transform_ref",
            "bbox_transform_ref"
        ],
        "classes": [
            "TestBBoxTransformOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/bisect_percentile_op_test.py",
        "functions": [
            "compare_reference",
            "test_bisect_percentil_op_simple",
            "test_bisect_percentil_op_large",
            "bisect_percentile_op_ref"
        ],
        "classes": [
            "TestBisectPercentileOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/blobs_queue_db_test.py",
        "functions": [
            "test_create_blobs_queue_db_string",
            "test_create_blobs_queue_db_tensor",
            "_test_create_blobs_queue_db",
            "_add_blob_to_queue",
            "_create_test_tensor_protos",
            "add_blobs",
            "add_blobs"
        ],
        "classes": [
            "BlobsQueueDBTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/boolean_mask_test.py",
        "functions": [
            "test_boolean_mask_gradient",
            "test_boolean_mask",
            "test_boolean_mask_indices",
            "_dtype_conversion",
            "test_sequence_mask_with_lengths",
            "test_sequence_mask_with_window",
            "test_sequence_mask_triangle",
            "test_sequence_mask_batching_lengths",
            "test_sequence_mask_batching_window",
            "test_sequence_mask_batching_triangle",
            "test_sequence_mask_repeated",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref",
            "compare",
            "compare",
            "compare",
            "compare",
            "compare",
            "compare",
            "compare",
            "compare"
        ],
        "classes": [
            "TestBooleanMaskOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/boolean_unmask_test.py",
        "functions": [
            "test",
            "ref"
        ],
        "classes": [
            "TestUnmaskOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/box_with_nms_limit_op_test.py",
        "functions": [
            "get_op",
            "gen_boxes",
            "gen_multiple_boxes",
            "test_simple",
            "test_score_thresh",
            "test_detections_per_im",
            "test_multiclass",
            "test_detections_per_im_same_thresh",
            "test_detections_per_im_same_thresh_multiclass",
            "ref",
            "ref",
            "ref",
            "ref",
            "verify",
            "verify"
        ],
        "classes": [
            "TestBoxWithNMSLimitOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/bucketize_op_test.py",
        "functions": [
            "test_bucketize_op",
            "ref"
        ],
        "classes": [
            "TestBucketizeOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/cast_op_test.py",
        "functions": [
            "test_cast_int_float",
            "test_cast_int_float_empty",
            "test_cast_int_to_string",
            "ref"
        ],
        "classes": [
            "TestCastOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ceil_op_test.py",
        "functions": [
            "test_ceil",
            "ceil_ref"
        ],
        "classes": [
            "TestCeil"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/channel_backprop_stats_op_test.py",
        "functions": [
            "testChannelBackpropStats",
            "referenceChannelBackpropStatsTest"
        ],
        "classes": [
            "TestChannelBackpropStats"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/channel_shuffle_test.py",
        "functions": [
            "_channel_shuffle_nchw_ref",
            "_channel_shuffle_nhwc_ref",
            "test_channel_shuffle",
            "channel_shuffle_ref"
        ],
        "classes": [
            "ChannelShuffleOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/channel_stats_op_test.py",
        "functions": [
            "channel_stats_nchw_ref",
            "channel_stats_nhwc_ref",
            "test_channel_stats_2d",
            "test_channel_stats_3d",
            "ref_op",
            "ref_op"
        ],
        "classes": [
            "TestChannelStatsOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/checkpoint_test.py",
        "functions": [
            "testCheckpoint"
        ],
        "classes": [
            "CheckpointTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/clip_op_test.py",
        "functions": [
            "test_clip",
            "test_clip_default",
            "clip_ref",
            "clip_ref"
        ],
        "classes": [
            "TestClip"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/clip_tensor_op_test.py",
        "functions": [
            "test_clip_tensor_by_scaling",
            "clip_tensor_by_scaling_ref"
        ],
        "classes": [
            "TestClipTensorByScalingOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/concat_split_op_test.py",
        "functions": [
            "_tensor_splits",
            "test_concat",
            "test_concat_add_axis",
            "test_split",
            "test_split_by_lengths",
            "split_ref",
            "_find_factor_simple",
            "split_by_lengths_ref"
        ],
        "classes": [
            "TestConcatSplitOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/conditional_test.py",
        "functions": [
            "test_conditional",
            "ref"
        ],
        "classes": [
            "TestConditionalOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/conftest.py",
        "functions": [
            "pytest_addoption",
            "pytest_configure"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/conv_test.py",
        "functions": [
            "_cudnn_supports",
            "_cudnn_convolution_algo_count",
            "test_convolution_separate_stride_pad_gradients",
            "test_convolution_separate_stride_pad_layout",
            "test_convolution_gradients",
            "_nd_convolution",
            "test_1d_convolution",
            "test_3d_convolution",
            "test_3d_convolution_cudnn_nchw",
            "test_convolution_layout",
            "test_convolution_sync",
            "test_use_cudnn_engine_interactions",
            "test_1x1_conv",
            "canonical",
            "run",
            "conv_1x1_nchw_ref",
            "conv_1x1_nhwc_ref"
        ],
        "classes": [
            "TestConvolution"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/conv_transpose_test.py",
        "functions": [
            "test_convolution_transpose_layout_legacy_args",
            "test_convolution_transpose_layout",
            "test_convolution_transpose_separate_stride_pad_adj_layout",
            "test_convolution_transpose_gradients",
            "test_convolution_transpose_separate_stride_pad_adj_gradient",
            "test_convolution_transpose_with_group"
        ],
        "classes": [
            "TestConvolutionTranspose"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/copy_ops_test.py",
        "functions": [
            "tearDown",
            "run_test_copy_gradient",
            "test_copy_gradient_cpu",
            "test_copy_gradient_gpu",
            "test_copy_gradient_multiple_gpus",
            "test_cpu2gpu_gpu2cpu_sparse_gradients",
            "test_cpu2gpu_gpu2cpu_gradients",
            "get_op_with_output"
        ],
        "classes": [
            "CopyOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/copy_rows_to_tensor_op_test.py",
        "functions": [
            "get_input_tensors",
            "test_copy_rows_to_tensor",
            "test_copy_rows_to_tensor_invalid_input",
            "ref"
        ],
        "classes": [
            "TestCopyRowsToTensor"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/cosine_embedding_criterion_op_test.py",
        "functions": [
            "test_cosine_embedding_criterion",
            "ref_cec"
        ],
        "classes": [
            "TestCosineEmbeddingCriterion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/counter_ops_test.py",
        "functions": [
            "test_counter_ops"
        ],
        "classes": [
            "TestCounterOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/crf_test.py",
        "functions": [
            "test_crf_with_loss_op",
            "test_crf_gradient",
            "_compute_loss_manual"
        ],
        "classes": [
            "TestCRFOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/cross_entropy_ops_test.py",
        "functions": [
            "sigmoid",
            "sigmoid_cross_entropy_with_logits",
            "sigmoid_cross_entropy_with_logits_grad",
            "sigmoid_cross_entropy_with_logits_with_log_D_trick",
            "sigmoid_cross_entropy_with_logits_with_log_D_trick_grad",
            "unjoined_sigmoid_cross_entropy",
            "unjoined_sigmoid_cross_entropy_grad",
            "test_sigmoid_cross_entropy_with_logits",
            "test_cross_entropy_and_unjoied_cross_entropy_relation",
            "test_weighted_sigmoid_cross_entropy_with_logits",
            "test_soft_label_cross_entropy",
            "sigmoid_xentr_logit_ref",
            "sigmoid_xentr_logit_grad_ref",
            "sigmoid_xentr_logit_ref",
            "sigmoid_xentr_logit_grad_ref",
            "weighted_sigmoid_xentr_logit_ref",
            "weighted_sigmoid_xentr_logit_grad_ref",
            "soft_label_xentr_ref"
        ],
        "classes": [
            "TestCrossEntropyOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ctc_beam_search_decoder_op_test.py",
        "functions": [
            "test_ctc_beam_search_decoder",
            "input_generater",
            "ref_ctc_decoder",
            "ref_ctc_decoder_max_time"
        ],
        "classes": [
            "TestCTCBeamSearchDecoderOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ctc_greedy_decoder_op_test.py",
        "functions": [
            "test_ctc_greedy_decoder",
            "test_ctc_greedy_decoder_no_merge_arg",
            "input_generater",
            "ref_ctc_decoder",
            "ref_ctc_decoder_max_time",
            "input_generater",
            "ref_ctc_decoder_no_merge_arg",
            "ref_ctc_decoder_max_time"
        ],
        "classes": [
            "TestCTCGreedyDecoderOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/cudnn_recurrent_test.py",
        "functions": [
            "testEqualToCudnn"
        ],
        "classes": [
            "TestLSTMs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/dataset_ops_test.py",
        "functions": [
            "_assert_arrays_equal",
            "_assert_records_equal",
            "_sparse_features_map",
            "_dense_features_map",
            "_dataset",
            "test_pack_unpack",
            "test_dataset_ops",
            "test_last_n_window_ops",
            "test_last_n_window_ops_shape_inference",
            "test_last_n_window_ops_shape_inference_4d_input",
            "test_collect_tensor_ops"
        ],
        "classes": [
            "TestDatasetOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/deform_conv_test.py",
        "functions": [
            "_cudnn_supports",
            "_conv_1d_output_size",
            "_conv_2d_output_size",
            "_conv_2d_offsets_dims",
            "_conv_2d_random_offsets",
            "_conv_2d_shuffle_offsets",
            "test_null_offset_convolution",
            "test_flat_input_convolution",
            "test_shuffle_input_convolution",
            "test_conv_separate_stride_pad_gradients",
            "test_conv_gradients",
            "reference_conv_op",
            "reference_conv_op",
            "reference_conv_op"
        ],
        "classes": [
            "TestConvolution"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/dense_vector_to_id_list_op_test.py",
        "functions": [
            "id_list_batch",
            "dense_vector_to_id_list_ref",
            "test_dense_vector_to_id_list_ref",
            "test_dense_vector_to_id_list_op"
        ],
        "classes": [
            "TestDenseVectorToIdList"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/depthwise_3x3_conv_test.py",
        "functions": [
            "test_convolution_gradients"
        ],
        "classes": [
            "Depthwise3x3ConvOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/detectron_keypoints.py",
        "functions": [
            "heatmaps_to_keypoints",
            "scores_to_probs",
            "approx_heatmap_keypoint"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/distance_op_test.py",
        "functions": [
            "test_cosine_similarity",
            "test_dot_product",
            "test_L1_distance",
            "test_L2_distance",
            "dot_ref"
        ],
        "classes": [
            "DistanceTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/dropout_op_test.py",
        "functions": [
            "test_dropout_is_test",
            "test_dropout_ratio0",
            "reference_dropout_test",
            "reference_dropout_ratio0"
        ],
        "classes": [
            "TestDropout"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/duplicate_operands_test.py",
        "functions": [
            "test_duplicate_operands"
        ],
        "classes": [
            "TestDuplicateOperands"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/elementwise_linear_op_test.py",
        "functions": [
            "test",
            "ref_op"
        ],
        "classes": [
            "TestElementwiseLinearOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/elementwise_logical_ops_test.py",
        "functions": [
            "mux",
            "rowmux",
            "test_reference",
            "test_where",
            "test_where_dim2",
            "test_reference",
            "test_rowwhere",
            "test_rowwhere_dim2",
            "test_is_member_of",
            "test"
        ],
        "classes": [
            "TestWhere",
            "TestRowWhere",
            "TestIsMemberOf"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/elementwise_ops_test.py",
        "functions": [
            "test_abs",
            "test_exp",
            "test_log",
            "test_powt",
            "test_sqr",
            "test_sqrt",
            "test_softsign",
            "test_rsqrt",
            "test_cube",
            "test_cbrt",
            "test_cbrt_grad",
            "test_swish",
            "test_swish_gradient_inplace",
            "test_sigmoid",
            "test_hard_sigmoid",
            "test_eq",
            "test_eq_bcast",
            "_run_single_test",
            "_test_binary_op",
            "_test_binary_op_in_place",
            "test_add",
            "test_sub",
            "test_mul",
            "test_div",
            "test_div_legacy_grad",
            "_test_bitwise_binary_op",
            "test_bitwise_and",
            "test_bitwise_or",
            "test_bitwise_xor",
            "test_reciprocal",
            "test_not",
            "abs_ref",
            "exp_ref",
            "log_op",
            "powt_op",
            "powt_grad",
            "sqr_op",
            "sqrt_op",
            "softsign_ref",
            "rsqrt_ref",
            "cube_ref",
            "cube_grad_ref",
            "cbrt_ref",
            "swish",
            "swish",
            "swish_gradient",
            "sigmoid_ref",
            "hard_sigmoid_ref",
            "eq",
            "eq",
            "ref",
            "ref",
            "div_grad_ref",
            "ref",
            "reciprocal_op",
            "not_op"
        ],
        "classes": [
            "TestElementwiseOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/elementwise_op_broadcast_test.py",
        "functions": [
            "__generate_test_cases",
            "__test_binary_op",
            "test_broadcast_Add",
            "test_broadcast_Mul",
            "test_broadcast_Sub",
            "test_broadcast_powt",
            "test_broadcast_scalar",
            "test_semantic_broadcast",
            "test_sum_reduce_empty_blob",
            "test_sum_reduce",
            "test_sum_reduce_fp16",
            "powt_op",
            "powt_grad",
            "powt_grad_broadcast",
            "powt_op_axis1",
            "powt_grad_axis1",
            "powt_op_axis0",
            "powt_grad_axis0",
            "powt_op_mixed",
            "powt_grad_mixed",
            "ref_op",
            "ref_op",
            "ref_op",
            "ref_op"
        ],
        "classes": [
            "TestElementwiseBroadcast"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/emptysample_ops_test.py",
        "functions": [
            "test_emptysample"
        ],
        "classes": [
            "TestEmptySampleOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/batch_moments_op_test.py",
        "functions": [
            "batch_moments_nchw_ref",
            "batch_moments_nhwc_ref",
            "test_batch_moments_2d",
            "test_batch_moments_3d",
            "ref",
            "ref"
        ],
        "classes": [
            "TestBatchMomentsOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/collect_and_distribute_fpn_rpn_proposals_op_test.py",
        "functions": [
            "boxes_area",
            "map_rois_to_fpn_levels",
            "collect",
            "distribute",
            "collect_and_distribute_fpn_rpn_ref",
            "collect_rpn_ref",
            "distribute_fpn_ref",
            "_create_input",
            "test_collect_and_dist",
            "test_collect_and_dist_separately"
        ],
        "classes": [
            "TestCollectAndDistributeFpnRpnProposals"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/data_couple_op_test.py",
        "functions": [
            "test_data_couple_op"
        ],
        "classes": [
            "TestDataCoupleOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/enforce_finite_op_test.py",
        "functions": [
            "test_enforce_finite",
            "test_enforce_finite_device_check",
            "all_finite_value"
        ],
        "classes": [
            "TestEnforceFinite"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/given_tensor_byte_string_to_uint8_fill_op_test.py",
        "functions": [
            "test_given_tensor_byte_string_to_uint8_fill",
            "test_empty_given_tensor_byte_string_to_uint8_fill",
            "constant_fill",
            "constant_fill"
        ],
        "classes": [
            "TestGivenTensorByteStringToUInt8FillOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/integral_image_ops_test.py",
        "functions": [
            "test_integral_image_ops",
            "test_integral_image_gradient_ops",
            "integral_image",
            "integral_image_gradient"
        ],
        "classes": [
            "TestIntegralImageOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/loss_ops_test.py",
        "functions": [
            "test_averaged_loss",
            "avg_op"
        ],
        "classes": [
            "TestLossOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ngram_ops_test.py",
        "functions": [
            "test_ngram_from_categorical_op"
        ],
        "classes": [
            "TestNGramOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rand_quantization_op_speed_test.py",
        "functions": [
            "test_speed_of_rand_quantization"
        ],
        "classes": [
            "TestSpeedFloatToFusedRandRowwiseQuantized"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/segment_ops_test.py",
        "functions": [
            "sparse_lengths_sum_ref",
            "sparse_lengths_mean_ref",
            "sum_grad",
            "logsumexp",
            "logsumexp_grad",
            "logmeanexp",
            "mean",
            "mean_grad",
            "max_fwd",
            "max_grad",
            "sparse_lengths_weighted_sum_ref",
            "sparse_lengths_weighted_sum_grad_ref",
            "segment_reduce_op",
            "segment_reduce_grad_op",
            "_test",
            "split",
            "unsplit",
            "split",
            "unsplit",
            "test_sorted_segment_ops",
            "test_unsorted_segment_ops",
            "test_unsorted_segment_ops_gpu",
            "test_sparse_sorted_segment_ops",
            "test_sparse_unsorted_segment_ops",
            "test_lengths_ops",
            "test_sparse_lengths_ops",
            "test_unsorted_sums_large",
            "test_sorted_segment_range_mean",
            "test_sorted_segment_range_log_mean_exp",
            "test_unsorted_means_large",
            "test_lengths_sum",
            "test_sparse_lengths_sum",
            "test_lengths_mean",
            "test_sparse_lengths_mean",
            "test_sparse_lengths_weighted_sum",
            "test_sparse_lengths_indices_in_gradient_sum_gpu",
            "test_sparse_lengths_indices_in_gradient_mean_gpu",
            "test_legacy_sparse_and_lengths_sum_gradient",
            "test_sparse_lengths_sum_invalid_index",
            "test_sparse_lengths_positional_weighted_sum",
            "test_sparse_lengths_fp16",
            "test_segment_ops",
            "ref",
            "ref",
            "ref",
            "ref",
            "ref_sparse",
            "seg_reduce",
            "seg_reduce_grad"
        ],
        "classes": [
            "TesterBase",
            "SegmentsTester",
            "LengthsTester",
            "TestSegmentOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/specialized_segment_ops_test.py",
        "functions": [
            "test_sparse_lengths_sum_cpu",
            "test_sparse_lengths_weightedsum_cpu",
            "test_sparse_lengths_weightedsum_8BitsRowwiseOp_cpu",
            "test_sparse_lengths_sum_8BitsRowwiseOp_cpu",
            "test_sparse_lengths_sum_8BitsRowwiseOp_cpu_invalid_index",
            "sparse_lengths_sum_ref",
            "sparse_lengths_weightedsum_ref",
            "sparse_lengths_weightedsum_8BitsRowwiseOp_cpu_ref",
            "sparse_lengths_sum_8BitsRowwiseOp_cpu_reg"
        ],
        "classes": [
            "TestSpecializedSegmentOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ensure_clipped_test.py",
        "functions": [
            "test_ensure_clipped",
            "ref"
        ],
        "classes": [
            "TestEnsureClipped"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/ensure_cpu_output_op_test.py",
        "functions": [
            "_dev_options",
            "test_ensure_cpu_output"
        ],
        "classes": [
            "TestEnsureCPUOutputOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/erf_op_test.py",
        "functions": [
            "test_erf"
        ],
        "classes": [
            "TestErfOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/expand_op_test.py",
        "functions": [
            "_rand_shape",
            "_run_expand_op_test",
            "test_expand_rand_shape",
            "test_expand_nonrand_shape1",
            "test_expand_nonrand_shape2",
            "ref"
        ],
        "classes": [
            "TestExpandOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/fc_operator_test.py",
        "functions": [
            "_run_test",
            "test_fc",
            "test_fc_transposed",
            "fc_op",
            "fc_transposed_op"
        ],
        "classes": [
            "TestFcOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/feature_maps_ops_test.py",
        "functions": [
            "test_merge_dense_feature_tensors",
            "test_merge_single_scalar_feature_tensors",
            "test_merge_single_scalar_feature_tensors_gradient",
            "test_merge_single_scalar_feature_tensors_gradient_with_strings",
            "test_merge_single_list_feature_tensors",
            "test_merge_single_list_feature_tensors_gradient",
            "test_merge_single_map_feature_tensors_gradient",
            "_test_merge_single_list_or_map_feature_tensors_gradient",
            "test_merge_single_map_feature_tensors",
            "test_merge_multi_scalar_feature_tensors",
            "test_merge_multi_scalar_feature_tensors_gradient",
            "test_merge_multi_list_feature_tensors",
            "test_merge_multi_map_feature_tensors",
            "test_merge_multi_list_feature_tensors_gradient",
            "test_merge_multi_map_feature_tensors_gradient",
            "_test_merge_multi_list_or_map_feature_tensors_gradient"
        ],
        "classes": [
            "TestFeatureMapsOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/filler_ops_test.py",
        "functions": [
            "_fill_diagonal",
            "test_shape_error",
            "test_int64_shape",
            "test_uniform_int_fill_op_blob_input",
            "test_uniform_fill_using_arg",
            "test_diagonal_fill_op_float",
            "test_diagonal_fill_op_int",
            "test_lengths_range_fill",
            "test_gaussian_fill_op",
            "test_msra_fill_op",
            "test_fp16_uniformfill_op",
            "_len_range_fill"
        ],
        "classes": [
            "TestFillerOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/find_op_test.py",
        "functions": [
            "test_find",
            "findop"
        ],
        "classes": [
            "TestFindOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/flatten_op_test.py",
        "functions": [
            "test_flatten",
            "flatten_ref"
        ],
        "classes": [
            "TestFlatten"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/flexible_top_k_test.py",
        "functions": [
            "flexible_top_k_ref",
            "test_flexible_top_k",
            "test_flexible_top_k_grad",
            "bind_ref"
        ],
        "classes": [
            "TestFlexibleTopK"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/floor_op_test.py",
        "functions": [
            "test_floor",
            "floor_ref"
        ],
        "classes": [
            "TestFloor"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/fused_nbit_rowwise_conversion_ops_test.py",
        "functions": [
            "bytes_to_half_floats",
            "half_floats_to_bytes",
            "int8_to_bytes",
            "fused_rowwise_nbit_quantize_reference",
            "fused_rowwise_nbit_quantize_dequantize_reference",
            "ErrorThresholdRow",
            "test_quantize_op",
            "test_quantize_and_dequantize_op",
            "testNBit",
            "testNBit"
        ],
        "classes": [
            "TestFusedNBitRowwiseQuantizationConversion",
            "TestNBitFakeFused",
            "TestNBitGreedyFused"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/fused_nbit_rowwise_test_helper.py",
        "functions": [
            "param_search_greedy",
            "_compress_uniform_simplified"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/gather_ops_test.py",
        "functions": [
            "ref_gather_axis0",
            "ref_gather",
            "ref_gather_match_outer",
            "_inputs",
            "inner",
            "inner",
            "inner",
            "test_gather_ops",
            "test_gather_ops_axis2",
            "test_gather_ops_match_outer",
            "test_batch_gather_op_match_outer",
            "test_gather_op_match_outer_axis2_data4D_ind4D",
            "test_batch_gather_ops",
            "test_batch_gather_ops"
        ],
        "classes": [
            "TestGatherOps",
            "TestBatchGatherOps",
            "TestGatherFused8BitRowwise"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/gather_ranges_op_test.py",
        "functions": [
            "batched_boarders_and_data",
            "_tensor_splits",
            "_bad_tensor_splits",
            "gather_ranges",
            "gather_ranges_to_dense",
            "gather_ranges_to_dense_with_key",
            "test_gather_ranges",
            "test_gather_ranges_split",
            "test_gather_ranges_with_key_split",
            "test_shape_and_type_inference",
            "test_empty_range_check",
            "boarders_to_range",
            "getOpWithThreshold"
        ],
        "classes": [
            "TestGatherRanges"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/given_tensor_fill_op_test.py",
        "functions": [
            "test_given_tensor_fill",
            "constant_fill"
        ],
        "classes": [
            "TestGivenTensorFillOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/glu_op_test.py",
        "functions": [
            "_glu_old_input",
            "test_glu_old",
            "glu_ref"
        ],
        "classes": [
            "TestGlu"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/group_conv_test.py",
        "functions": [
            "test_group_convolution"
        ],
        "classes": [
            "TestGroupConvolution"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/group_norm_op_test.py",
        "functions": [
            "group_norm_nchw_ref",
            "group_norm_nhwc_ref",
            "test_group_norm_2d",
            "test_group_norm_3d",
            "test_group_norm_grad",
            "ref_op",
            "ref_op"
        ],
        "classes": [
            "TestGroupNormOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/gru_test.py",
        "functions": [
            "gru_unit",
            "gru_reference",
            "gru_unit_op_input",
            "gru_input",
            "_prepare_gru_unit_op",
            "create_input",
            "create_input",
            "generate_input_state",
            "test_gru_unit_op",
            "test_gru_main",
            "gru_base"
        ],
        "classes": [
            "GRUCellTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/heatmap_max_keypoint_op_test.py",
        "functions": [
            "heatmap_FAIR_keypoint_ref",
            "heatmap_approx_keypoint_ref",
            "c10_op_ref",
            "setUp",
            "test_close_to_FAIR",
            "test_approx_heatmap_keypoint",
            "test_special_cases",
            "test_caffe2_pytorch_eq"
        ],
        "classes": [
            "TestHeatmapMaxKeypointOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/histogram_test.py",
        "functions": [
            "test_histogram__device_consistency",
            "test_histogram__valid_inputs_0",
            "test_histogram__valid_inputs_1",
            "test_histogram__empty_input_tensor",
            "test_histogram__non_increasing_bin_edges",
            "test_histogram__insufficient_bin_edges",
            "_test_histogram"
        ],
        "classes": [
            "TestHistogram"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/hsm_test.py",
        "functions": [
            "test_hsm_search",
            "test_hsm_run_once",
            "test_hsm_forward",
            "test_hsm_gradient",
            "test_huffman_tree_hierarchy",
            "simulation_hsm_search",
            "checkPath"
        ],
        "classes": [
            "TestHsm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/hyperbolic_ops_test.py",
        "functions": [
            "_test_hyperbolic_op",
            "test_sinh",
            "test_cosh",
            "test_tanh",
            "ref"
        ],
        "classes": [
            "TestHyperbolicOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/im2col_col2im_test.py",
        "functions": [
            "test_im2col_layout",
            "test_col2im_gradients"
        ],
        "classes": [
            "TestReduceFrontSum"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/image_input_op_test.py",
        "functions": [
            "verify_apply_bounding_box",
            "verify_rescale",
            "verify_crop",
            "verify_color_normalize",
            "caffe2_img",
            "create_test",
            "run_test",
            "validate_image_and_label",
            "test_imageinput",
            "test_imageinput_with_additional_outputs",
            "validator",
            "validator"
        ],
        "classes": [
            "TestImport"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/index_hash_ops_test.py",
        "functions": [
            "test_index_hash_ops",
            "test_shape_and_type_inference",
            "index_hash"
        ],
        "classes": [
            "TestIndexHashOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/index_ops_test.py",
        "functions": [
            "_test_index_ops",
            "test_string_index_ops",
            "test_int_index_ops",
            "test_long_index_ops"
        ],
        "classes": [
            "TestIndexOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/instance_norm_test.py",
        "functions": [
            "_get_inputs",
            "_get_op",
            "_feed_inputs",
            "test_instance_norm_gradients",
            "test_instance_norm_layout",
            "test_instance_norm_reference_check",
            "test_instance_norm_device_check",
            "test_instance_norm_model_helper",
            "ref"
        ],
        "classes": [
            "TestInstanceNorm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/jsd_ops_test.py",
        "functions": [
            "entropy",
            "jsd",
            "jsd_grad",
            "test_bernoulli_jsd"
        ],
        "classes": [
            "TestJSDOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/key_split_ops_test.py",
        "functions": [
            "test_key_split_op"
        ],
        "classes": [
            "TestKeySplitOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lars_test.py",
        "functions": [
            "test_lars",
            "ref_lars"
        ],
        "classes": [
            "TestLars"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/layer_norm_op_test.py",
        "functions": [
            "_layer_norm_ref",
            "_layer_norm_with_affine_ref",
            "_layer_norm_grad_ref",
            "test_layer_norm_grad_op",
            "test_layer_norm_op",
            "test_layer_norm_grad",
            "test_layer_norm_op_c10",
            "test_layer_norm_op_c10_preallocated_outputs",
            "test_layer_norm_op_pytorch",
            "test_layer_norm_op_pytorch_cuda",
            "test_layer_norm_op_jit",
            "test_layer_norm_brew_wrapper",
            "test_layer_norm_with_empty_batch",
            "jit_layer_norm",
            "ref"
        ],
        "classes": [
            "TestLayerNormOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/leaky_relu_test.py",
        "functions": [
            "_get_inputs",
            "_get_op",
            "_feed_inputs",
            "test_leaky_relu_gradients",
            "test_leaky_relu_layout",
            "test_leaky_relu_reference_check",
            "test_leaky_relu_device_check",
            "test_leaky_relu_model_helper_helper",
            "ref"
        ],
        "classes": [
            "TestLeakyRelu"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/learning_rate_adaption_op_test.py",
        "functions": [
            "test_learning_rate_adaption_op_normalization",
            "test_learning_rate_adaption_op_without_normalization",
            "ref",
            "ref"
        ],
        "classes": [
            "TestLearningRateAdaption"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/learning_rate_op_test.py",
        "functions": [
            "test_alter_learning_rate_op",
            "test_hill_learning_rate_op",
            "test_slope_learning_rate_op",
            "test_gate_learningrate",
            "test_composite_learning_rate_op",
            "ref",
            "ref",
            "ref",
            "ref",
            "step_lr",
            "exp_lr",
            "fixed_lr",
            "one_policy_check_ref",
            "all_sub_policy_check_ref"
        ],
        "classes": [
            "TestLearningRate"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lengths_pad_op_test.py",
        "functions": [
            "test_lengths_pad",
            "lengths_pad_op"
        ],
        "classes": [
            "TestLengthsPadOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lengths_reducer_fused_nbit_rowwise_ops_test.py",
        "functions": [
            "test_sparse_lengths_sum",
            "test_sparse_lengths_mean",
            "test_sparse_lengths_sum_rowwise_sparse",
            "test_sparse_lengths_mean_rowwise_sparse_with_skipped_pruning"
        ],
        "classes": [
            "TestLengthsReducerOpsFusedNBitRowwise"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lengths_tile_op_test.py",
        "functions": [
            "test_lengths_tile",
            "lengths_tile_op"
        ],
        "classes": [
            "TestLengthsTileOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lengths_top_k_ops_test.py",
        "functions": [
            "test_lengths_top_k_op",
            "test_lengths_top_k_empty_op",
            "lengths_top_k",
            "lengths_top_k"
        ],
        "classes": [
            "TestLengthsTopKOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/length_split_op_test.py",
        "functions": [
            "_length_split_op_ref",
            "test_length_split_edge",
            "test_length_split_arg",
            "test_length_split_override_arg",
            "test_length_split_even_divide",
            "test_length_split_random"
        ],
        "classes": [
            "TestLengthSplitOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/listwise_l2r_operator_test.py",
        "functions": [
            "ref_lambda_rank_loss",
            "test_lambda_rank_loss",
            "get_discounts",
            "sigm",
            "log_sigm"
        ],
        "classes": [
            "TestListwiseL2rOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/load_save_test.py",
        "functions": [
            "__init__",
            "load_save",
            "saveFile",
            "testLoadSave",
            "testRepeatedArgs",
            "testLoadExcessblobs",
            "testTruncatedFile",
            "testBlobNameOverrides",
            "testMissingFile",
            "testLoadMultipleFilesGivenSourceBlobNames",
            "testLoadAllMultipleFiles",
            "testLoadAllMultipleFilesWithSameKey",
            "testLoadRepeatedFiles",
            "_LoadTest"
        ],
        "classes": [
            "TestLoadSaveBase",
            "TestLoadSave"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/locally_connected_op_test.py",
        "functions": [
            "test_lc_2d",
            "test_lc_1d",
            "test_lc_3d",
            "lc_2d_nchw",
            "lc_2d_nhwc",
            "lc_1d_nchw",
            "lc_3d_nchw",
            "conv",
            "conv",
            "conv"
        ],
        "classes": [
            "TestLocallyConnectedOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/lpnorm_op_test.py",
        "functions": [
            "test_Lp_Norm",
            "test_lpnorm_shape_inference"
        ],
        "classes": [
            "LpnormTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/map_ops_test.py",
        "functions": [
            "test_create_map",
            "test_map",
            "test_map_func"
        ],
        "classes": [
            "TestMap"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/margin_ranking_criterion_op_test.py",
        "functions": [
            "test_margin_ranking_criterion",
            "ref_cec"
        ],
        "classes": [
            "TestMarginRankingCriterion"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/math_ops_test.py",
        "functions": [
            "test_elementwise_power",
            "test_sign",
            "powf",
            "powf_grad",
            "signf"
        ],
        "classes": [
            "TestMathOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/matmul_op_test.py",
        "functions": [
            "test_matmul",
            "test_matmul_axis",
            "test_batch_matmul",
            "_test_batch_matmul_with_broadcast_common",
            "test_numpy_batch_matmul",
            "test_numpy_batch_matmul_1d",
            "test_numpy_batch_matmul_1d_2d",
            "test_numpy_batch_matmul_2d_1d",
            "matmul_ref",
            "size_to_dim",
            "size_from_dim",
            "reshape",
            "canonical_axis",
            "matmul_ref",
            "matmul_ref",
            "relax_fp16_check",
            "matmul_ref"
        ],
        "classes": [
            "TestMatMul",
            "TestBatchMatMul"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mean_op_test.py",
        "functions": [
            "test_mean",
            "mean_ref"
        ],
        "classes": [
            "TestMean"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/merge_id_lists_op_test.py",
        "functions": [
            "id_list_batch",
            "merge_id_lists_ref",
            "merge_arrays",
            "test_merge_id_lists_ref",
            "test_merge_id_lists_op"
        ],
        "classes": [
            "TestMergeIdListsOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mkl_conv_op_test.py",
        "functions": [
            "test_mkl_convolution"
        ],
        "classes": [
            "MKLConvTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mkl_packed_fc_op_test.py",
        "functions": [
            "test_packed_fc",
            "test_packed_fc_axis",
            "ref",
            "ref"
        ],
        "classes": [
            "PackedFCTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mod_op_test.py",
        "functions": [
            "_data",
            "test_mod",
            "ref"
        ],
        "classes": [
            "TestMod"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/moments_op_test.py",
        "functions": [
            "run_moments_test",
            "test_moments",
            "ref"
        ],
        "classes": [
            "TestMomentsOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/momentum_sgd_test.py",
        "functions": [
            "test_momentum_sgd",
            "test_sparse_momentum_sgd",
            "test_fp16momentum_sgd",
            "momentum_sgd",
            "momentum_sgd",
            "sparse",
            "momentum_sgd"
        ],
        "classes": [
            "TestMomentumSGD"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mpi_test.py",
        "functions": [
            "SetupMPI",
            "test_broadcast",
            "test_reduce",
            "test_allreduce",
            "test_sendrecv"
        ],
        "classes": [
            "TestMPI"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/mul_gradient_benchmark.py",
        "functions": [
            "benchmark_mul_gradient"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/negate_gradient_op_test.py",
        "functions": [
            "test_forward",
            "test_grad",
            "neg_grad_ref"
        ],
        "classes": [
            "TestNegateGradient"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/normalize_op_test.py",
        "functions": [
            "test_normalize",
            "test_normalize_L1",
            "ref_normalize",
            "ref"
        ],
        "classes": [
            "TestNormalizeOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/numpy_tile_op_test.py",
        "functions": [
            "test_numpy_tile",
            "test_numpy_tile_zero_dim",
            "tile_ref",
            "tile_ref"
        ],
        "classes": [
            "TestNumpyTile"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/one_hot_ops_test.py",
        "functions": [
            "_one_hots",
            "test_batch_one_hot",
            "test_batch_bucketized_one_hot",
            "test_one_hot",
            "test_segment_one_hot",
            "test_batch_bucket_one_hot_shape_inference",
            "ref",
            "ref",
            "one_hot_ref",
            "segment_one_hot_ref"
        ],
        "classes": [
            "TestOneHotOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/onnx_while_test.py",
        "functions": [
            "test_onnx_while_fibb",
            "ref"
        ],
        "classes": [
            "TestONNXWhile"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/order_switch_test.py",
        "functions": [
            "test_nchw2nhwc",
            "test_nhwc2nchw",
            "nchw2nhwc_ref",
            "nhwc2nchw_ref"
        ],
        "classes": [
            "OrderSwitchOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/pack_ops_test.py",
        "functions": [
            "pack_segments_ref",
            "test_pack_with_max_length_ops",
            "test_pack_ops",
            "test_pack_ops_str",
            "test_pad_minf",
            "test_pad_no_minf",
            "test_presence_mask",
            "test_presence_mask_empty",
            "test_out_of_bounds",
            "test_under_bounds",
            "pack_segments_ref",
            "_cal_unpacked_data"
        ],
        "classes": [
            "TestTensorPackOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/pack_rnn_sequence_op_test.py",
        "functions": [
            "test_pack_rnn_seqence",
            "test_unpack_rnn_seqence",
            "pack_op",
            "unpack_op"
        ],
        "classes": [
            "TestPackRNNSequenceOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/pad_test.py",
        "functions": [
            "test_crop",
            "ref"
        ],
        "classes": [
            "TestPad"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/partition_ops_test.py",
        "functions": [
            "test_configs",
            "testPartition",
            "testLengthsPartition",
            "sharding",
            "sharding",
            "join",
            "join"
        ],
        "classes": [
            "TestPartitionOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/percentile_op_test.py",
        "functions": [
            "_test_percentile_op",
            "_test_shape_inference",
            "test_percentile_op_with_only_one_dist",
            "test_percentile_op_with_all_elements_in_map",
            "test_percentile_op_with_same_value",
            "test_percentile_op_with_elements_bigger_than_map_range",
            "test_percentile_op_with_elements_smaller_than_map_range",
            "test_percentile_op_with_interpolation",
            "test_percentile_op_with_large_sample_size_per_dist"
        ],
        "classes": [
            "TestPercentileOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/piecewise_linear_transform_test.py",
        "functions": [
            "constrain",
            "transform",
            "test_multi_predictions_params_from_arg",
            "test_binary_predictions_params_from_arg",
            "test_multi_predictions_params_from_input",
            "test_binary_predictions_params_from_input",
            "test_1D_predictions_params_from_input",
            "constrain_internal",
            "piecewise",
            "piecewise",
            "piecewise",
            "piecewise",
            "piecewise"
        ],
        "classes": [
            "TestPiecewiseLinearTransform"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/pooling_test.py",
        "functions": [
            "test_pooling_separate_stride_pad",
            "test_pooling_big_batch",
            "test_pooling_1d",
            "test_pooling_3d",
            "test_global_pooling_3d",
            "test_pooling_with_index",
            "test_global_avg_pool_nchw",
            "test_global_max_pool_nchw",
            "test_pooling",
            "test_global_pooling",
            "test_max_pool_grad",
            "test_avg_pool_count_include_pad"
        ],
        "classes": [
            "TestPooling"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/prepend_dim_test.py",
        "functions": [
            "_test_fwd_bwd",
            "test_prepend_dim"
        ],
        "classes": [
            "TestPrependDim"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/python_op_test.py",
        "functions": [
            "test_simple_python_op",
            "g",
            "f"
        ],
        "classes": [
            "PythonOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/quantile_test.py",
        "functions": [
            "_test_quantile",
            "test_quantile_1",
            "test_quantile_2",
            "test_quantile_3",
            "test_quantile_4"
        ],
        "classes": [
            "TestQuantile"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rand_quantization_op_test.py",
        "functions": [
            "test_rand_quantization",
            "quantization_ref",
            "get_allowed_errors",
            "dec_ref"
        ],
        "classes": [
            "TestFloatToFusedRandRowwiseQuantized"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rank_loss_operator_test.py",
        "functions": [
            "test_pair_wise_loss_predictions",
            "test_pair_wise_loss_gradient",
            "test_pair_wise_loss_batch",
            "pair_wise_op",
            "f"
        ],
        "classes": [
            "TestPairWiseLossOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rebatching_queue_test.py",
        "functions": [
            "primefac",
            "test_rebatching_queue_single_enqueue_dequeue",
            "test_rebatching_queue_multi_enqueue_dequeue",
            "test_rebatching_queue_closes_properly",
            "test_rebatching_queue_multiple_components",
            "test_rebatching_parallel_producer_consumer",
            "append"
        ],
        "classes": [
            "TestReBatchingQueue"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/record_queue_test.py",
        "functions": [
            "test_record_queue",
            "process"
        ],
        "classes": [
            "TestRecordQueue"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/recurrent_network_test.py",
        "functions": [
            "test_sum_mul",
            "test_mul",
            "test_extract",
            "simple_rnn",
            "_convolution_1d",
            "test_stateful_convolution_forward_only",
            "reference"
        ],
        "classes": [
            "RecurrentNetworkTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/recurrent_net_executor_test.py",
        "functions": [
            "setUp",
            "test_lstm_with_attention_equal_simplenet",
            "init_lstm_model",
            "test_empty_sequence",
            "test_lstm_equal_simplenet",
            "_compare",
            "enable_rnn_executor"
        ],
        "classes": [
            "TestRNNExecutor"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/reduce_ops_test.py",
        "functions": [
            "getNorm",
            "run_reduce_op_test_impl",
            "run_reduce_op_test",
            "test_reduce_min",
            "test_reduce_max",
            "test_reduce_sum",
            "test_reduce_mean",
            "test_reduce_l1",
            "test_reduce_l2",
            "grad_variant_input_test",
            "max_op_test",
            "reduce_op_test",
            "test_reduce_front_sum",
            "test_reduce_front_sum_empty_batch",
            "test_reduce_front_sum_with_length",
            "test_reduce_front_mean",
            "test_reduce_front_mean_with_length",
            "test_reduce_front_max",
            "test_reduce_front_max_with_length",
            "test_reduce_back_max",
            "test_reduce_back_max_with_length",
            "test_reduce_back_sum",
            "test_reduce_back_sum_with_length",
            "test_reduce_back_mean",
            "test_reduce_back_mean_with_length",
            "ref",
            "norm",
            "ref_sum",
            "ref_sum",
            "ref_sum",
            "ref_mean",
            "ref_mean",
            "ref_frontmax",
            "ref_max",
            "ref_backmax",
            "ref_max",
            "ref_sum",
            "ref_sum",
            "ref_mean",
            "ref_mean",
            "norm"
        ],
        "classes": [
            "TestReduceOps",
            "TestReduceFrontReductions"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/reduction_ops_test.py",
        "functions": [
            "test_elementwise_sum",
            "test_elementwise_int_sum",
            "test_elementwise_sqrsum",
            "test_elementwise_avg",
            "test_rowwise_max",
            "test_columnwise_max",
            "sum_op",
            "sum_op",
            "sumsqr_op",
            "avg_op",
            "rowwise_max",
            "columnwise_max"
        ],
        "classes": [
            "TestReductionOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/reshape_ops_test.py",
        "functions": [
            "_test_reshape_output_and_gradient",
            "test_lengths_to_shape_ops",
            "test_reshape_ops",
            "test_basic_reshape",
            "test_missing_dim",
            "test_in_place",
            "test_zero_dim",
            "test_zero_dim_and_missing_dim",
            "test_backprop",
            "test_input_shape_changes",
            "test_nonempty_tensor_gradient",
            "test_empty_tensor",
            "test_one_dim_empty_tensor_gradient",
            "test_one_dim_and_empty_tensor",
            "test_scalar_to_tensor"
        ],
        "classes": [
            "TestLengthsToShapeOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/resize_op_test.py",
        "functions": [
            "test_nearest",
            "test_nearest_grad",
            "test_nearest_onnx",
            "test_nearest_onnx_grad",
            "ref",
            "ref",
            "ref",
            "ref"
        ],
        "classes": [
            "TestResize"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rmac_regions_op_test.py",
        "functions": [
            "test",
            "ref_op"
        ],
        "classes": [
            "RMACRegionsOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rms_norm_op_test.py",
        "functions": [
            "test_rms_norm",
            "rms_norm_ref"
        ],
        "classes": [
            "TestRMSNormOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rnn_cell_test.py",
        "functions": [
            "lstm_unit",
            "layer_norm_with_scale_and_bias_ref",
            "layer_norm_lstm_reference",
            "lstm_reference",
            "multi_lstm_reference",
            "compute_regular_attention_logits",
            "compute_recurrent_attention_logits",
            "compute_dot_attention_logits",
            "compute_coverage_attention_logits",
            "lstm_with_attention_reference",
            "lstm_with_regular_attention_reference",
            "lstm_with_recurrent_attention_reference",
            "lstm_with_dot_attention_reference",
            "lstm_with_dot_attention_reference_same_dim",
            "lstm_with_dot_attention_reference_different_dim",
            "lstm_with_coverage_attention_reference",
            "milstm_reference",
            "layer_norm_milstm_reference",
            "lstm_input",
            "_prepare_attention",
            "prepare_mul_rnn",
            "create_input",
            "generate_input_state",
            "_apply",
            "get_state_names",
            "test_unroll_mul",
            "test_unroll_lstm",
            "test_unroll_attention",
            "test_layered_lstm",
            "test_lstm",
            "test_milstm",
            "test_norm_lstm",
            "test_norm_milstm",
            "lstm_base",
            "test_lstm_extract_predictor_net",
            "test_lstm_params",
            "test_milstm_params",
            "test_layer_norm_lstm_params",
            "test_lstm_with_regular_attention",
            "test_lstm_with_recurrent_attention",
            "test_lstm_with_dot_attention_same_dim",
            "test_lstm_with_dot_attention_different_dim",
            "test_lstm_with_coverage_attention",
            "lstm_with_attention",
            "test_lstm_unit_recurrent_network",
            "test_multi_lstm",
            "lstm_unit_reference"
        ],
        "classes": [
            "MulCell",
            "RNNCellTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/roi_align_rotated_op_test.py",
        "functions": [
            "bbox_xywh_to_xyxy",
            "test_horizontal_rois",
            "test_simple_rotations",
            "roialign_ref",
            "roialign_rot90",
            "roialign_flip",
            "roialign_ref"
        ],
        "classes": [
            "RoIAlignRotatedOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/rowwise_counter_test.py",
        "functions": [
            "update_counter_ref",
            "test_rowwise_counter"
        ],
        "classes": [
            "TestRowWiseCounter"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/scale_op_test.py",
        "functions": [
            "test_scale_ops"
        ],
        "classes": [
            "TestScaleOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/self_binning_histogram_test.py",
        "functions": [
            "__init__",
            "_check_histogram",
            "_run_single_op_net",
            "test_histogram_device_consistency",
            "test_histogram_bin_to_fewer",
            "test_histogram_bin_to_more",
            "test_histogram_bin_to_two",
            "test_histogram_min_max_equal",
            "test_histogram_min_max_equal_nonzero",
            "test_histogram_empty_input_tensor",
            "test_histogram_multi_input",
            "test_histogram_very_small_range_for_stride_underflow",
            "test_histogram_insufficient_bins",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": [
            "TestSelfBinningHistogramBase",
            "TestSelfBinningHistogramLinear",
            "TestSelfBinningHistogramLogarithmic",
            "TestSelfBinningHistogramLinearFloat",
            "TestSelfBinningHistogramLogarithmicFloat",
            "TestSelfBinningHistogramLinearWithAbs",
            "TestSelfBinningHistogramLogarithmicWithAbs",
            "TestSelfBinningHistogramLinearFloatWithAbs",
            "TestSelfBinningHistogramLogarithmicFloatWithAbs",
            "TestSelfBinningHistogramLinearWithNoneAbs",
            "TestSelfBinningHistogramLinearFloatWithNoneAbs"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/selu_op_test.py",
        "functions": [
            "test_selu_1",
            "test_selu_2",
            "test_selu_3",
            "test_selu_inplace",
            "fix0",
            "selu_ref"
        ],
        "classes": [
            "TestSelu"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sequence_ops_test.py",
        "functions": [
            "_gen_test_add_padding",
            "_add_padding_ref",
            "_remove_padding_ref",
            "_gather_padding_ref",
            "gen_with_size",
            "test_add_padding",
            "test_add_zero_padding",
            "test_add_padding_no_length",
            "test_remove_padding",
            "test_gather_padding",
            "test_reverse_packed_segs",
            "test_remove_data_blocks",
            "test_find_duplicate_elements",
            "op_ref",
            "op_grad_ref",
            "op_ref",
            "op_ref"
        ],
        "classes": [
            "TestSequenceOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/shape_inference_test.py",
        "functions": [
            "testShapeInferenceSimpleFC",
            "testFCAxis2",
            "testFCTransposed",
            "testShapeInferenceSlice",
            "testShapeInferenceDistances",
            "testShapeInferenceReduceBackFrontX",
            "testGather",
            "testShapeInferenceConvNet",
            "testShapeInferenceTranspose",
            "testShapeInferencePad",
            "testShapeInferenceTwoClass",
            "testShapeInferencePadZero",
            "testShapeInferenceMatMul",
            "testShapeInferenceSoftmaxWithLoss",
            "testShapeInferenceIm2Col",
            "testShapeInferenceTile",
            "testShapeInferenceFlatten",
            "testShapeInferenceReshape",
            "testShapeInferenceUnique",
            "testLengthsSum",
            "testLengthsPad",
            "testConcat",
            "testConcatInt32",
            "testSqueeze",
            "testCast",
            "testShapeInferenceRoiPool",
            "testShapeInferencePow",
            "testInt8Conversion",
            "testHalfInt8Conversion",
            "testLearningRateOp",
            "testShapeOp",
            "InferTensorRunAndCompare"
        ],
        "classes": [
            "TestShapeInference"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sinusoid_position_encoding_op_test.py",
        "functions": [
            "test_sinusoid_embedding",
            "sinusoid_encoding",
            "sinusoid_embedding_op"
        ],
        "classes": [
            "TestSinusoidPositionEncodingOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/softmax_ops_test.py",
        "functions": [
            "test_softmax",
            "test_softmax_grad",
            "test_softmax_axis",
            "test_softmax_with_loss",
            "test_softmax_with_loss_axis_2",
            "test_softmax_with_loss_large",
            "test_softmax_with_loss_label_prob",
            "test_softmax_with_loss_weighted",
            "test_softmax_with_loss_label_prob_weighted",
            "test_spatial_softmax_with_loss",
            "test_spatial_softmax_with_loss_allignore",
            "test_softmax_with_loss_zero_weight",
            "test_compare_cpugpu",
            "label_softmax",
            "label_softmax_grad",
            "prod",
            "label_softmax",
            "label_softmax_crossent",
            "label_softmax_crossent",
            "label_softmax_crossent",
            "label_softmax_crossent_weighted",
            "label_softmax_crossent_weighted",
            "label_softmax_crossent_spatial",
            "label_softmax_crossent_spatial",
            "label_softmax_crossent",
            "label_softmax_crossent"
        ],
        "classes": [
            "TestSoftmaxOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/softplus_op_test.py",
        "functions": [
            "test_softplus"
        ],
        "classes": [
            "TestSoftplus"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_dropout_with_replacement_op_test.py",
        "functions": [
            "test_no_dropout",
            "test_all_dropout",
            "test_all_dropout_empty_input"
        ],
        "classes": [
            "SparseDropoutWithReplacementTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_gradient_checker_test.py",
        "functions": [
            "test_sparse_gradient"
        ],
        "classes": [
            "TestSparseGradient"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_lengths_sum_benchmark.py",
        "functions": [
            "benchmark_sparse_lengths_sum",
            "f"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_lp_regularizer_test.py",
        "functions": [
            "ref_lpnorm",
            "test_sparse_lpnorm",
            "ref_sparse_lp_regularizer"
        ],
        "classes": [
            "TestSparseLpNorm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_normalize_test.py",
        "functions": [
            "ref_normalize",
            "test_sparse_normalize",
            "ref_sparse_normalize"
        ],
        "classes": [
            "TestSparseNormalize"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_ops_test.py",
        "functions": [
            "testScatterWeightedSum",
            "testScatterAssign",
            "ref",
            "ref"
        ],
        "classes": [
            "TestScatterOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/sparse_to_dense_mask_op_test.py",
        "functions": [
            "test_sparse_to_dense_mask",
            "test_sparse_to_dense_mask_with_int64",
            "test_sparse_to_dense_mask_high_dim"
        ],
        "classes": [
            "TestFcOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/spatial_bn_op_test.py",
        "functions": [
            "test_spatialbn_test_mode_3d",
            "test_spatialbn_test_mode_1d",
            "test_spatialbn_test_mode",
            "test_spatialbn_train_mode",
            "test_spatialbn_train_mode_gradient_check",
            "test_spatialbn_train_mode_gradient_check_1d",
            "test_spatial_bn_multi_batch",
            "test_spatial_bn_multi_batch_grad",
            "test_spatialbn_brew_wrapper",
            "reference_spatialbn_test",
            "reference_spatialbn_test",
            "reference_spatialbn_test",
            "batch_norm_ref",
            "spatial_bn_multi_batch_ref",
            "spatial_bn_multi_batch_grad_ref"
        ],
        "classes": [
            "TestSpatialBN"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/square_root_divide_op_test.py",
        "functions": [
            "_data_and_scale",
            "divide_by_square_root",
            "grad",
            "test_square_root_divide"
        ],
        "classes": [
            "TestSquareRootDivide"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/stats_ops_test.py",
        "functions": [
            "test_stats_ops"
        ],
        "classes": [
            "TestCounterOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/stats_put_ops_test.py",
        "functions": [
            "test_default_value",
            "test_clamp",
            "test_clamp_with_out_of_bounds",
            "test_avg_put_ops",
            "test_increment_put_ops",
            "test_stddev_put_ops"
        ],
        "classes": [
            "TestPutOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/storm_test.py",
        "functions": [
            "test_storm_dense",
            "test_storm_sparse",
            "test_storm_sparse_empty",
            "ref_dense",
            "ref_sparse",
            "ref_sparse_empty"
        ],
        "classes": [
            "TestStorm"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/string_ops_test.py",
        "functions": [
            "_string_lists",
            "test_string_prefix",
            "test_string_suffix",
            "test_string_starts_with",
            "test_string_ends_with",
            "test_string_equals",
            "string_prefix_ref",
            "string_suffix_ref",
            "string_starts_with_ref",
            "string_ends_with_ref",
            "string_equals_ref"
        ],
        "classes": [
            "TestStringOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/text_file_reader_test.py",
        "functions": [
            "test_text_file_reader"
        ],
        "classes": [
            "TestTextFileReader"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/thresholded_relu_op_test.py",
        "functions": [
            "test_thresholded_relu_1",
            "test_thresholded_relu_2",
            "test_thresholded_relu_3",
            "fix_input",
            "defaultRef",
            "ref"
        ],
        "classes": [
            "TestThresholdedRelu"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/tile_op_test.py",
        "functions": [
            "test_tile",
            "test_tile_grad",
            "test_tilewinput",
            "tile_ref",
            "tile_ref",
            "tile_ref"
        ],
        "classes": [
            "TestTile"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/top_k_test.py",
        "functions": [
            "top_k_ref",
            "test_top_k",
            "test_top_k_1",
            "test_top_k_2",
            "test_top_k_3",
            "test_top_k_4",
            "test_top_k_5",
            "test_top_k_6",
            "test_top_k_axis",
            "test_top_k_grad",
            "bind_ref",
            "bind_ref",
            "bind_ref",
            "bind_ref",
            "bind_ref",
            "bind_ref",
            "bind_ref",
            "bind_ref"
        ],
        "classes": [
            "TestTopK"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/torch_integration_test.py",
        "functions": [
            "generate_rois",
            "generate_rois_rotated",
            "create_bbox_transform_inputs",
            "bytes_to_floats",
            "floats_to_bytes",
            "fused_rowwise_8bit_quantize_reference",
            "fused_rowwise_8bit_quantize_dequantize_reference",
            "test_bbox_transform",
            "test_box_with_nms_limits",
            "test_sparse_to_dense_mask",
            "test_generate_proposals",
            "test_inference_lstm",
            "test_generate_proposals_cuda",
            "_test_roi_align",
            "test_roi_align_cpu",
            "test_roi_align_cuda",
            "_test_roi_align_rotated",
            "test_roi_align_rotated_cpu",
            "test_roi_align_rotated_cuda",
            "test_collect_and_distribute_fpn_rpn_proposals_op",
            "_test_gelu_op",
            "test_gelu_op",
            "test_gelu_op_cuda",
            "_test_lengths_op",
            "_test_lengths_sum_op",
            "test_lengths_sum_op",
            "test_lengths_sum_op_cuda",
            "_test_lengths_mean_op",
            "test_lengths_mean_op",
            "test_lengths_mean_op_cuda",
            "_test_lengths_max_op",
            "test_lengths_max_op",
            "test_lengths_max_op_cuda",
            "_test_resize_nearest_op",
            "test_resize_nearest_op_cpu",
            "test_resize_nearest_op_cuda",
            "test_Fused8BitRowwiseQuantizedToFloat",
            "test_piecewise_linear_op",
            "test_alias_with_name_is_in_place",
            "test_copy_between_cpu_and_gpu",
            "test_index_hash_op",
            "test_bucketize_op",
            "test_logit",
            "test_percentile",
            "test_batch_bucket_one_hot_op",
            "test_gather_ranges_to_dense_op",
            "test_merge_id_lists",
            "test_learning_rate",
            "test_pack_segments",
            "bbox_transform_ref",
            "box_with_nms_limit_ref",
            "sparse_to_dense_mask_ref",
            "generate_proposals_ref",
            "inference_lstm_ref",
            "generate_proposals_ref",
            "rand_roi",
            "roi_align_ref",
            "rand_rotated_roi",
            "roi_align_ref",
            "_gelu_ref",
            "_lengths_ref",
            "_resize_nearest_ref",
            "_piecewise_linear_ref",
            "_index_hash_ref",
            "_bucketize_ref",
            "ref",
            "_percentile_ref",
            "_batch_bucket_one_hot_ref",
            "_merge_id_lists"
        ],
        "classes": [
            "TorchIntegration"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/transpose_op_test.py",
        "functions": [
            "test_transpose",
            "test_transpose_large_matrix",
            "test_transpose_cudnn",
            "transpose_ref",
            "transpose_ref",
            "transpose_ref"
        ],
        "classes": [
            "TestTransposeOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/trigonometric_op_test.py",
        "functions": [
            "test_acos",
            "test_asin",
            "test_atan",
            "test_tan",
            "assertTrigonometricChecks"
        ],
        "classes": [
            "TestTrigonometricOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/unique_ops_test.py",
        "functions": [
            "_unique_ref",
            "test_unique_op"
        ],
        "classes": [
            "TestUniqueOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/unique_uniform_fill_op_test.py",
        "functions": [
            "test_unique_uniform_int_fill"
        ],
        "classes": [
            "TestUniqueUniformFillOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/unsafe_coalesce_test.py",
        "functions": [
            "test_unsafe_coalesce_op",
            "test_unsafe_coalesce_op_blob_sharing",
            "reference_func"
        ],
        "classes": [
            "TestUnsafeCoalesceOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/upsample_op_test.py",
        "functions": [
            "test_upsample",
            "test_upsample_grad",
            "ref",
            "ref"
        ],
        "classes": [
            "TestUpSample"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/utility_ops_test.py",
        "functions": [
            "test_slice",
            "test_resize_like",
            "test_transpose",
            "test_nan_check",
            "test_elementwise_max",
            "test_elementwise_max_grad",
            "test_elementwise_min",
            "test_elementwise_min_grad",
            "test_sum",
            "test_lengths_gather",
            "test_lengths_to_ranges",
            "test_size_op",
            "test_alias_op",
            "test_range",
            "resize_like",
            "transpose_ref",
            "nan_reference",
            "max_op",
            "max_grad_op",
            "min_op",
            "min_grad_op",
            "sum_op_ref",
            "lengths_gather_op",
            "lengths_to_ranges_op",
            "size_op",
            "slice_ref",
            "slice_ref",
            "mx_grad",
            "mx_grad"
        ],
        "classes": [
            "TestUtilityOps"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/video_input_op_test.py",
        "functions": [
            "create_a_list",
            "create_video_db",
            "test_rgb_with_temporal_jittering",
            "test_rgb_with_uniform_sampling",
            "test_optical_flow_with_temporal_jittering",
            "test_rgb_use_shorter_edge",
            "test_optical_flow_use_shorter_edge"
        ],
        "classes": [
            "VideoInputOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/weighted_multi_sample_test.py",
        "functions": [
            "test_weighted_multi_sample"
        ],
        "classes": [
            "TestWeightedMultiSample"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/weighted_sample_test.py",
        "functions": [
            "test_weighted_sample"
        ],
        "classes": [
            "TestWeightedSample"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/weighted_sum_test.py",
        "functions": [
            "test_weighted_sum",
            "test_weighted_sum_grad",
            "weighted_sum_op_ref"
        ],
        "classes": [
            "TestWeightedSumOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/weight_scale_test.py",
        "functions": [
            "test_weight_scale",
            "ref_weight_scale"
        ],
        "classes": [
            "TestWeightScale"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/wngrad_test.py",
        "functions": [
            "ref_wngrad",
            "wngrad_sparse_test_helper",
            "ref_sparse",
            "test_wngrad_dense_base",
            "test_wngrad_dense_output_effective_lr",
            "test_wngrad_dense_output_effective_lr_and_update",
            "test_sparse_wngrad",
            "test_sparse_wngrad_empty",
            "ref_sparse"
        ],
        "classes": [
            "TestWngrad"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/operator_test/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/mobile_exporter.py",
        "functions": [
            "add_tensor",
            "Export"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/mobile_exporter_test.py",
        "functions": [
            "test_mobile_exporter",
            "test_mobile_exporter_datatypes"
        ],
        "classes": [
            "TestMobileExporter"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/predictor_exporter.py",
        "functions": [
            "get_predictor_exporter_helper",
            "prepare_prediction_net",
            "_global_init_net",
            "get_meta_net_def",
            "set_model_info",
            "save_to_db",
            "load_from_db",
            "__new__",
            "inputs_name",
            "outputs_name",
            "parameters_name",
            "global_init_name",
            "predict_init_name",
            "predict_net_name",
            "train_init_plan_name",
            "train_plan_name"
        ],
        "classes": [
            "PredictorExportMeta"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/predictor_exporter_test.py",
        "functions": [
            "test_minimal",
            "test_adding_net",
            "test_replace_blobs",
            "_create_model",
            "setUp",
            "test_meta_constructor",
            "test_param_intersection",
            "test_meta_net_def_net_runs",
            "test_load_device_scope",
            "test_db_fails_without_params"
        ],
        "classes": [
            "MetaNetDefTest",
            "PredictorExporterTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/predictor_py_utils.py",
        "functions": [
            "create_predict_net",
            "create_predict_init_net",
            "get_comp_name",
            "_ProtoMapGet",
            "GetPlan",
            "GetPlanOriginal",
            "GetBlobs",
            "GetBlobsByTypePrefix",
            "GetNet",
            "GetNetOriginal",
            "GetApplicationSpecificInfo",
            "AddBlobs",
            "ReplaceBlobs",
            "AddPlan",
            "AddNet",
            "SetBlobsOrder",
            "SetPreLoadBlobs",
            "SetRequestOnlyEmbeddings",
            "GetBlobsOrder",
            "SetTensorBoundShapes",
            "SetAOTConfig",
            "GetArgumentByName",
            "AddModelIdArg",
            "zero_fill"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/predictor_test.py",
        "functions": [
            "setUp",
            "_predict_net",
            "_init_net",
            "test_run",
            "test_run_map"
        ],
        "classes": [
            "TestPredictor"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/serde.py",
        "functions": [
            "serialize_protobuf_struct",
            "deserialize_protobuf_struct"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/predictor/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/rnn/lstm_comparison.py",
        "functions": [
            "Compare"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/rnn/rnn_cell_test_util.py",
        "functions": [
            "sigmoid",
            "tanh",
            "_prepare_rnn",
            "generate_input_state"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/rnn/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/serialized_test/coverage.py",
        "functions": [
            "gen_serialized_test_coverage",
            "gen_coverage_sets",
            "gen_covered_ops",
            "parse_proto"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/serialized_test/serialized_test_util.py",
        "functions": [
            "given",
            "_getGradientOrNone",
            "_transformList",
            "_prepare_dir",
            "testWithArgs",
            "wrapper",
            "get_output_dir",
            "get_output_filename",
            "serialize_test",
            "compare_test",
            "_assertSameOps",
            "assertSerializedOperatorChecks",
            "assertReferenceChecks",
            "func",
            "parse_proto"
        ],
        "classes": [
            "SerializedTestCase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/serialized_test/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/test/blob_deallocation_test.py",
        "functions": [
            "test"
        ],
        "classes": [
            "BlobDeallocationTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/do_op_test.py",
        "functions": [
            "test_operator",
            "test_reuse_workspace",
            "make_net",
            "make_net"
        ],
        "classes": [
            "DoOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/executor_test.py",
        "functions": [
            "test_executor",
            "test_executor",
            "test_failing_op",
            "run_model",
            "run_model",
            "create_failing_net"
        ],
        "classes": [
            "ExecutorCPUConvNetTest",
            "ExecutorGPUResNetTest",
            "ExecutorFailingOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/executor_test_util.py",
        "functions": [
            "executor_test_settings",
            "gen_test_resnet50",
            "conv_model_generators",
            "executor_test_model_names",
            "build_conv_model",
            "build_resnet50_dataparallel_model",
            "run_resnet50_epoch",
            "create_resnet50_model_ops",
            "add_optimizer",
            "add_image_input",
            "add_post_sync_ops",
            "compare_executors"
        ],
        "classes": [
            "ExecutorTestBase"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/fakefp16_transform_test.py",
        "functions": [
            "test_fuse"
        ],
        "classes": [
            "Transformer"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/gpu_context_test.py",
        "functions": [
            "testTHCAllocator"
        ],
        "classes": [
            "TestGPUInit"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/inference_lstm_op_test.py",
        "functions": [
            "test_c2_lstm"
        ],
        "classes": [
            "TestC2LSTM"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/python_protobuf_test.py",
        "functions": [
            "testSimple"
        ],
        "classes": [
            "TestCrossProtoCalls"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/test/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/trt/test_pt_onnx_trt.py",
        "functions": [
            "allocate_buffers",
            "load_normalized_test_case",
            "normalize_image",
            "__enter__",
            "setUp",
            "build_engine_onnx",
            "_test_model",
            "test_alexnet",
            "test_resnet18",
            "test_resnet34",
            "test_resnet50",
            "test_resnet101",
            "test_resnet152",
            "test_resnet50_2",
            "test_resnet101_2",
            "test_squeezenet1_0",
            "test_squeezenet1_1",
            "test_googlenet",
            "test_inception_v3",
            "test_mnasnet0_5",
            "test_mnasnet1_0",
            "test_mobilenet_v2",
            "test_shufflenet_v2_x0_5",
            "test_shufflenet_v2_x1_0",
            "test_vgg11",
            "test_vgg11_bn",
            "test_vgg13",
            "test_vgg13_bn",
            "test_vgg16",
            "test_vgg16_bn",
            "test_vgg19",
            "test_vgg19_bn",
            "test_densenet121",
            "test_densenet161",
            "test_densenet169",
            "test_densenet201"
        ],
        "classes": [
            "Test_PT_ONNX_TRT"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/trt/test_trt.py",
        "functions": [
            "_print_net",
            "_base_url",
            "_download_onnx_model",
            "setUp",
            "_test_relu_graph",
            "test_relu_graph_simple",
            "test_relu_graph_big_batch",
            "_test_onnx_importer",
            "test_resnet50",
            "test_bvlc_alexnet",
            "test_densenet121",
            "test_inception_v1",
            "test_inception_v2",
            "test_shufflenet",
            "test_squeezenet",
            "test_vgg16",
            "test_vgg19",
            "setUp",
            "_add_head_tail",
            "test_resnet50_core"
        ],
        "classes": [
            "TensorRTOpTest",
            "TensorRTTransformTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/python/trt/transform.py",
        "functions": [
            "_dim_values_to_list",
            "_get_output_shapes",
            "check_gpu_",
            "convert_onnx_model_to_trt_op",
            "_infer_shapes",
            "transform_caffe2_net"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/python/trt/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/quantization/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/batch_matmul_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_batch_matmul_int",
            "test_dnnlowp_batch_matmul_int_constant_B"
        ],
        "classes": [
            "DNNLowPBatchMatMulOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/batch_permutation_dnnlowp_op_test.py",
        "functions": [
            "test_batch_permutation",
            "batch_permutation_ref"
        ],
        "classes": [
            "DNNLowPBatchPermutationOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/channel_shuffle_dnnlowp_op_test.py",
        "functions": [
            "test_channel_shuffle",
            "test_channel_shuffle_fast_path",
            "channel_shuffle_ref",
            "channel_shuffle_ref"
        ],
        "classes": [
            "DNNLowPChannelShuffleOpsTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/compute_equalization_scale_test.py",
        "functions": [
            "test_compute_equalization_scale",
            "test_compute_equalization_scale_shape_inference",
            "ref_compute_equalization_scale"
        ],
        "classes": [
            "TestComputeEqualizationScaleOp"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/concat_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_concat_int"
        ],
        "classes": [
            "DNNLowPConcatOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/conv_depthwise_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_depthwise_3x3_conv",
            "test_dnnlowp_depthwise_3x3x3_conv"
        ],
        "classes": [
            "DNNLowPOpConvDepthWiseTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/conv_dnnlowp_acc16_op_test.py",
        "functions": [
            "test_dnnlowp_conv_acc16_int",
            "test_dnnlowp_conv_acc16_outlier"
        ],
        "classes": [
            "DNNLowPOpConvAcc16OpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/conv_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_conv_int",
            "test_dnnlowp_conv_relu_int",
            "_test_dnnlowp_nd_int",
            "test_dnnlowp_conv3d_int",
            "test_dnnlowp_conv1d_int"
        ],
        "classes": [
            "DNNLowPOpConvTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/conv_groupwise_dnnlowp_acc16_op_test.py",
        "functions": [
            "test_groupwise_dnnlowp_conv_acc16_int",
            "test_groupwise_dnnlowp_conv_acc16_outlier"
        ],
        "classes": [
            "GroupWiseDNNLowPOpConvAcc16OpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/conv_groupwise_dnnlowp_op_test.py",
        "functions": [
            "test_groupwise_dnnlowp_conv_int",
            "test_groupwise_dnnlowp_conv_relu_int"
        ],
        "classes": [
            "GroupWiseDNNLowPOpConvTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/dequantize_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_dequantize"
        ],
        "classes": [
            "DNNLowPDequantizeOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/dnnlowp_test_utils.py",
        "functions": [
            "check_quantized_results_close",
            "pairwise",
            "avoid_vpmaddubsw_overflow_fc",
            "avoid_vpmaddubsw_overflow",
            "generate_convnd_inputs",
            "generate_conv_inputs",
            "run_conv_or_fc"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/elementwise_linear_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_elementwise_linear_int"
        ],
        "classes": [
            "DNNLowPElementwiseLinearOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/elementwise_mul_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_elementwise_mul_int",
            "test_dnnlowp_elementwise_mul_broadcast",
            "test_dnnlowp_elementwise_mul_broadcast_axis"
        ],
        "classes": [
            "DNNLowPMulOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/elementwise_sum_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_elementwise_sum_int",
            "test_dnnlowp_elementwise_sum_int_inplace",
            "test_dnnlowp_elementwise_sum_relu_int",
            "test_dnnlowp_elementwise_sum_relu_int_inplace"
        ],
        "classes": [
            "DNNLowPOpSumOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/elementwise_add_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_elementwise_add_int",
            "test_dnnlowp_elementwise_add_broadcast",
            "test_dnnlowp_elementwise_add_broadcast_axis"
        ],
        "classes": [
            "DNNLowPAddOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/fully_connected_fp16_test.py",
        "functions": [
            "mse",
            "test_fully_connected"
        ],
        "classes": [
            "FullyConnectedFP16Test"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/observer_test.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/fully_connected_dnnlowp_acc16_op_test.py",
        "functions": [
            "test_dnnlowp_fully_connected_acc16_int",
            "test_dnnlowp_fully_connected_acc16_outlier"
        ],
        "classes": [
            "DNNLowPFullyConnectedAcc16OpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/fully_connected_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_fully_connected_int"
        ],
        "classes": [
            "DNNLowPFullyConnectedOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/fully_connected_rowwise_dnnlowp_op_test.py",
        "functions": [
            "test_rowwise_dnnlowp_fully_connected_int"
        ],
        "classes": [
            "RowWiseDNNLowPFullyConnectedOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/gather_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_gather"
        ],
        "classes": [
            "DNNLowPGatherOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/group_norm_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_group_norm"
        ],
        "classes": [
            "DNNLowPOpGroupNormTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/int8_gen_quant_params_min_max_test.py",
        "functions": [
            "test_int8_gen_quant_params_min_max_op"
        ],
        "classes": [
            "TestInt8GenQuantParamsMinMaxOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/int8_gen_quant_params_test.py",
        "functions": [
            "test_int8_gen_quant_params_op"
        ],
        "classes": [
            "TestInt8GenQuantParamsOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/int8_quant_scheme_blob_fill_test.py",
        "functions": [
            "test_int8_quant_scheme_blob_fill_op"
        ],
        "classes": [
            "TestInt8QuantSchemeBlobFillOperator"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/lstm_unit_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_lstm_unit"
        ],
        "classes": [
            "DNNLowPLSTMUnitOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/pool_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_max_pool",
            "test_dnnlowp_average_pool"
        ],
        "classes": [
            "DNNLowPOpPoolTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/quantize_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_quantize"
        ],
        "classes": [
            "DNNLowPQuantizeOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/relu_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_relu"
        ],
        "classes": [
            "DNNLowPReluOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/resize_nearest_3d_dnnlowp_op_test.py",
        "functions": [
            "test_resize_nearest",
            "resize_nearest_ref"
        ],
        "classes": [
            "DNNLowPResizeNearest3DOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/resize_nearest_dnnlowp_op_test.py",
        "functions": [
            "test_resize_nearest",
            "resize_nearest_ref"
        ],
        "classes": [
            "DNNLowPResizeNearestOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/sigmoid_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_sigmoid"
        ],
        "classes": [
            "DNNLowPSigmoidOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/spatial_batch_norm_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_spatial_bn_int"
        ],
        "classes": [
            "DNNLowPOpSpatialBNTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/tanh_dnnlowp_op_test.py",
        "functions": [
            "test_dnnlowp_tanh"
        ],
        "classes": [
            "DNNLowPTanhOpTest"
        ]
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/utils.py",
        "functions": [
            "pairwise",
            "blob_uses",
            "fuse_first_bn",
            "fuse_bn",
            "fuse_first_scale",
            "fuse_scale",
            "fuse_first_relu",
            "fuse_relu",
            "last_producer",
            "swap_first_concat_relu",
            "swap_concat_relu",
            "add_version_to_conv_bias",
            "add_quantization_param_args_",
            "choose_quantization_params",
            "add_quantization_param_args",
            "create_int8_given_tensor_fill",
            "create_int8_bias_tensor_fill"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/caffe2/quantization/server/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/ensure-consistency.py",
        "functions": [
            "check_consistency"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/generate_config_yml.py",
        "functions": [
            "horizontal_rule",
            "gen_build_workflows_tree",
            "stitch_sources",
            "__init__",
            "write",
            "write",
            "write",
            "__init__",
            "write"
        ],
        "classes": [
            "File",
            "FunctionGen",
            "Treegen",
            "Listgen",
            "Header"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/binary_build_data.py",
        "functions": [
            "get_processor_arch_name",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__",
            "get_children",
            "__init__"
        ],
        "classes": [
            "TopLevelNode",
            "OSConfigNode",
            "PackageFormatConfigNode",
            "LinuxGccConfigNode",
            "WindowsLibtorchConfigNode",
            "ArchConfigNode",
            "PyVersionConfigNode",
            "LinkingVariantConfigNode",
            "DependencyInclusionConfigNode"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/binary_build_definitions.py",
        "functions": [
            "get_root",
            "gen_build_env_list",
            "predicate_exclude_macos",
            "get_nightly_uploads",
            "get_post_upload_jobs",
            "get_nightly_tests",
            "get_jobs",
            "get_binary_build_jobs",
            "get_binary_smoke_test_jobs",
            "__init__",
            "gen_build_env_parms",
            "gen_docker_image",
            "get_name_prefix",
            "gen_build_name",
            "gen_workflow_job",
            "gen_upload_job"
        ],
        "classes": [
            "Conf"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/dimensions.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/pytorch_build_data.py",
        "functions": [
            "get_major_pyver",
            "__init__",
            "modify_label",
            "init2",
            "get_children",
            "__init__",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "get_children",
            "modify_label",
            "init2",
            "child_constructor",
            "modify_label",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor",
            "init2",
            "child_constructor"
        ],
        "classes": [
            "TreeConfigNode",
            "TopLevelNode",
            "DistroConfigNode",
            "PyVerConfigNode",
            "ExperimentalFeatureConfigNode",
            "PureTorchConfigNode",
            "XlaConfigNode",
            "AsanConfigNode",
            "ONNXConfigNode",
            "VulkanConfigNode",
            "ParallelTBBConfigNode",
            "ParallelNativeConfigNode",
            "LibTorchConfigNode",
            "CudaGccOverrideConfigNode",
            "BuildOnlyConfigNode",
            "ShardTestConfigNode",
            "CoverageConfigNode",
            "ImportantConfigNode",
            "XenialCompilerConfigNode",
            "BionicCompilerConfigNode",
            "XenialCompilerVersionConfigNode",
            "BionicCompilerVersionConfigNode"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/pytorch_build_definitions.py",
        "functions": [
            "gen_dependent_configs",
            "gen_docs_configs",
            "get_root",
            "gen_tree",
            "instantiate_configs",
            "get_workflow_jobs",
            "is_test_phase",
            "get_parms",
            "gen_docker_image_path",
            "gen_docker_image_requires",
            "get_build_job_name_pieces",
            "gen_build_name",
            "get_dependents",
            "gen_workflow_params",
            "gen_workflow_job",
            "__init__",
            "gen_workflow_job",
            "gen_build_name",
            "__init__",
            "gen_workflow_job"
        ],
        "classes": [
            "Conf",
            "HiddenConf",
            "DocPushConf"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/windows_build_definitions.py",
        "functions": [
            "FalsePred",
            "TruePred",
            "get_windows_workflows",
            "__init__",
            "gen_tree",
            "__init__",
            "get_elements",
            "get_product",
            "dotted_version",
            "prefixed_year",
            "render"
        ],
        "classes": [
            "WindowsJob",
            "VcSpec"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/anaconda_prune_defintions.py",
        "functions": [
            "gen_workflow_job",
            "get_workflow_jobs"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/android_definitions.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "gen_tree",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "AndroidJob",
            "AndroidGradleJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/bazel_definitions.py",
        "functions": [
            "gen_job_name",
            "get_workflow_jobs",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "BazelJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/binary_smoketest.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "SmoketestJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/docker_definitions.py",
        "functions": [
            "get_workflow_jobs"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/ge_config_tests.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "get_all_parts",
            "gen_tree"
        ],
        "classes": [
            "GeConfigTestJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/ios_definitions.py",
        "functions": [
            "get_platform",
            "get_workflow_jobs",
            "__init__",
            "render",
            "__init__",
            "gen_name_parts",
            "gen_job_name",
            "gen_tree"
        ],
        "classes": [
            "ArchVariant",
            "IOSJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/macos_definitions.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "MacOsJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/mobile_definitions.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "MobileJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/nightly_android.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "gen_tree"
        ],
        "classes": [
            "AndroidNightlyJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/nightly_ios.py",
        "functions": [
            "get_workflow_jobs",
            "__init__",
            "get_phase_name",
            "get_common_name_pieces",
            "gen_job_name",
            "gen_tree"
        ],
        "classes": [
            "IOSNightlyJob"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/util/branch_filters.py",
        "functions": [
            "gen_filter_dict"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/util/docker_constants.py",
        "functions": [
            "gen_docker_image",
            "gen_docker_image_requires",
            "gen_mobile_docker"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/util/versions.py",
        "functions": [
            "__init__",
            "prefixed_parts",
            "render_dots",
            "render_dots_or_parts",
            "__init__",
            "__str__"
        ],
        "classes": [
            "MultiPartVersion",
            "CudaVersion"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/data/simple/util/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/lib/conf_tree.py",
        "functions": [
            "X",
            "XImportant",
            "dfs_recurse",
            "dfs",
            "__str__",
            "get_label",
            "get_children",
            "get_parents",
            "get_depth",
            "get_node_key",
            "find_prop",
            "leaf_callback"
        ],
        "classes": [
            "Ver",
            "ConfigNode"
        ]
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/lib/miniutils.py",
        "functions": [
            "quote",
            "sandwich",
            "override"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/lib/miniyaml.py",
        "functions": [
            "is_dict",
            "is_collection",
            "render"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/cimodel/lib/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/codegen_validation/normalize_yaml_fragment.py",
        "functions": [
            "regurgitate"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/ecr_gc_docker/docker_hub.py",
        "functions": [
            "build_access_token",
            "list_repos",
            "list_tags",
            "save_to_s3"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/ecr_gc_docker/gc.py",
        "functions": [
            "save_to_s3",
            "repos",
            "images",
            "chunks",
            "looks_like_git_sha"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.circleci/scripts/upload_binary_size_to_scuba.py",
        "functions": [
            "get_size",
            "build_message",
            "send_message",
            "report_android_sizes",
            "gen_sizes",
            "gen_messages"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/.jenkins/pytorch/print_sccache_log.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.jenkins/pytorch/perf_test/compare_with_baseline.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.jenkins/pytorch/perf_test/get_stats.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.jenkins/pytorch/perf_test/update_commit_hash.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/.jenkins/pytorch/win-test-helpers/run_python_nn_smoketests.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/android/pytorch_android/generate_test_torchscripts.py",
        "functions": [
            "scriptAndSave",
            "__init__",
            "forward",
            "eqBool",
            "eqInt",
            "eqFloat",
            "eqStr",
            "eqTensor",
            "eqDictStrKeyIntValue",
            "eqDictIntKeyIntValue",
            "eqDictFloatKeyIntValue",
            "listIntSumReturnTuple",
            "listBoolConjunction",
            "listBoolDisjunction",
            "tupleIntSumReturnTuple",
            "optionalIntIsNone",
            "intEq0None",
            "str3Concat",
            "newEmptyShapeWithItem",
            "testAliasWithOffset",
            "testNonContiguous",
            "conv2d",
            "contiguous",
            "contiguousChannelsLast",
            "contiguousChannelsLast3d"
        ],
        "classes": [
            "Test"
        ]
    },
    {
        "file_path": "../pytorch/android/test_app/make_assets.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/android/test_app/make_assets_custom.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/function_wrapper.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/gen_vulkan_glsl.py",
        "functions": [
            "findAllGlsls",
            "getName",
            "genCppH",
            "parse_arg_env",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/gen_vulkan_spv.py",
        "functions": [
            "getName",
            "genCppH",
            "parse_arg_env",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/configure.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/generate-wrapper.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/deps/clog/configure.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/dummy.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8avgpool/mp8x9p8q-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8avgpool/up8x9-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8avgpool/up8xm-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8conv/4x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8conv/8x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8dwconv/mp8x25-neon-per-channel.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8dwconv/mp8x25-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8dwconv/up8x9-neon-per-channel.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8dwconv/up8x9-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gavgpool/mp8x7p7q-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gavgpool/up8x7-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gavgpool/up8xm-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/4x-sumrows-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/4x8-dq-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/4x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/4x8c2-xzp-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/6x4-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8gemm/8x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/q8vadd/neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/requantization/fp32-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/requantization/gemmlowp-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/requantization/precise-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/requantization/q31-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/sgemm/5x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/sgemm/6x8-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/u8clamp/neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/u8maxpool/16x9p8q-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/u8maxpool/sub16-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/u8rmax/neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/x8zip/x2-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/x8zip/x3-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/x8zip/x4-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/native/quantized/cpu/qnnpack/wrappers/x8zip/xm-neon.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/aten/src/ATen/nnapi/codegen.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/compare-fastrnn-results.py",
        "functions": [
            "construct_name",
            "get_times"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/upload_scribe.py",
        "functions": [
            "__init__",
            "format_message",
            "_upload_intern",
            "upload",
            "__init__",
            "post_pytest_benchmarks"
        ],
        "classes": [
            "ScribeUploader",
            "PytorchBenchmarkUploader"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/cpp/tensorexpr/bench_ops.py",
        "functions": [
            "hardswish"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/ddp/benchmark.py",
        "functions": [
            "allgather_object",
            "allgather_run",
            "allequal",
            "benchmark_process_group",
            "run_benchmark",
            "sweep",
            "main",
            "append_benchmark",
            "local_print",
            "print_header",
            "print_measurements",
            "__init__",
            "__str__",
            "create_model",
            "generate_inputs",
            "generate_target",
            "__init__",
            "__str__",
            "create_model",
            "generate_inputs",
            "generate_target"
        ],
        "classes": [
            "Benchmark",
            "TorchvisionBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/ddp/diff.py",
        "functions": [
            "load",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/pipeline/benchmark_dataset.py",
        "functions": [
            "collate_sentences_lm",
            "__init__",
            "__getitem__",
            "__len__"
        ],
        "classes": [
            "BenchmarkLMDataset"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/pipeline/pipe.py",
        "functions": [
            "sizeof_fmt",
            "init_random_seed",
            "make_model",
            "train",
            "generate_balance",
            "make_model_and_data",
            "bench_single_process",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "_generate_square_subsequent_mask",
            "forward",
            "__init__",
            "__init__",
            "make_adam",
            "get_first_device",
            "get_last_device"
        ],
        "classes": [
            "EmbeddingLayer",
            "PositionalEncodingLayer",
            "TransformerDecoderLayer",
            "LinearLayer",
            "TransformerLMSequential"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/rpc/rl/agent.py",
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "reset_metrics",
            "set_world",
            "select_action_batch",
            "select_action_non_batch",
            "finish_episode"
        ],
        "classes": [
            "Policy",
            "AgentBase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/rpc/rl/coordinator.py",
        "functions": [
            "__init__",
            "run_coordinator"
        ],
        "classes": [
            "CoordinatorBase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/rpc/rl/launcher.py",
        "functions": [
            "str2bool",
            "run_worker",
            "find_graph_variable",
            "append_spaces",
            "print_benchmark_results",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/distributed/rpc/rl/observer.py",
        "functions": [
            "__init__",
            "set_state",
            "reset",
            "step",
            "run_ob_episode"
        ],
        "classes": [
            "ObserverBase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/bench.py",
        "functions": [
            "fit_str",
            "to_str",
            "print_header",
            "pretty_print",
            "trainbench",
            "print_stderr",
            "print_json_oss_format",
            "print_json_pep_format",
            "bench",
            "bench_group",
            "__init__",
            "record",
            "elapsed_time",
            "train_batch"
        ],
        "classes": [
            "Event"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/cells.py",
        "functions": [
            "milstm_cell",
            "lstm_cell",
            "flat_lstm_cell",
            "premul_lstm_cell",
            "premul_lstm_cell_no_bias",
            "gru_cell",
            "rnn_relu_cell",
            "rnn_tanh_cell"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/conftest.py",
        "functions": [
            "pytest_generate_tests",
            "pytest_addoption"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/custom_lstms.py",
        "functions": [
            "script_lstm",
            "script_lnlstm",
            "reverse",
            "init_stacked_lstm",
            "flatten_states",
            "double_flatten_states",
            "test_script_rnn_layer",
            "test_script_stacked_rnn",
            "test_script_stacked_bidir_rnn",
            "test_script_stacked_lstm_dropout",
            "test_script_stacked_lnlstm",
            "__init__",
            "forward",
            "__init__",
            "compute_layernorm_stats",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "LSTMCell",
            "LayerNorm",
            "LayerNormLSTMCell",
            "LSTMLayer",
            "ReverseLSTMLayer",
            "BidirLSTMLayer",
            "StackedLSTM",
            "StackedLSTM2",
            "StackedLSTMWithDropout"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/factory.py",
        "functions": [
            "flatten_list",
            "lstm_backward_setup",
            "simple_backward_setup",
            "simple_backward",
            "pytorch_lstm_creator",
            "lstm_creator",
            "lnlstm_creator",
            "dropoutlstm_creator",
            "lstm_premul_creator",
            "lstm_premul_bias_creator",
            "lstm_simple_creator",
            "lstm_multilayer_creator",
            "imagenet_cnn_creator",
            "varlen_lstm_inputs",
            "varlen_lstm_backward_setup",
            "varlen_pytorch_lstm_creator",
            "varlen_lstm_factory",
            "varlen_lstm_creator",
            "layernorm_pytorch_lstm_creator",
            "stack_weights",
            "lstm_inputs",
            "lstm_factory",
            "lstm_factory_premul",
            "lstm_factory_premul_bias",
            "lstm_factory_simple",
            "lstm_factory_multilayer",
            "creator",
            "forward",
            "dynamic_rnn",
            "forward",
            "unzip_columns",
            "dynamic_rnn",
            "dynamic_rnn",
            "dynamic_rnn",
            "dynamic_rnn",
            "dynamic_rnn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/fuser.py",
        "functions": [
            "set_fuser"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/profile.py",
        "functions": [
            "run_rnn",
            "profile",
            "system",
            "describe_sizes",
            "nvprof_output_filename",
            "nvprof",
            "full_profile",
            "run_iter"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/runner.py",
        "functions": [
            "get_nn_runners",
            "__enter__",
            "__exit__",
            "__enter__",
            "__exit__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "DisableCuDNN",
            "DummyContext",
            "AssertNoJIT"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/scratch.py",
        "functions": [
            "fn",
            "recurrent",
            "recurrent_scaleshift"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/test.py",
        "functions": [
            "barf",
            "assertEqual",
            "filter_requires_grad",
            "test_rnns",
            "test_vl_py"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/test_bench.py",
        "functions": [
            "modeldef",
            "cuda_sync",
            "test_forward",
            "test_backward"
        ],
        "classes": [
            "TestBenchNetwork"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/fastrnns/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/framework_overhead_benchmark/C2Module.py",
        "functions": [
            "add_blob",
            "__init__",
            "forward"
        ],
        "classes": [
            "C2SimpleNet"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/framework_overhead_benchmark/framework_overhead_benchmark.py",
        "functions": [
            "parse_op_args",
            "print_results",
            "benchmark_simple_fn",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/framework_overhead_benchmark/pt_wrapper_module.py",
        "functions": [
            "__init__",
            "forward"
        ],
        "classes": [
            "WrapperModule"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/framework_overhead_benchmark/SimpleAddModule.py",
        "functions": [
            "add_tensors_loop",
            "__init__",
            "forward"
        ],
        "classes": [
            "SimpleAddModule"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/framework_overhead_benchmark/utils.py",
        "functions": [
            "ms_to_us",
            "secs_to_us",
            "secs_to_ms",
            "benchmark_using_throughput_benchmark",
            "benchmark_module"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/audio_text_models.py",
        "functions": [
            "get_wav2letter",
            "get_deepspeech",
            "get_transformer",
            "get_multiheadattn",
            "forward",
            "forward",
            "forward",
            "forward"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/compare.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/functional_autograd_benchmark.py",
        "functions": [
            "get_v_for",
            "run_once",
            "run_model",
            "main",
            "noop"
        ],
        "classes": [
            "ModelDef"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/ppl_models.py",
        "functions": [
            "get_simple_regression",
            "get_robust_regression",
            "forward",
            "forward"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/torchaudio_models.py",
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__repr__",
            "__init__",
            "forward",
            "forward",
            "__init__",
            "flatten_parameters",
            "forward",
            "__init__",
            "forward",
            "__repr__",
            "__init__",
            "forward",
            "get_seq_lens",
            "__init__",
            "forward",
            "__init__",
            "_generate_square_subsequent_mask",
            "init_weights",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "Wav2Letter",
            "SequenceWise",
            "MaskConv",
            "InferenceBatchSoftmax",
            "BatchRNN",
            "Lookahead",
            "DeepSpeech",
            "PositionalEncoding",
            "TransformerModel",
            "MultiheadAttentionContainer",
            "ScaledDotProduct",
            "InProjContainer"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/torchvision_models.py",
        "functions": [
            "conv3x3",
            "conv1x1",
            "_resnet",
            "resnet18",
            "resnet50",
            "_segm_resnet",
            "_load_model",
            "fcn_resnet50",
            "generalized_box_iou",
            "box_cxcywh_to_xyxy",
            "box_area",
            "box_iou",
            "is_dist_avail_and_initialized",
            "get_world_size",
            "accuracy",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "_make_layer",
            "_forward_impl",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "loss_labels",
            "loss_cardinality",
            "loss_boxes",
            "loss_masks",
            "_get_src_permutation_idx",
            "_get_tgt_permutation_idx",
            "get_loss",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "BasicBlock",
            "Bottleneck",
            "ResNet",
            "IntermediateLayerGetter",
            "_SimpleSegmentationModel",
            "FCN",
            "FCNHead",
            "DETR",
            "SetCriterion",
            "HungarianMatcher"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/utils.py",
        "functions": [
            "_del_nested_attr",
            "_set_nested_attr",
            "extract_weights",
            "load_weights",
            "to_markdown_table",
            "from_markdown_table",
            "write_line"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/functional_autograd_benchmark/vision_models.py",
        "functions": [
            "get_resnet18",
            "get_fcn_resnet",
            "get_detr",
            "forward",
            "forward",
            "forward"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_all_other_test.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_all_quantized_test.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_all_test.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_caffe2.py",
        "functions": [
            "create_caffe2_op_test_case",
            "generate_c2_test_from_ops",
            "generate_c2_test",
            "generate_c2_gradient_test",
            "__init__",
            "_set_backward_test",
            "_device_option",
            "tensor",
            "feed_tensor",
            "module_name",
            "set_module_name",
            "_value_to_str",
            "test_name",
            "extract_inputs_tuple",
            "__init__",
            "run_forward",
            "run_backward",
            "_print_per_iter"
        ],
        "classes": [
            "Caffe2BenchmarkBase",
            "Caffe2OperatorTestCase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_core.py",
        "functions": [
            "_register_test",
            "_create_test",
            "_build_test",
            "__init__",
            "_print_header",
            "_print_perf_result",
            "_predict_num_iter_needed",
            "_iteration_result_is_significant",
            "_launch_forward",
            "_launch_backward",
            "_measure_time",
            "_check_keep",
            "_check_operator_first_char",
            "_check_keep_list",
            "_keep_test",
            "_print_test_case_info",
            "run"
        ],
        "classes": [
            "BenchmarkRunner"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_pytorch.py",
        "functions": [
            "create_pytorch_op_test_case",
            "__init__",
            "_set_backward_test",
            "auto_set",
            "extract_inputs_tuple",
            "get_inputs",
            "forward_impl",
            "forward_consume",
            "module_name",
            "set_module_name",
            "test_name",
            "__init__",
            "_generate_jit_forward_graph",
            "run_jit_forward",
            "_print_per_iter",
            "run_forward",
            "_output_mean",
            "run_backward"
        ],
        "classes": [
            "TorchBenchmarkBase",
            "PyTorchOperatorTestCase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_runner.py",
        "functions": [
            "parse_args",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_test_generator.py",
        "functions": [
            "generate_pt_test",
            "generate_pt_gradient_test",
            "generate_pt_tests_from_op_list",
            "generate_pt_gradient_tests_from_op_list"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/benchmark_utils.py",
        "functions": [
            "shape_to_string",
            "str2bool",
            "numpy_random",
            "set_omp_threads",
            "set_mkl_threads",
            "cross_product",
            "get_n_rand_nums",
            "generate_configs",
            "cross_product_configs",
            "_validate",
            "config_list",
            "attr_probs",
            "random_sample_configs",
            "op_list",
            "is_caffe2_enabled",
            "is_pytorch_enabled",
            "get_operator_range",
            "process_arg_list",
            "__init__",
            "_distribution_func",
            "_random_sample",
            "get_one_set_of_inputs"
        ],
        "classes": [
            "RandomSample"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/operator_benchmark.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/add_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/batch_box_cox_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "BatchBoxCoxBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/batch_gather_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "BatchGatherBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/clip_ranges_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ClipRangesBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/concat_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ConcatBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/matmul_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "MatMulBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/quantile_op_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QuantileOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/replace_nan_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ReplaceNaNBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/c2/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/repeat_benchmark.py",
        "functions": [
            "generate_data_for_repeat",
            "pt_repeat",
            "pt_repeat_n_times"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/add_ops_list_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "UnaryOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/c2_cpu_gpu_forward_backward_test.py",
        "functions": [
            "init",
            "forward",
            "backward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/jit_forward_test.py",
        "functions": [
            "torch_sumall",
            "init",
            "jit_forward"
        ],
        "classes": [
            "TorchSumBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/pt_backward_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/pt_configs_list_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/pt_cpu_gpu_forward_backward_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/common/tests/random_sample_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/groupnorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "GroupNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qbatchnorm_test.py",
        "functions": [
            "init",
            "_init",
            "forward",
            "_init",
            "forward",
            "_init",
            "forward"
        ],
        "classes": [
            "QBatchNormBenchmark",
            "QBatchNorm1dBenchmark",
            "QBatchNorm2dBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/add_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "AddBenchmark",
            "AddmmBenchmark",
            "AddrBenchmark",
            "AddbmmBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/as_strided_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "As_stridedBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/batchnorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "BatchNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/binary_test.py",
        "functions": [
            "copy",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "BinaryOpBcastBenchmark",
            "BinaryOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/cat_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "CatBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/channel_shuffle_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ChannelSHuffleBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/chunk_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ChunkBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/clip_ranges_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ClipRangesBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/configs.py",
        "functions": [
            "remove_cuda"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/conv_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "Conv1dBenchmark",
            "ConvTranspose1dBenchmark",
            "Conv2dBenchmark",
            "ConvTranspose2dBenchmark",
            "Conv3dBenchmark",
            "ConvTranspose3dBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/diag_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "DiagBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/embeddingbag_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "EmbeddingBagBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/fill_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "Fill_Benchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/gather_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "GatherBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/hardsigmoid_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "HardsigmoidBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/hardswish_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "HardswishBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/index_select_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "IndexSelectBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/instancenorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "InstanceNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/layernorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "LayerNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/linear_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "LinearBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/matmul_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "MatMulBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/nan_to_num_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "ReplaceNaNBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/pool_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "Pool1dBenchmark",
            "Pool2dBenchmark",
            "Pool3dBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qactivation_test.py",
        "functions": [
            "_setup",
            "init",
            "forward",
            "forward"
        ],
        "classes": [
            "QActivationBenchmarkBase",
            "QActivationBenchmark",
            "QActivationScaleZeroPointBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qarithmetic_test.py",
        "functions": [
            "setup",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "_QFunctionalBinaryArithmeticBenchmarkBase",
            "QFunctionalBenchmark",
            "QFunctionalScalarBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qcat_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QCatBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qcomparators_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QComparatorBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qconv_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "QConv1dBenchmark",
            "QConv2dBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qembeddingbag_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QEmbeddingBagBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qembedding_bag_lookups_test.py",
        "functions": [
            "get_pruned_weights_and_mapping",
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "EmbedddingBag4BitRowwiseOffsetsTest",
            "EmbedddingBagByteRowwiseOffsetsTest"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qembedding_pack_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "EmbeddingBagFloatToFusedBase",
            "EmbeddingBagFusedToFloatBase"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qgroupnorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QGroupNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qinstancenorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QInstanceNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qinterpolate_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QInterpolateBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qlayernorm_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "QLayerNormBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qlinear_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "init"
        ],
        "classes": [
            "_QLinearBenchmarkBase",
            "QLinearBenchmark",
            "QDynamicLinearBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qobserver_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "QObserverBenchmark",
            "QObserverBenchmarkCalculateQparams"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qpool_test.py",
        "functions": [
            "setup",
            "forward",
            "init",
            "init",
            "init"
        ],
        "classes": [
            "_QPool2dBenchmarkBase",
            "QMaxPool2dBenchmark",
            "QAvgPool2dBenchmark",
            "QAdaptiveAvgPool2dBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qrnn_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "LSTMBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qtensor_method_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "_QMethodBenchmarkBase",
            "QMethodTensorInputCopyBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/quantization_test.py",
        "functions": [
            "fakeQuantizePerTensorPyModule",
            "fakeQuantizePerTensorLearnableKernel",
            "fakeQuantizePerTensorOriginalKernel",
            "fakeQuantizePerChannelPyModule",
            "fakeQuantizePerChannelLearnableKernel",
            "fakeQuantizePerChannelOriginalKernel",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "init",
            "forward",
            "dequant"
        ],
        "classes": [
            "QuantizePerTensorBenchmark",
            "QuantizePerChannelBenchmark",
            "FakeQuantizeBenchmark",
            "FakeQuantizePerTensorBaseOpBenchmark",
            "FakeQuantizePerChannelOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/qunary_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "QUnaryOpBenchmark",
            "QTopkOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/remainder_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "RemainderOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/softmax_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "SoftmaxBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/split_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "SplitBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/stack_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "StackBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/sum_test.py",
        "functions": [
            "init",
            "forward"
        ],
        "classes": [
            "SumBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/tensor_to_test.py",
        "functions": [
            "init",
            "forward",
            "init",
            "forward"
        ],
        "classes": [
            "FloatToHalfTensorConversionBenchmark",
            "HalfToFloatTensorConversionBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/unary_test.py",
        "functions": [
            "bernoulli_",
            "cauchy_",
            "digamma_",
            "exponential_",
            "normal_",
            "random_",
            "sign_",
            "uniform_",
            "half_",
            "long_",
            "init",
            "forward"
        ],
        "classes": [
            "UnaryOpBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt_extension/cpp_extension_test.py",
        "functions": [
            "test_jit_consume_op",
            "test_jit_consume_op_for_list_input",
            "foo",
            "foo"
        ],
        "classes": [
            "TestConsumeOp"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/operator_benchmark/pt_extension/setup.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/overrides_benchmark/bench.py",
        "functions": [
            "bench",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/overrides_benchmark/common.py",
        "functions": [
            "__init__",
            "__torch_function__",
            "__torch_function__"
        ],
        "classes": [
            "SubTensor",
            "WithTorchFunction",
            "SubWithTorchFunction"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/overrides_benchmark/pyspybench.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/profiler_benchmark/profiler_bench.py",
        "functions": [
            "loop_workload",
            "parallel_workload",
            "parallel_task",
            "payload",
            "payload"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/profiler_benchmark/resnet_memory_profiler.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/record_function_benchmark/record_function_bench.py",
        "functions": [
            "prepare_lstm_jit",
            "prepare_resnet50_jit",
            "run_bench"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/serialization/simple_measurement.py",
        "functions": [
            "benchmark"
        ],
        "classes": [
            "Basic"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/sparse/matmul_dlmc_bench.py",
        "functions": [
            "read_matrix_params",
            "load_matrix",
            "scipy_coo_matmul",
            "to_coo_scipy",
            "torch_backward",
            "sparse_torch_backward",
            "load_dataset"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/attention.py",
        "functions": [
            "__init__",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "default_configs",
            "memsize"
        ],
        "classes": [
            "BahdanauAttention"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/benchmark.py",
        "functions": [
            "cuda_pointwise_context",
            "register_benchmark_class",
            "__init__",
            "forward",
            "check",
            "config",
            "desc",
            "module",
            "memory_workload",
            "compute_workload",
            "input_iterable",
            "dtype_to_bytes",
            "default_configs",
            "is_supported",
            "rand",
            "nchw_rand",
            "compute",
            "run",
            "run_impl",
            "dump_result",
            "__init__",
            "inputs",
            "inputs",
            "compute",
            "instantiate_input",
            "run",
            "load_inputs",
            "rand_shape"
        ],
        "classes": [
            "Benchmark",
            "DynamicShape"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/broadcast.py",
        "functions": [
            "register_broadcast_ops",
            "__init__",
            "forward",
            "reference",
            "config",
            "default_configs",
            "memory_workload",
            "__init__",
            "module",
            "__init__",
            "module",
            "__init__",
            "module",
            "__init__",
            "forward",
            "reference",
            "config",
            "default_configs",
            "memory_workload",
            "module",
            "__init__",
            "_eval",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "default_configs",
            "binary_op",
            "unary_op"
        ],
        "classes": [
            "BroadcastMulBench",
            "BroadcastRowBench",
            "BroadcastMidBench",
            "BroadcastColBench",
            "BroadcastThreeArgs",
            "BroadcastBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/conv.py",
        "functions": [
            "__init__",
            "forward",
            "config",
            "memory_workload",
            "compute_workload",
            "default_configs",
            "__init__",
            "module",
            "__init__",
            "module"
        ],
        "classes": [
            "ConvImplBench",
            "ConvBench",
            "DepthwiseConvBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/elementwise.py",
        "functions": [
            "register_element_ops",
            "__init__",
            "_eval",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "default_configs",
            "__init__",
            "forward",
            "reference",
            "config",
            "input_iterable",
            "module",
            "memory_workload",
            "default_configs",
            "__init__",
            "module",
            "instantiate_input",
            "binary_op",
            "unary_op"
        ],
        "classes": [
            "ElementBench",
            "SimpleElementBench",
            "DynamicSimpleElementBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/matmul.py",
        "functions": [
            "__init__",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "compute_workload",
            "default_configs"
        ],
        "classes": [
            "MatMulBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/microbenchmarks.py",
        "functions": [
            "gen_unary_nnc_fun",
            "gen_unary_torch_fun",
            "gen_binary_nnc_fun",
            "gen_binary_torch_fun",
            "gen_int_comparison_tensors",
            "gen_float_comparison_tensors",
            "nnc_relu",
            "pt_relu",
            "gen_custom_torch_fun",
            "normalize_benchmarks",
            "run_benchmarks",
            "dump_plot",
            "__enter__",
            "__exit__",
            "nnc_fun",
            "torch_fun",
            "nnc_fun",
            "pt_fun",
            "f",
            "pt_fun",
            "compute",
            "fun",
            "compute",
            "fun",
            "fun",
            "get_nnc_type",
            "check_correctness"
        ],
        "classes": [
            "kernel_arena_scope"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/normalization.py",
        "functions": [
            "__init__",
            "config",
            "memory_workload",
            "default_configs",
            "forward",
            "module",
            "forward",
            "module",
            "is_supported",
            "forward",
            "module"
        ],
        "classes": [
            "NormalizationBench",
            "BatchNormBench",
            "InstanceNormBench",
            "LayerNormBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/pooling.py",
        "functions": [
            "__init__",
            "forward",
            "config",
            "memory_workload",
            "default_configs",
            "__init__",
            "module",
            "__init__",
            "module"
        ],
        "classes": [
            "PoolingBench",
            "MaxPoolBench",
            "AvgPoolBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/pt_engine.py",
        "functions": [
            "rand",
            "randn",
            "nchw_rand",
            "reset",
            "rand_like",
            "numpy",
            "mul",
            "add",
            "batch_norm",
            "instance_norm",
            "layer_norm",
            "sync_cuda",
            "backward",
            "sum",
            "softmax",
            "max_pool2d",
            "avg_pool2d",
            "conv2d_layer",
            "matmul",
            "to_device"
        ],
        "classes": [
            "TorchTensorEngine"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/reduction.py",
        "functions": [
            "__init__",
            "forward",
            "config",
            "default_configs",
            "module",
            "memory_workload",
            "_set_skip_input_transform",
            "_skip_input_transform_str",
            "__init__",
            "module",
            "__init__",
            "module",
            "__init__",
            "module",
            "__init__",
            "config",
            "default_configs",
            "module",
            "__init__",
            "forward",
            "config",
            "default_configs",
            "module",
            "input_iterable",
            "memory_workload",
            "__init__",
            "default_configs",
            "config",
            "module",
            "__init__",
            "default_configs",
            "config",
            "module",
            "__init__",
            "instantiate_input",
            "module",
            "__init__",
            "default_configs",
            "config",
            "module",
            "__init__",
            "default_configs",
            "config",
            "module"
        ],
        "classes": [
            "ReduceBench",
            "ReduceRowBench",
            "ReduceMidBench",
            "ReduceColBench",
            "ReduceFullBench",
            "Reduce2DBench",
            "Reduce2DInnerBench",
            "Reduce2DOuterBench",
            "DynamicReduce2DBench",
            "DynamicReduce2DInnerBench",
            "DynamicReduce2DOuterBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/rnn_eltwise.py",
        "functions": [
            "__init__",
            "forward",
            "config",
            "module",
            "memory_workload",
            "default_configs",
            "__init__",
            "instantiate_input",
            "module",
            "memsize"
        ],
        "classes": [
            "RNNEltwise",
            "DynamicLSTM"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/softmax.py",
        "functions": [
            "__init__",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "default_configs"
        ],
        "classes": [
            "SoftmaxBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/swish.py",
        "functions": [
            "__init__",
            "forward",
            "reference",
            "config",
            "module",
            "memory_workload",
            "default_configs"
        ],
        "classes": [
            "SwishBench"
        ]
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/tensor_engine.py",
        "functions": [
            "unsupported",
            "is_supported",
            "set_engine_mode",
            "get_engine",
            "wrapper"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/benchmarks/tensorexpr/__main__.py",
        "functions": [
            "main",
            "set_global_threads",
            "run_default_configs",
            "run_with_input_iter"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/binaries/bench_gen/bench_gen.py",
        "functions": [
            "parse_kwarg",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/docs/caffe2/process.py",
        "functions": [
            "insert"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/docs/cpp/source/conf.py",
        "functions": [
            "setup"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/docs/source/conf.py",
        "functions": [
            "setup",
            "replace",
            "patched_make_field",
            "visit_reference",
            "handle_item"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/docs/source/scripts/build_activation_images.py",
        "functions": [
            "plot_function"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/ios/TestApp/benchmark/trace_model.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/ios/TestApp/custom_build/custom_build.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/modules/detectron/upsample_nearest_op_test.py",
        "functions": [
            "test_upsample_nearest_op",
            "ref"
        ],
        "classes": [
            "TestUpsampleNearestOp"
        ]
    },
    {
        "file_path": "../pytorch/scripts/diagnose_protobuf.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/scripts/get_python_cmake_flags.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/scripts/model_zoo/update-caffe2-models.py",
        "functions": [
            "download_models",
            "generate_models",
            "upload_models",
            "cleanup",
            "_download",
            "_caffe2_model_dir",
            "_onnx_model_dir",
            "_prepare_model_data"
        ],
        "classes": [
            "SomeClass"
        ]
    },
    {
        "file_path": "../pytorch/scripts/model_zoo/update-models-from-caffe2.py",
        "functions": [
            "upload_onnx_model",
            "download_onnx_model",
            "download_caffe2_model",
            "caffe2_to_onnx",
            "tensortype_to_ndarray",
            "generate_test_input_data",
            "generate_test_output_data",
            "onnx_verify"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/scripts/release_notes/categorize.py",
        "functions": [
            "main",
            "__init__",
            "categorize",
            "features",
            "potential_reverts_of",
            "handle_commit",
            "update_commit"
        ],
        "classes": [
            "Categorizer"
        ]
    },
    {
        "file_path": "../pytorch/scripts/release_notes/commitlist.py",
        "functions": [
            "create_new",
            "update_existing",
            "to_markdown",
            "main",
            "__init__",
            "__eq__",
            "__repr__",
            "__init__",
            "from_existing",
            "create_new",
            "read_from_disk",
            "write_to_disk",
            "get_commits_between",
            "filter",
            "update_to",
            "stat",
            "cleanup_title"
        ],
        "classes": [
            "Commit",
            "CommitList"
        ]
    },
    {
        "file_path": "../pytorch/scripts/release_notes/common.py",
        "functions": [
            "dict_to_features",
            "features_to_dict",
            "run",
            "commit_body",
            "commit_title",
            "commit_files_changed",
            "parse_pr_number",
            "get_ghstack_token",
            "run_query",
            "gh_labels",
            "get_features",
            "__init__",
            "get",
            "read_from_disk",
            "write_to_disk"
        ],
        "classes": [
            "CommitDataCache"
        ]
    },
    {
        "file_path": "../pytorch/scripts/release_notes/namespace_check.py",
        "functions": [
            "get_content",
            "namespace_filter",
            "run",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/scripts/release_notes/test_release_notes.py",
        "functions": [
            "test_create_new",
            "test_read_write",
            "test_update_to"
        ],
        "classes": [
            "TestCommitList"
        ]
    },
    {
        "file_path": "../pytorch/third_party/build_bundled.py",
        "functions": [
            "collect_license",
            "create_bundled",
            "identify_license",
            "squeeze"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/build_libtorch.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/build_pytorch_libs.py",
        "functions": [
            "_overlay_windows_vcvars",
            "_create_build_env",
            "build_caffe2"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/clang_format_all.py",
        "functions": [
            "get_allowlisted_files",
            "parse_args",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/clang_format_utils.py",
        "functions": [
            "compute_file_sha1",
            "report_download_progress",
            "download_clang_format",
            "get_and_check_clang_format"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/clang_tidy.py",
        "functions": [
            "run_shell_command",
            "split_negative_from_positive_patterns",
            "get_file_patterns",
            "filter_files",
            "get_changed_files",
            "get_all_files",
            "get_changed_lines",
            "run_shell_commands_in_parallel",
            "run_clang_tidy",
            "parse_options",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/download_mnist.py",
        "functions": [
            "report_download_progress",
            "download",
            "unzip",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/flake8_hook.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/generate_torch_version.py",
        "functions": [
            "get_sha",
            "get_torch_version"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/nightly.py",
        "functions": [
            "logging_base_dir",
            "logging_run_dir",
            "logging_record_argv",
            "logging_record_exception",
            "logging_rotate",
            "logging_manager",
            "check_in_repo",
            "check_branch",
            "timer",
            "timed",
            "_make_channel_args",
            "conda_solve",
            "deps_install",
            "pytorch_install",
            "_site_packages",
            "_ensure_commit",
            "_nightly_version",
            "checkout_nightly_version",
            "pull_nightly_version",
            "_get_listing_linux",
            "_get_listing_osx",
            "_get_listing_win",
            "_glob_pyis",
            "_find_missing_pyi",
            "_get_listing",
            "_remove_existing",
            "_move_single",
            "_copy_files",
            "_link_files",
            "move_nightly_files",
            "_available_envs",
            "write_pth",
            "install",
            "make_parser",
            "main",
            "__init__",
            "_filter",
            "formatMessage",
            "format",
            "redact",
            "dec",
            "wrapper"
        ],
        "classes": [
            "Formatter"
        ]
    },
    {
        "file_path": "../pytorch/tools/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/amd_build/build_amd.py",
        "functions": [
            "is_hip_clang"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_annotated_fn_args.py",
        "functions": [
            "gen_annotated",
            "gen_annotated_args",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_autograd.py",
        "functions": [
            "gen_autograd",
            "gen_autograd_python",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_autograd_functions.py",
        "functions": [
            "gen_autograd_functions_lib",
            "gen_autograd_functions_python",
            "gen_autograd_functions",
            "process_function",
            "uses_ident",
            "uses_retain_variables",
            "uses_single_grad",
            "save_var",
            "emit_derivative"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_python_functions.py",
        "functions": [
            "should_generate_py_binding",
            "get_pycname",
            "is_noarg",
            "is_py_variable_method",
            "is_py_torch_function",
            "is_py_nn_function",
            "is_py_fft_function",
            "is_py_linalg_function",
            "gen",
            "create_python_bindings",
            "load_signatures",
            "load_deprecated_signatures",
            "gen_namedtuple_typename_key",
            "emit_namedtuple_typedefs",
            "method_impl",
            "gen_has_torch_function_check",
            "emit_dispatch_case",
            "forward_decls",
            "method_def",
            "group_overloads",
            "sort_overloads",
            "emit_single_dispatch",
            "gen_signature_pairs",
            "signature_original",
            "signature_deprecated",
            "is_arg_smaller",
            "is_smaller",
            "go"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_trace_type.py",
        "functions": [
            "should_trace",
            "format_trace_op_name",
            "format_trace_inputs",
            "format_prerecord_trace",
            "format_postrecord_trace",
            "declare_returned_variables",
            "tie_return_values",
            "get_return_value",
            "emit_trace_body",
            "type_wrapper_name",
            "method_definition",
            "method_registration",
            "gen_trace_type_shard",
            "gen_trace_type",
            "dispatch_trace_input"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_variable_factories.py",
        "functions": [
            "fully_qualified_type",
            "gen_variable_factories",
            "process_function",
            "maybe_optional_type"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/gen_variable_type.py",
        "functions": [
            "gen_variable_type",
            "gen_formals",
            "gen_wrapper_registration",
            "gen_variable_type_shard",
            "emit_body",
            "unpack_args",
            "dispatch_strategy",
            "is_tensor_type",
            "is_tensor_list_type",
            "modifies_arguments",
            "match_differentiability_info",
            "is_differentiable",
            "gen_differentiable_input",
            "gen_differentiable_inputs",
            "find_args_with_derivatives",
            "gen_differentiable_outputs",
            "emit_save_inputs",
            "setup_derivative",
            "emit_check_if_in_complex_autograd_allowlist",
            "emit_check_no_requires_grad",
            "save_variables",
            "emit_dispatch_call",
            "emit_view_lambda",
            "wrap_output",
            "enforce_same_tensorimpl_and_storage",
            "emit_call",
            "emit_history",
            "emit_save_outputs",
            "emit_any_requires_grad",
            "emit_check_inplace",
            "emit_increment_version",
            "find_info",
            "guard_for"
        ],
        "classes": [
            "NativeFunctionWithDifferentiabilityInfo"
        ]
    },
    {
        "file_path": "../pytorch/tools/autograd/load_derivatives.py",
        "functions": [
            "load_derivatives",
            "cpp_arguments",
            "create_derivative",
            "create_differentiability_info",
            "used_gradient_indices",
            "saved_variables",
            "create_op_name",
            "create_op_names",
            "dedup_vars",
            "canonical_function",
            "split_names",
            "check_grad_usage",
            "set_up_derivatives",
            "stride_expr",
            "repl"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/autograd/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/code_template.py",
        "functions": [
            "from_file",
            "__init__",
            "substitute",
            "lookup",
            "indent_lines",
            "replace"
        ],
        "classes": [
            "CodeTemplate"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/context.py",
        "functions": [
            "native_function_manager",
            "with_native_function",
            "method_with_native_function",
            "wrapper",
            "wrapper"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/gen.py",
        "functions": [
            "parse_native_yaml",
            "cpp_string",
            "compute_aten_op",
            "compute_native_function_declaration",
            "compute_meta_function_declaration",
            "dict_representer",
            "format_yaml",
            "pythonify_default",
            "dynamic_type",
            "compute_method_of_yaml",
            "compute_returns_yaml",
            "compute_cpp_argument_yaml",
            "compute_argument_yaml",
            "compute_declaration_yaml",
            "compute_registration_declarations",
            "_read_template",
            "get_custom_build_selector",
            "main",
            "construct_mapping",
            "__call__",
            "__call__",
            "__call__",
            "__call__",
            "__init__",
            "_write_if_changed",
            "write_with_template",
            "write",
            "write_outputs",
            "flatten_pre_group",
            "make_file_manager",
            "generate_defn",
            "generate_defn"
        ],
        "classes": [
            "LineLoader",
            "RegisterSchema",
            "ComputeFunction",
            "ComputeTensorMethod",
            "ComputeBackendSelect",
            "FileManager"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/local.py",
        "functions": [
            "use_c10_dispatcher",
            "parametrize"
        ],
        "classes": [
            "Locals"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/model.py",
        "functions": [
            "assert_never",
            "is_generic_dispatch_key",
            "is_cuda_dispatch_key",
            "is_structured_dispatch_key",
            "parse_returns",
            "__str__",
            "__str__",
            "lower",
            "parse",
            "is_abstract",
            "from_yaml",
            "validate_unstructured",
            "__post_init__",
            "__post_init__",
            "signature",
            "functions",
            "from_dict",
            "schema_order_arguments",
            "parse",
            "__post_init__",
            "is_out_fn",
            "kind",
            "signature",
            "__str__",
            "parse",
            "__str__",
            "parse",
            "_parse",
            "__str__",
            "is_tensor_like",
            "is_nullable",
            "is_list_like",
            "__str__",
            "is_tensor_like",
            "is_nullable",
            "is_list_like",
            "__str__",
            "is_tensor_like",
            "is_nullable",
            "is_list_like",
            "__str__",
            "is_tensor_like",
            "is_nullable",
            "is_list_like",
            "parse",
            "is_write",
            "__str__",
            "parse",
            "is_write",
            "__str__",
            "all",
            "flat_non_out",
            "flat_positional",
            "flat_kwarg_only",
            "non_out",
            "positional",
            "kwarg_only",
            "signature",
            "_preparse",
            "parse",
            "__str__",
            "__post_init__",
            "parse",
            "__str__",
            "parse",
            "__str__",
            "strip_ret_annotation",
            "strip_arg_annotation",
            "pred"
        ],
        "classes": [
            "Location",
            "DispatchKey",
            "UseC10Dispatcher",
            "NativeFunction",
            "StructuredNativeFunctions",
            "FunctionSchema",
            "Annotation",
            "Type",
            "BaseType",
            "OptionalType",
            "ListType",
            "Argument",
            "Return",
            "SelfArgument",
            "TensorOptionsArguments",
            "Arguments",
            "BaseOperatorName",
            "OperatorName"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/utils.py",
        "functions": [
            "split_name_params",
            "mapMaybe",
            "concatMap",
            "context"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/autograd.py",
        "functions": [
            "has_derivatives"
        ],
        "classes": [
            "SavedAttribute",
            "Derivative",
            "DifferentiabilityInfo",
            "DifferentiableInput",
            "DifferentiableOutput"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/api/cpp.py",
        "functions": [
            "name",
            "valuetype_type",
            "argumenttype_type",
            "argument_type",
            "returntype_type",
            "return_type",
            "returns_type",
            "return_names",
            "default_expr",
            "argument",
            "arguments",
            "sub_argument"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/dispatcher.py",
        "functions": [
            "name",
            "argumenttype_type",
            "argument_type",
            "returns_type",
            "argument",
            "arguments"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/meta.py",
        "functions": [
            "name"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/native.py",
        "functions": [
            "name",
            "argumenttype_type",
            "returns_type",
            "argument_type",
            "argument",
            "arguments"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/python.py",
        "functions": [
            "_cpp_signature",
            "has_tensor_options",
            "argument_type_str",
            "argument_type_size",
            "argument",
            "signature",
            "_dtype_default_type_hack",
            "namedtuple_fieldnames",
            "argument_type_str_pyi",
            "dispatch_lambda_args",
            "dispatch_lambda_return_str",
            "cpp_dispatch_target",
            "cpp_dispatch_exprs",
            "arg_parser_unpack_method",
            "arg_parser_output_expr",
            "arg_parser_output_exprs",
            "dispatch_lambda_exprs",
            "named_tuple_pyi",
            "returns_str_pyi",
            "argument_str",
            "argument_str_pyi",
            "from_outputs",
            "deprecated",
            "arguments",
            "arguments_count",
            "output_idx",
            "signature_str",
            "signature_str_pyi",
            "signature_str_pyi_vararg",
            "deprecated",
            "signature_str",
            "signature_str_pyi",
            "signature_str_pyi_vararg",
            "is_none_expr",
            "dispatch_lambda_arg"
        ],
        "classes": [
            "PythonReturns",
            "PythonArgument",
            "PythonOutArgument",
            "PythonSignature",
            "PythonSignatureDeprecated",
            "PythonSignatureNativeFunctionPair",
            "PythonSignatureGroup",
            "DispatchLambdaArgument",
            "PythonArgParserOutputExpr",
            "DispatchLambdaArgumentExprs"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/api/structured.py",
        "functions": [
            "argumenttype_type",
            "argument_type",
            "argument",
            "impl_arguments",
            "meta_arguments",
            "out_arguments"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/api/translate.py",
        "functions": [
            "translate",
            "unsat",
            "solve",
            "direct_solve"
        ],
        "classes": [
            "UnsatError"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/api/types.py",
        "functions": [
            "cpp_type",
            "cpp_type",
            "name",
            "cpp_type",
            "name",
            "cpp_type",
            "name",
            "type",
            "no_default",
            "decl",
            "defn",
            "arguments",
            "name",
            "decl",
            "defn",
            "from_native_function",
            "arguments",
            "name",
            "defn",
            "exprs",
            "returns_type",
            "type",
            "from_schema",
            "name",
            "defn",
            "ptr_type",
            "arguments",
            "returns_type",
            "dispatcher_exprs"
        ],
        "classes": [
            "BaseCType",
            "ConstRefCType",
            "MutRefCType",
            "OptionalCType",
            "Binding",
            "Expr",
            "CppSignature",
            "CppSignatureGroup",
            "DispatcherSignature",
            "NativeSignature"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/api/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/dest/register_dispatch_key.py",
        "functions": [
            "__call__",
            "gen_structured",
            "gen_unstructured",
            "gen_class_set_output",
            "gen_class_set_output_body",
            "gen_class_ctor",
            "gen_class",
            "gen_one",
            "generate_defn",
            "generate_defn"
        ],
        "classes": [
            "RegisterDispatchKey",
            "StructuredRegisterDispatchKey"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/dest/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/codegen/selective_build/operator.py",
        "functions": [
            "merge_debug_info",
            "combine_operators",
            "merge_operator_dicts",
            "strip_operator_overload_name",
            "from_yaml_dict",
            "from_legacy_operator_name_without_overload",
            "to_dict"
        ],
        "classes": [
            "SelectiveBuildOperator"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/selective_build/selector.py",
        "functions": [
            "merge_kernel_metadata",
            "combine_selective_builders",
            "op_name_from_native_function",
            "get_nop_selector",
            "from_yaml_dict",
            "from_yaml_str",
            "from_yaml_path",
            "from_legacy_op_registration_allow_list",
            "is_operator_selected",
            "is_native_function_selected",
            "is_operator_selected_for_training",
            "is_native_function_selected_for_training",
            "is_root_operator",
            "is_kernel_dtype_selected",
            "to_dict"
        ],
        "classes": [
            "SelectiveBuilder"
        ]
    },
    {
        "file_path": "../pytorch/tools/codegen/selective_build/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_analyzer/gen_op_registration_allowlist.py",
        "functions": [
            "canonical_name",
            "load_op_dep_graph",
            "load_root_ops",
            "gen_transitive_closure",
            "gen_transitive_closure_str"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_analyzer/op_deps_processor.py",
        "functions": [
            "load_op_deps",
            "process_base_ops",
            "convert"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/oss_coverage.py",
        "functions": [
            "report_coverage"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/oss/cov_json.py",
        "functions": [
            "get_json_report"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/oss/init.py",
        "functions": [
            "initialization",
            "add_arguments_oss",
            "parse_arguments",
            "get_test_list_by_type",
            "get_test_list",
            "empty_list_if_none",
            "gcc_export_init",
            "get_python_run_only",
            "print_init_info"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/oss/run.py",
        "functions": [
            "clang_run",
            "gcc_run"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/oss/utils.py",
        "functions": [
            "get_oss_binary_folder",
            "get_oss_shared_library",
            "get_oss_binary_file",
            "get_llvm_tool_path",
            "get_pytorch_folder",
            "detect_compiler_type",
            "clean_up_gcda",
            "get_gcda_files",
            "run_oss_python_test"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/oss/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/clang_coverage.py",
        "functions": [
            "create_corresponding_folder",
            "run_target",
            "merge_target",
            "export_target",
            "merge",
            "export"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/gcc_coverage.py",
        "functions": [
            "update_gzip_dict",
            "run_target",
            "export"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/print_report.py",
        "functions": [
            "key_by_percentage",
            "key_by_name",
            "is_intrested_file",
            "is_this_type_of_tests",
            "print_test_by_type",
            "print_test_condition",
            "line_oriented_report",
            "print_file_summary",
            "print_file_oriented_report",
            "file_oriented_report",
            "get_html_ignored_pattern",
            "html_oriented_report"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/summarize_jsons.py",
        "functions": [
            "transform_file_name",
            "is_intrested_file",
            "get_json_obj",
            "parse_json",
            "parse_jsons",
            "update_coverage",
            "update_set",
            "summarize_jsons"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/utils.py",
        "functions": [
            "run_cpp_test",
            "get_tool_path_by_platform"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/parser/coverage_record.py",
        "functions": [
            "to_dict"
        ],
        "classes": [
            "CoverageRecord"
        ]
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/parser/gcov_coverage_parser.py",
        "functions": [
            "__init__",
            "_skip_coverage",
            "parse"
        ],
        "classes": [
            "GcovCoverageParser"
        ]
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/parser/llvm_coverage_parser.py",
        "functions": [
            "__init__",
            "_skip_coverage",
            "_collect_coverage",
            "parse"
        ],
        "classes": [
            "LlvmCoverageParser"
        ]
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/parser/llvm_coverage_segment.py",
        "functions": [
            "parse_segments",
            "has_coverage",
            "is_executable",
            "get_coverage"
        ],
        "classes": [
            "LlvmCoverageSegment"
        ]
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/tool/parser/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/util/setting.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "TestType",
            "Test",
            "Option",
            "TestPlatform",
            "CompilerType"
        ]
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/util/utils.py",
        "functions": [
            "convert_time",
            "print_time",
            "print_log",
            "print_error",
            "remove_file",
            "remove_folder",
            "create_folder",
            "clean_up",
            "convert_to_relative_path",
            "replace_extension",
            "related_to_test_list",
            "get_raw_profiles_folder",
            "detect_compiler_type",
            "get_test_name_from_whole_path",
            "check_compiler_type",
            "check_platform_type",
            "check_test_type",
            "raise_no_test_found_exception"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/util/utils_init.py",
        "functions": [
            "remove_files",
            "create_folders",
            "add_arguments_utils",
            "have_option",
            "get_options"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/code_coverage/package/util/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/fast_nvcc/fast_nvcc.py",
        "functions": [
            "fast_nvcc_warn",
            "warn_if_windows",
            "warn_if_tmpdir_flag",
            "nvcc_dryrun_data",
            "warn_if_tmpdir_set",
            "contains_non_executable",
            "module_id_contents",
            "unique_module_id_files",
            "make_rm_force",
            "print_verbose_output",
            "straight_line_dependencies",
            "files_mentioned",
            "nvcc_data_dependencies",
            "is_weakly_connected",
            "warn_if_not_weakly_connected",
            "print_dot_graph",
            "print_command_outputs",
            "write_log_csv",
            "exit_code",
            "wrap_nvcc",
            "fast_nvcc",
            "our_arg",
            "name",
            "uniqueify"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/jit/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/pyi/gen_pyi.py",
        "functions": [
            "get_py_torch_functions",
            "sig_for_ops",
            "generate_type_hints",
            "gen_nn_functional",
            "gen_pyi",
            "main",
            "should_bind_function",
            "should_bind_method"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/pyi/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/cmake.py",
        "functions": [
            "_mkdir_p",
            "convert_cmake_value_to_python_value",
            "get_cmake_cache_variables_from_file",
            "__init__",
            "_cmake_cache_file",
            "_get_cmake_command",
            "_get_version",
            "run",
            "defines",
            "get_cmake_cache_variables",
            "generate",
            "build"
        ],
        "classes": [
            "CMake"
        ]
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/env.py",
        "functions": [
            "check_env_flag",
            "check_negative_env_flag",
            "gather_paths",
            "lib_paths_from_base",
            "__init__",
            "is_debug",
            "is_rel_with_deb_info",
            "is_release"
        ],
        "classes": [
            "BuildType"
        ]
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/gen.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/generate_code.py",
        "functions": [
            "all_generator_source",
            "generate_code",
            "get_selector_from_legacy_operator_selection_list",
            "get_selector",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/gen_version_header.py",
        "functions": [
            "parse_version",
            "apply_replacements",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/numpy_.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/setup_helpers/__init__.py",
        "functions": [
            "which"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/shared/cwrap_common.py",
        "functions": [
            "parse_arguments",
            "set_declaration_defaults",
            "filter_unique_options",
            "sort_by_number_of_args",
            "parse_header",
            "exclude_arg",
            "exclude_arg_with_self_check",
            "signature",
            "num_args",
            "__init__",
            "add_argument",
            "__repr__",
            "__init__",
            "__repr__"
        ],
        "classes": [
            "Function",
            "Argument"
        ]
    },
    {
        "file_path": "../pytorch/tools/shared/module_loader.py",
        "functions": [
            "import_module"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/tools/shared/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/functional.py",
        "functions": [
            "broadcast_tensors",
            "broadcast_shapes",
            "split",
            "_indices_product",
            "_index_tensor_with_indices_list",
            "lu_unpack",
            "einsum",
            "_meshgrid",
            "stft",
            "istft",
            "_unique_impl",
            "_unique_consecutive_impl",
            "_return_counts",
            "_return_output",
            "_return_inverse",
            "_consecutive_return_counts",
            "_consecutive_return_output",
            "_consecutive_return_inverse",
            "tensordot",
            "cartesian_prod",
            "block_diag",
            "cdist",
            "atleast_1d",
            "atleast_2d",
            "atleast_3d",
            "norm",
            "chain_matmul",
            "_lu_impl",
            "_check_list_size",
            "_lu_with_infos",
            "_lu_no_infos",
            "align_tensors",
            "meshgrid",
            "meshgrid",
            "norm",
            "norm",
            "norm",
            "norm"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_vmap_internals.py",
        "functions": [
            "_validate_and_get_batch_size",
            "_num_outputs",
            "_as_tuple",
            "_create_batched_inputs",
            "_unwrap_batched",
            "_validate_outputs",
            "_check_out_dims_is_int_or_int_tuple",
            "_get_name",
            "vmap",
            "_vmap",
            "wrapped"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/__config__.py",
        "functions": [
            "show",
            "_cxx_flags",
            "parallel_info"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/__future__.py",
        "functions": [
            "set_overwrite_module_params_on_conversion",
            "get_overwrite_module_params_on_conversion"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/__init__.py",
        "functions": [
            "_load_global_deps",
            "typename",
            "is_tensor",
            "is_storage",
            "set_default_tensor_type",
            "set_default_dtype",
            "use_deterministic_algorithms",
            "set_deterministic",
            "are_deterministic_algorithms_enabled",
            "is_deterministic",
            "manager_path",
            "_assert",
            "compiled_with_cxx11_abi"
        ],
        "classes": [
            "DoubleStorage",
            "FloatStorage",
            "HalfStorage",
            "LongStorage",
            "IntStorage",
            "ShortStorage",
            "CharStorage",
            "ByteStorage",
            "BoolStorage",
            "BFloat16Storage",
            "ComplexDoubleStorage",
            "ComplexFloatStorage",
            "QUInt8Storage",
            "QInt8Storage",
            "QInt32Storage",
            "QUInt4x2Storage"
        ]
    },
    {
        "file_path": "../pytorch/torch/hub.py",
        "functions": [
            "import_module",
            "_remove_if_exists",
            "_git_archive_link",
            "_load_attr_from_module",
            "_get_torch_home",
            "_parse_repo_info",
            "_get_cache_or_reload",
            "_check_module_exists",
            "_check_dependencies",
            "_load_entry_from_hubconf",
            "get_dir",
            "set_dir",
            "list",
            "help",
            "load",
            "_load_local",
            "download_url_to_file",
            "_download_url_to_file",
            "_is_legacy_zip_format",
            "_legacy_zip_load",
            "load_state_dict_from_url",
            "__init__",
            "update",
            "close",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "tqdm"
        ]
    },
    {
        "file_path": "../pytorch/torch/overrides.py",
        "functions": [
            "get_ignored_functions",
            "get_testing_overrides",
            "wrap_torch_function",
            "_get_overloaded_args",
            "handle_torch_function",
            "get_overridable_functions",
            "_get_tensor_methods",
            "is_tensor_method_or_property",
            "is_tensor_like",
            "inner",
            "wrapped"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quasirandom.py",
        "functions": [
            "__init__",
            "draw",
            "draw_base2",
            "reset",
            "fast_forward",
            "_scramble",
            "__repr__"
        ],
        "classes": [
            "SobolEngine"
        ]
    },
    {
        "file_path": "../pytorch/torch/random.py",
        "functions": [
            "set_rng_state",
            "get_rng_state",
            "manual_seed",
            "seed",
            "initial_seed",
            "fork_rng"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/serialization.py",
        "functions": [
            "mkdtemp",
            "_is_zipfile",
            "register_package",
            "check_module_version_greater_or_equal",
            "_cpu_tag",
            "_cuda_tag",
            "_cpu_deserialize",
            "validate_cuda_device",
            "_cuda_deserialize",
            "location_tag",
            "default_restore_location",
            "normalize_storage_type",
            "storage_to_tensor_type",
            "_is_path",
            "_open_file_like",
            "_open_zipfile_writer",
            "_is_compressed_file",
            "_should_read_directly",
            "_check_seekable",
            "_check_dill_version",
            "save",
            "_legacy_save",
            "_save",
            "load",
            "_get_layout",
            "_legacy_load",
            "_maybe_decode_ascii",
            "_get_restore_location",
            "_load",
            "_is_torchscript_zip",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__exit__",
            "__init__",
            "__exit__",
            "__init__",
            "__init__",
            "__exit__",
            "__init__",
            "__exit__",
            "raise_err_msg",
            "persistent_id",
            "persistent_id",
            "_check_container_source",
            "legacy_load",
            "persistent_load",
            "load_tensor",
            "persistent_load",
            "persistent_load",
            "restore_location",
            "restore_location",
            "restore_location",
            "restore_location"
        ],
        "classes": [
            "SourceChangeWarning",
            "_opener",
            "_open_file",
            "_open_buffer_reader",
            "_open_buffer_writer",
            "_open_zipfile_reader",
            "_open_zipfile_writer_file",
            "_open_zipfile_writer_buffer"
        ]
    },
    {
        "file_path": "../pytorch/torch/storage.py",
        "functions": [
            "_load_from_bytes",
            "__init__",
            "__len__",
            "__getitem__",
            "copy_",
            "size",
            "type",
            "cuda",
            "element_size",
            "get_device",
            "_share_filename_",
            "_share_fd_",
            "_new_using_filename",
            "_new_using_fd",
            "__str__",
            "__repr__",
            "__iter__",
            "__copy__",
            "__deepcopy__",
            "__reduce__",
            "__sizeof__",
            "clone",
            "tolist",
            "cpu",
            "double",
            "float",
            "half",
            "long",
            "int",
            "short",
            "char",
            "byte",
            "bool",
            "bfloat16",
            "complex_double",
            "complex_float",
            "pin_memory",
            "share_memory_",
            "_new_shared"
        ],
        "classes": [
            "_StorageBase"
        ]
    },
    {
        "file_path": "../pytorch/torch/tensor.py",
        "functions": [
            "_wrap_type_error_to_not_implemented",
            "_rebuild_from_type",
            "_convert",
            "wrapped",
            "__deepcopy__",
            "__reduce_ex__",
            "_reduce_ex_internal",
            "__setstate__",
            "__repr__",
            "backward",
            "register_hook",
            "reinforce",
            "retain_grad",
            "is_shared",
            "share_memory_",
            "__reversed__",
            "norm",
            "lu",
            "stft",
            "istft",
            "resize",
            "resize_as",
            "split",
            "unique",
            "unique_consecutive",
            "__rsub__",
            "__rdiv__",
            "__format__",
            "__ipow__",
            "__rpow__",
            "__floordiv__",
            "__rfloordiv__",
            "__len__",
            "__iter__",
            "__hash__",
            "__dir__",
            "__array__",
            "__array_wrap__",
            "__contains__",
            "__cuda_array_interface__",
            "refine_names",
            "align_to",
            "unflatten",
            "rename_",
            "rename",
            "_update_names",
            "grad",
            "grad",
            "grad",
            "__torch_function__",
            "trim",
            "retain_grad_hook"
        ],
        "classes": [
            "Tensor"
        ]
    },
    {
        "file_path": "../pytorch/torch/types.py",
        "functions": [
            "__deepcopy__",
            "_new_shared",
            "_write_file",
            "element_size",
            "is_shared",
            "share_memory_",
            "size"
        ],
        "classes": [
            "Storage"
        ]
    },
    {
        "file_path": "../pytorch/torch/_appdirs.py",
        "functions": [
            "user_data_dir",
            "site_data_dir",
            "user_config_dir",
            "site_config_dir",
            "user_cache_dir",
            "user_state_dir",
            "user_log_dir",
            "_get_win_folder_from_registry",
            "_get_win_folder_with_pywin32",
            "_get_win_folder_with_ctypes",
            "_get_win_folder_with_jna",
            "__init__",
            "user_data_dir",
            "site_data_dir",
            "user_config_dir",
            "site_config_dir",
            "user_cache_dir",
            "user_state_dir",
            "user_log_dir"
        ],
        "classes": [
            "AppDirs"
        ]
    },
    {
        "file_path": "../pytorch/torch/_autograd_functions.py",
        "functions": [
            "forward",
            "backward"
        ],
        "classes": [
            "_LU"
        ]
    },
    {
        "file_path": "../pytorch/torch/_classes.py",
        "functions": [
            "__init__",
            "__getattr__",
            "__init__",
            "__getattr__",
            "loaded_libraries",
            "load_library"
        ],
        "classes": [
            "_ClassNamespace",
            "_Classes"
        ]
    },
    {
        "file_path": "../pytorch/torch/_jit_internal.py",
        "functions": [
            "createResolutionCallbackFromEnv",
            "createResolutionCallbackFromFrame",
            "get_closure",
            "createResolutionCallbackFromClosure",
            "can_compile_class",
            "get_annotation_str",
            "get_type_hint_captures",
            "createResolutionCallbackForClassMethods",
            "boolean_dispatch",
            "export",
            "unused",
            "ignore",
            "_copy_to_script_wrapper",
            "module_has_exports",
            "should_drop",
            "is_ignored_fn",
            "is_static_fn",
            "get_static_fn",
            "get_torchscript_modifier",
            "copy_torchscript_modifier",
            "_overload",
            "_get_fn_overloads",
            "_clear_fn_overloads",
            "get_class_name_lineno",
            "_overload_method",
            "_get_overloaded_methods",
            "is_tuple",
            "is_list",
            "is_dict",
            "is_optional",
            "is_future",
            "is_final",
            "is_scripting",
            "_qualified_name",
            "fake_range",
            "_try_get_dispatched_fn",
            "_get_named_tuple_properties",
            "_create_named_tuple",
            "_disable_emit_hooks",
            "_disable_emit_hooks_decorator",
            "_is_exception",
            "raise_error_container_parameter_missing",
            "get_origin",
            "get_args",
            "check_args_exist",
            "container_checker",
            "_isinstance",
            "lookupInModule",
            "parseNestedExpr",
            "parseExpr",
            "lookup_in_class",
            "fn",
            "decorator",
            "safe_is_subclass",
            "is_rref",
            "__getitem__",
            "__init__",
            "__enter__",
            "__exit__",
            "__getattr__",
            "__getattr__"
        ],
        "classes": [
            "FunctionModifiers",
            "BroadcastingListCls",
            "SourceContext",
            "env",
            "closure_lookup"
        ]
    },
    {
        "file_path": "../pytorch/torch/_linalg_utils.py",
        "functions": [
            "is_sparse",
            "get_floating_dtype",
            "matmul",
            "conjugate",
            "transpose",
            "transjugate",
            "bform",
            "qform",
            "basis",
            "symeig"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_lobpcg.py",
        "functions": [
            "_symeig_backward_complete_eigenspace",
            "_polynomial_coefficients_given_roots",
            "_polynomial_value",
            "_matrix_polynomial_value",
            "_vector_polynomial_value",
            "_symeig_backward_partial_eigenspace",
            "_symeig_backward",
            "lobpcg",
            "_lobpcg",
            "LOBPCG_call_tracker",
            "transition",
            "transition",
            "forward",
            "backward",
            "__init__",
            "__str__",
            "update",
            "update_residual",
            "update_converged_count",
            "stop_iteration",
            "run",
            "call_tracker",
            "_update_basic",
            "_update_ortho",
            "_get_rayleigh_ritz_transform",
            "_get_svqb",
            "_get_ortho"
        ],
        "classes": [
            "LOBPCGAutogradFunction",
            "LOBPCG"
        ]
    },
    {
        "file_path": "../pytorch/torch/_lowrank.py",
        "functions": [
            "get_approximate_basis",
            "svd_lowrank",
            "_svd_lowrank",
            "pca_lowrank"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_namedtensor_internals.py",
        "functions": [
            "check_serializing_named_tensor",
            "build_dim_map",
            "unzip_namedshape",
            "namer_api_name",
            "is_ellipsis",
            "single_ellipsis_index",
            "expand_single_ellipsis",
            "replace_ellipsis_by_position",
            "resolve_ellipsis",
            "update_names_with_list",
            "update_names_with_mapping",
            "update_names"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_ops.py",
        "functions": [
            "dl_open_guard",
            "__init__",
            "__getattr__",
            "__init__",
            "__getattr__",
            "load_library"
        ],
        "classes": [
            "_OpNamespace",
            "_Ops"
        ]
    },
    {
        "file_path": "../pytorch/torch/_python_dispatcher.py",
        "functions": [
            "__init__",
            "keys",
            "register",
            "_format_line",
            "_format_header",
            "rawRegistrations",
            "rawDispatchTable",
            "registrations",
            "dispatchTable"
        ],
        "classes": [
            "PythonDispatcher"
        ]
    },
    {
        "file_path": "../pytorch/torch/_six.py",
        "functions": [
            "with_metaclass",
            "get_function_from_type",
            "istuple",
            "bind_method",
            "__new__",
            "__prepare__"
        ],
        "classes": [
            "metaclass"
        ]
    },
    {
        "file_path": "../pytorch/torch/_storage_docs.py",
        "functions": [
            "add_docstr_all"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_tensor_docs.py",
        "functions": [
            "add_docstr_all"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_tensor_str.py",
        "functions": [
            "set_printoptions",
            "_scalar_str",
            "_vector_str",
            "_tensor_str_with_formatter",
            "_tensor_str",
            "_add_suffixes",
            "get_summarized_data",
            "_str_intern",
            "_str",
            "__init__",
            "width",
            "format",
            "_val_formatter"
        ],
        "classes": [
            "__PrinterOptions",
            "_Formatter"
        ]
    },
    {
        "file_path": "../pytorch/torch/_torch_docs.py",
        "functions": [
            "parse_kwargs",
            "merge_dicts"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_utils.py",
        "functions": [
            "_type",
            "_cuda",
            "_get_async_or_non_blocking",
            "_rebuild_tensor",
            "_rebuild_tensor_v2",
            "_validate_loaded_sparse_tensors",
            "_rebuild_sparse_tensor",
            "_rebuild_xla_tensor",
            "_rebuild_qtensor",
            "_rebuild_parameter",
            "_import_dotted_name",
            "_accumulate",
            "_flatten_dense_tensors",
            "_flatten_sparse_tensors",
            "_unflatten_dense_tensors",
            "_unflatten_sparse_tensors",
            "_reorder_tensors_as",
            "_take_tensors",
            "annotate",
            "_get_available_device_type",
            "_get_device_attr",
            "_get_current_device_index",
            "_get_all_device_indices",
            "_get_devices_properties",
            "_get_device_index",
            "_handle_complex",
            "dec",
            "__repr__",
            "__init__",
            "reraise"
        ],
        "classes": [
            "KeyErrorMessage",
            "ExceptionWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/_utils_internal.py",
        "functions": [
            "get_file_path",
            "get_file_path_2",
            "get_writable_path",
            "prepare_multiprocessing_environment",
            "resolve_library_path",
            "get_source_lines_and_file"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/_VF.py",
        "functions": [
            "__init__",
            "__getattr__"
        ],
        "classes": [
            "VFModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/anomaly_mode.py",
        "functions": [
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "detect_anomaly",
            "set_detect_anomaly"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/forward_ad.py",
        "functions": [
            "enter_dual_level",
            "exit_dual_level",
            "make_dual",
            "unpack_dual",
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "dual_level"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/function.py",
        "functions": [
            "once_differentiable",
            "traceable",
            "_nested_map",
            "_jit_unwrap_structured",
            "_iter_filter",
            "_unflatten",
            "save_for_backward",
            "mark_dirty",
            "mark_shared_storage",
            "mark_non_differentiable",
            "set_materialize_grads",
            "_register_hook",
            "apply",
            "__init__",
            "__call__",
            "forward",
            "backward",
            "wrapper",
            "__init__",
            "_map",
            "_iter",
            "unflatten_helper",
            "_do_forward",
            "_do_backward",
            "backward",
            "forward",
            "save_for_backward",
            "saved_tensors",
            "mark_dirty",
            "mark_non_differentiable",
            "forward_extended",
            "backward_extended",
            "fake_requires_grad"
        ],
        "classes": [
            "_ContextMethodMixin",
            "_HookMixin",
            "BackwardCFunction",
            "FunctionMeta",
            "Function",
            "InplaceFunction",
            "NestedIOFunction"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/functional.py",
        "functions": [
            "_as_tuple",
            "_tuple_postprocess",
            "_grad_preprocess",
            "_grad_postprocess",
            "_validate_v",
            "_check_requires_grad",
            "_autograd_grad",
            "_fill_in_zeros",
            "vjp",
            "jvp",
            "_construct_standard_basis_for",
            "jacobian",
            "hessian",
            "vhp",
            "hvp",
            "ensure_single_output_function",
            "jac_func",
            "vjp"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/autograd/gradcheck.py",
        "functions": [
            "zero_gradients",
            "make_jacobian",
            "iter_tensors",
            "get_numerical_jacobian",
            "get_analytical_jacobian",
            "get_failed_batched_grad_test_msg",
            "test_batched_grad",
            "_as_tuple",
            "_differentiable_outputs",
            "gradcheck",
            "gradgradcheck",
            "update_jacobians",
            "vjp",
            "fail_test",
            "new_func",
            "compute_gradient",
            "fn",
            "checkIfNumericalAnalyticAreClose",
            "not_reentrant_error",
            "randn_like",
            "fn_out",
            "get_stride",
            "fn",
            "warn_bc_breaking",
            "check_undefined_grad_support"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/autograd/grad_mode.py",
        "functions": [
            "__call__",
            "_wrap_generator",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__",
            "decorate_context",
            "generator_context"
        ],
        "classes": [
            "_DecoratorContextManager",
            "no_grad",
            "enable_grad",
            "set_grad_enabled"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/profiler.py",
        "functions": [
            "load_nvprof",
            "format_time",
            "format_time_share",
            "format_memory",
            "attr_formatter",
            "filter_stack_entry",
            "filter_name",
            "rewrite_name",
            "parse_kineto_results",
            "parse_legacy_records",
            "parse_nvprof_trace",
            "build_table",
            "__init__",
            "_build_tree",
            "__str__",
            "_remove_dup_nodes",
            "_populate_cpu_children",
            "_set_backward_stacktraces",
            "self_cpu_time_total",
            "table",
            "export_chrome_trace",
            "supported_export_stacks_metrics",
            "export_stacks",
            "key_averages",
            "total_average",
            "__init__",
            "config",
            "__enter__",
            "_prepare_kineto_trace",
            "_start_kineto_trace",
            "__exit__",
            "__repr__",
            "__str__",
            "_check_finish",
            "table",
            "export_chrome_trace",
            "export_stacks",
            "key_averages",
            "total_average",
            "self_cpu_time_total",
            "__init__",
            "__enter__",
            "__exit__",
            "_call_end_callbacks_on_future",
            "__init__",
            "__enter__",
            "__exit__",
            "cpu_time",
            "cuda_time",
            "__init__",
            "elapsed_us",
            "__init__",
            "append_kernel",
            "append_cpu_child",
            "set_cpu_parent",
            "self_cpu_memory_usage",
            "self_cuda_memory_usage",
            "self_cpu_time_total",
            "cuda_time_total",
            "self_cuda_time_total",
            "cpu_time_total",
            "key",
            "__repr__",
            "__init__",
            "add",
            "__iadd__",
            "__repr__",
            "__missing__",
            "get_record_key",
            "adjusted_time",
            "__init__",
            "see",
            "add_column",
            "auto_scale_flops",
            "append",
            "trim_path",
            "bw_parent",
            "get_key",
            "__enter__",
            "__exit__",
            "__call__",
            "wrapped"
        ],
        "classes": [
            "EventList",
            "profile",
            "record_function",
            "emit_nvtx",
            "FormattedTimesMixin",
            "Interval",
            "FunctionEvent",
            "FunctionEventAvg",
            "StringTable",
            "EnforceUnique",
            "ContextDecorator"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/variable.py",
        "functions": [
            "__instancecheck__"
        ],
        "classes": [
            "VariableMeta",
            "Variable"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/__init__.py",
        "functions": [
            "_make_grads",
            "_tensor_or_tensors_to_tuple",
            "backward",
            "grad",
            "_is_checkpoint_valid",
            "variable"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/autograd/_functions/tensor.py",
        "functions": [
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Type",
            "Resize"
        ]
    },
    {
        "file_path": "../pytorch/torch/autograd/_functions/utils.py",
        "functions": [
            "maybe_view",
            "maybe_unexpand",
            "check_onnx_broadcast"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/autograd/_functions/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/backends/__init__.py",
        "functions": [
            "disable_global_flags",
            "flags_frozen",
            "__allow_nonbracketed_mutation",
            "__init__",
            "__get__",
            "__set__",
            "__init__",
            "__getattr__"
        ],
        "classes": [
            "ContextProp",
            "PropModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/cuda/__init__.py",
        "functions": [
            "is_built",
            "__init__",
            "__get__",
            "__set__",
            "__init__",
            "clear",
            "__init__",
            "__getitem__",
            "__getattr__",
            "__setattr__",
            "__getattr__",
            "__setattr__"
        ],
        "classes": [
            "cuFFTPlanCacheAttrContextProp",
            "cuFFTPlanCache",
            "cuFFTPlanCacheManager",
            "cuBLASModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/cudnn/rnn.py",
        "functions": [
            "get_cudnn_mode",
            "init_dropout_state",
            "__init__",
            "get",
            "__getstate__",
            "__setstate__"
        ],
        "classes": [
            "Unserializable"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/cudnn/__init__.py",
        "functions": [
            "version",
            "is_available",
            "is_acceptable",
            "set_flags",
            "flags",
            "_init",
            "_init",
            "__init__"
        ],
        "classes": [
            "CudnnModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/mkl/__init__.py",
        "functions": [
            "is_available"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/backends/mkldnn/__init__.py",
        "functions": [
            "is_available",
            "set_flags",
            "flags",
            "__init__"
        ],
        "classes": [
            "MkldnnModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/openmp/__init__.py",
        "functions": [
            "is_available"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/backends/quantized/__init__.py",
        "functions": [
            "_get_qengine_id",
            "_get_qengine_str",
            "__get__",
            "__set__",
            "__get__",
            "__set__",
            "__init__",
            "__getattr__"
        ],
        "classes": [
            "_QEngineProp",
            "_SupportedQEnginesProp",
            "QuantizedEngine"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/xnnpack/__init__.py",
        "functions": [
            "__get__",
            "__set__",
            "__init__",
            "__getattr__"
        ],
        "classes": [
            "_XNNPACKEnabled",
            "XNNPACKEngine"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/_nnapi/prepare.py",
        "functions": [
            "_condensed_zeros_like",
            "convert_model_to_nnapi",
            "__init__",
            "init",
            "forward",
            "__init__",
            "forward",
            "__getstate__",
            "__setstate__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "NnapiModule",
            "NnapiInitWrapper",
            "ListWrapper",
            "DelistWrapper",
            "ListDelistWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/_nnapi/serializer.py",
        "functions": [
            "approx_equal",
            "tensor_size",
            "broadcast_shapes",
            "get_conv_pool_shape",
            "fix_shape",
            "serialize_model",
            "use_nchw",
            "__init__",
            "add_tensor_operand",
            "torch_tensor_to_operand",
            "add_tensor_operand_for_input",
            "add_tensor_operand_for_weight",
            "add_immediate_operand",
            "add_immediate_int_scalar",
            "add_immediate_float_scalar",
            "add_immediate_bool_scalar",
            "add_immediate_int_vector",
            "get_tensor_operand_by_jitval",
            "get_tensor_operand_or_constant",
            "get_tensor_operand_for_weight",
            "add_operation",
            "add_tensor_tuple",
            "add_constant_value",
            "get_constant_value",
            "get_size_arg",
            "get_conv_pool_args_2d_from_pack",
            "get_conv_pool_args_2d_from_jit",
            "get_conv_pool_args_2d_common",
            "serialize_model",
            "serialize_values",
            "serialize_ints",
            "add_node",
            "add_getattr",
            "add_constant_node",
            "add_list_construct",
            "add_tuple_construct",
            "add_reshape",
            "add_quantize",
            "add_dequantize",
            "add_pointwise_simple_unary_op",
            "_do_add_binary",
            "add_pointwise_simple_binary_broadcast_op",
            "add_add_sub_op",
            "add_qadd",
            "add_hardtanh",
            "add_prelu_op",
            "add_pool2d_node",
            "add_adaptive_avg_pool2d",
            "add_upsample_nearest2d",
            "add_addmm",
            "add_qlinear",
            "get_optional_bias",
            "add_conv2d",
            "add_conv_underscore",
            "add_qconv2d",
            "add_conv2d_common"
        ],
        "classes": [
            "NNAPI_OperandCode",
            "NNAPI_OperationCode",
            "NNAPI_FuseCode",
            "OperandValueSourceType",
            "TorchScalarTypes",
            "ConvPoolArgs2d",
            "DimOrder",
            "Operand",
            "_NnapiSerializer"
        ]
    },
    {
        "file_path": "../pytorch/torch/backends/_nnapi/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/contrib/_tensorboard_vis.py",
        "functions": [
            "dump_tensorboard_summary",
            "visualize",
            "visualize_graph_executor",
            "visualize_rec",
            "inline_graph",
            "name_for",
            "add_fusion_group",
            "add_graph_executor",
            "add_node"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/contrib/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/csrc/empty.c",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/csrc/deploy/example/trace_simple.py",
        "functions": [
            "__init__",
            "forward"
        ],
        "classes": [
            "MyModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/csrc/deploy/interpreter/freeze.py",
        "functions": [
            "indent_msg",
            "wrapper",
            "__init__",
            "msg",
            "write_bytecode",
            "write_main",
            "write_frozen",
            "compile_path",
            "compile_package",
            "get_module_qualname",
            "compile_file"
        ],
        "classes": [
            "FrozenModule",
            "Freezer"
        ]
    },
    {
        "file_path": "../pytorch/torch/csrc/jit/codegen/cuda/tools/stringify_file.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/comm.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/error.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/memory.py",
        "functions": [
            "_host_allocator",
            "_free_mutex",
            "caching_allocator_alloc",
            "caching_allocator_delete",
            "set_per_process_memory_fraction",
            "empty_cache",
            "memory_stats",
            "memory_stats_as_nested_dict",
            "reset_accumulated_memory_stats",
            "reset_peak_memory_stats",
            "reset_max_memory_allocated",
            "reset_max_memory_cached",
            "memory_allocated",
            "max_memory_allocated",
            "memory_reserved",
            "max_memory_reserved",
            "memory_cached",
            "max_memory_cached",
            "memory_snapshot",
            "memory_summary",
            "list_gpu_processes",
            "_recurse_add_to_result",
            "_format_size",
            "_format_count"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/nccl.py",
        "functions": [
            "is_available",
            "version",
            "unique_id",
            "init_rank",
            "_check_sequence_type",
            "all_reduce",
            "reduce",
            "broadcast",
            "all_gather",
            "reduce_scatter"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/nvtx.py",
        "functions": [
            "range_push",
            "range_pop",
            "mark",
            "range",
            "_fail"
        ],
        "classes": [
            "_NVTXStub"
        ]
    },
    {
        "file_path": "../pytorch/torch/cuda/profiler.py",
        "functions": [
            "init",
            "start",
            "stop",
            "profile"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/random.py",
        "functions": [
            "get_rng_state",
            "get_rng_state_all",
            "set_rng_state",
            "set_rng_state_all",
            "manual_seed",
            "manual_seed_all",
            "seed",
            "seed_all",
            "initial_seed",
            "cb",
            "cb",
            "cb",
            "cb",
            "cb"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/sparse.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/streams.py",
        "functions": [
            "__new__",
            "wait_event",
            "wait_stream",
            "record_event",
            "query",
            "synchronize",
            "_as_parameter_",
            "__eq__",
            "__hash__",
            "__repr__",
            "__new__",
            "from_ipc_handle",
            "record",
            "wait",
            "query",
            "elapsed_time",
            "synchronize",
            "ipc_handle",
            "_as_parameter_",
            "__repr__"
        ],
        "classes": [
            "Stream",
            "Event"
        ]
    },
    {
        "file_path": "../pytorch/torch/cuda/_utils.py",
        "functions": [
            "_get_device_index",
            "_dummy_type",
            "init_err"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/__init__.py",
        "functions": [
            "is_available",
            "_sleep",
            "_check_capability",
            "_check_cubins",
            "is_initialized",
            "_lazy_call",
            "init",
            "_lazy_init",
            "cudart",
            "check_error",
            "set_device",
            "get_device_name",
            "get_device_capability",
            "get_device_properties",
            "can_device_access_peer",
            "stream",
            "device_count",
            "get_arch_list",
            "get_gencode_flags",
            "current_device",
            "synchronize",
            "ipc_collect",
            "current_stream",
            "default_stream",
            "current_blas_handle",
            "_lazy_new",
            "__init__",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "type"
        ],
        "classes": [
            "DeferredCudaCallError",
            "cudaStatus",
            "CudaError",
            "device",
            "device_of",
            "_CudaBase",
            "DoubleStorage",
            "FloatStorage",
            "LongStorage",
            "IntStorage",
            "ShortStorage",
            "CharStorage",
            "ByteStorage",
            "HalfStorage",
            "BoolStorage",
            "BFloat16Storage",
            "ComplexDoubleStorage",
            "ComplexFloatStorage"
        ]
    },
    {
        "file_path": "../pytorch/torch/cuda/amp/autocast_mode.py",
        "functions": [
            "_cast",
            "custom_fwd",
            "custom_bwd",
            "__init__",
            "__enter__",
            "__exit__",
            "__call__",
            "decorate_fwd",
            "decorate_bwd",
            "decorate_autocast"
        ],
        "classes": [
            "autocast"
        ]
    },
    {
        "file_path": "../pytorch/torch/cuda/amp/common.py",
        "functions": [
            "amp_definitely_not_available"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/cuda/amp/grad_scaler.py",
        "functions": [
            "_refresh_per_optimizer_state",
            "__init__",
            "get",
            "__init__",
            "_check_scale_growth_tracker",
            "_lazy_init_scale_growth_tracker",
            "scale",
            "_unscale_grads_",
            "unscale_",
            "_maybe_opt_step",
            "step",
            "update",
            "_get_scale_async",
            "get_scale",
            "get_growth_factor",
            "set_growth_factor",
            "get_backoff_factor",
            "set_backoff_factor",
            "get_growth_interval",
            "set_growth_interval",
            "_get_growth_tracker",
            "is_enabled",
            "state_dict",
            "load_state_dict",
            "__getstate__",
            "__setstate__",
            "_check_inf_per_device",
            "_found_inf_per_device",
            "apply_scale"
        ],
        "classes": [
            "_MultiDeviceReplicator",
            "OptState",
            "GradScaler"
        ]
    },
    {
        "file_path": "../pytorch/torch/cuda/amp/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/constants.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/distributed_c10d.py",
        "functions": [
            "supports_complex",
            "_store_based_barrier",
            "_rank_not_in_group",
            "_get_group_rank",
            "_get_global_rank",
            "_get_group_size",
            "_check_single_tensor",
            "_check_tensor_list",
            "_check_op",
            "_check_p2p_op_list",
            "is_mpi_available",
            "is_nccl_available",
            "is_gloo_available",
            "is_initialized",
            "_get_default_group",
            "_get_default_store",
            "_update_default_pg",
            "get_backend",
            "init_process_group",
            "_new_process_group_helper",
            "destroy_process_group",
            "get_rank",
            "get_world_size",
            "isend",
            "irecv",
            "send",
            "recv",
            "_batch_p2p_manager",
            "batch_isend_irecv",
            "broadcast_multigpu",
            "broadcast",
            "all_reduce_multigpu",
            "all_reduce",
            "all_reduce_coalesced",
            "reduce_multigpu",
            "reduce",
            "all_gather_multigpu",
            "_object_to_tensor",
            "_tensor_to_object",
            "all_gather_object",
            "gather_object",
            "broadcast_object_list",
            "scatter_object_list",
            "all_gather",
            "all_gather_coalesced",
            "_validate_output_list_for_rank",
            "gather",
            "scatter",
            "reduce_scatter_multigpu",
            "reduce_scatter",
            "all_to_all_single",
            "all_to_all",
            "barrier",
            "new_group",
            "__new__",
            "register_backend",
            "__init__",
            "__getattribute__",
            "__init__",
            "__new__"
        ],
        "classes": [
            "Backend",
            "_reduce_op",
            "group",
            "GroupMember",
            "P2POp"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/launch.py",
        "functions": [
            "parse_args",
            "main",
            "sigkill_handler"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rendezvous.py",
        "functions": [
            "register_rendezvous_handler",
            "rendezvous",
            "_rendezvous_error",
            "_file_rendezvous_handler",
            "_tcp_rendezvous_handler",
            "_env_rendezvous_handler",
            "_error",
            "_error",
            "_error",
            "_env_error"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/__init__.py",
        "functions": [
            "is_available"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/algorithms/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/algorithms/ddp_comm_hooks/default_hooks.py",
        "functions": [
            "_allreduce_fut",
            "allreduce_hook",
            "fp16_compress_hook",
            "_get_allgather_out_list",
            "_allgather_then_aggregate_hook",
            "div_by_group_size",
            "decompress",
            "aggregate"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/algorithms/ddp_comm_hooks/powerSGD_hook.py",
        "functions": [
            "_orthogonalize",
            "powerSGD_hook",
            "batched_powerSGD_hook",
            "__init__",
            "maybe_increase_iter",
            "unpack_rank1_tensors_and_allreduce_ps",
            "compute_qs",
            "decompress",
            "compute_q",
            "decompress",
            "create_low_rank_tensor"
        ],
        "classes": [
            "PowerSGDState"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/algorithms/ddp_comm_hooks/quantization_hooks.py",
        "functions": [
            "_quantize_per_tensor_cuda",
            "_dequantize_per_tensor_cuda",
            "_quantize_per_channel_cuda",
            "_dequantize_per_channel_cuda",
            "_get_allgather_out_list",
            "quantization_pertensor_hook",
            "quantization_perchannel_hook",
            "quantize_and_allgather",
            "dequantize_and_aggregate",
            "quantize_and_allgather",
            "dequantize_and_aggregate"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/algorithms/ddp_comm_hooks/__init__.py",
        "functions": [
            "_ddp_comm_hook_wrapper",
            "_powerSGD_comm_hook_wrapper",
            "register_ddp_comm_hook"
        ],
        "classes": [
            "DDPCommHookType"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/autograd/__init__.py",
        "functions": [
            "is_available",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "context"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/benchmarks/benchmark_ddp_rpc.py",
        "functions": [
            "_retrieve_embedding_parameters",
            "_print_header",
            "_print_benchmark",
            "_print_cont",
            "_run_printable",
            "_run_trainer",
            "run_worker",
            "__init__",
            "forward",
            "get_next_batch"
        ],
        "classes": [
            "HybridModel"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/functional.py",
        "functions": [
            "broadcast",
            "gather",
            "scatter",
            "reduce",
            "all_gather",
            "all_to_all",
            "all_reduce",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "_Broadcast",
            "_Gather",
            "_Scatter",
            "_Reduce",
            "_AllGather",
            "_AlltoAll",
            "_AllReduce"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/api/remote_module.py",
        "functions": [
            "_instantiate_template",
            "_create_module",
            "_param_rrefs",
            "_raise_not_supported",
            "__init__",
            "remote_parameters",
            "get_module_rref",
            "register_buffer",
            "register_parameter",
            "add_module",
            "apply",
            "cuda",
            "xpu",
            "cpu",
            "type",
            "float",
            "double",
            "half",
            "bfloat16",
            "to",
            "register_backward_hook",
            "register_forward_pre_hook",
            "register_forward_hook",
            "state_dict",
            "load_state_dict",
            "parameters",
            "named_parameters",
            "buffers",
            "named_buffers",
            "children",
            "named_children",
            "modules",
            "named_modules",
            "train",
            "eval",
            "requires_grad_",
            "zero_grad",
            "share_memory",
            "extra_repr",
            "__init__"
        ],
        "classes": [
            "_RemoteModule",
            "RemoteModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/api/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/jit/instantiator.py",
        "functions": [
            "get_arg_return_types_from_interface",
            "_write",
            "_do_instantiate_remote_module_template",
            "instantiate_scriptable_remote_module_template",
            "instantiate_non_scriptable_remote_module_template"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/jit/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/jit/templates/remote_module_template.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/nn/jit/templates/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_adadelta.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalAdadelta"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_adagrad.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalAdagrad"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_adam.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalAdam"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_adamw.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalAdamW"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_rmsprop.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalRMSprop"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/functional_sgd.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "_FunctionalSGD"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/optimizer.py",
        "functions": [
            "_new_local_optimizer",
            "_local_optimizer_step",
            "_new_script_local_optimizer",
            "_script_local_optimizer_step",
            "_wait_for_all",
            "step",
            "__init__",
            "step",
            "__init__",
            "step",
            "__init__",
            "step"
        ],
        "classes": [
            "_ScriptLocalOptimizerInterface",
            "_ScriptLocalOptimizer",
            "_LocalOptimizer",
            "DistributedOptimizer"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/zero_redundancy_optimizer.py",
        "functions": [
            "_recursive_copy_to_device",
            "_broadcast_object",
            "_get_global_rank",
            "__init__",
            "add_param_group",
            "consolidate_state_dict",
            "partition_parameters",
            "per_device_params",
            "param_to_rank",
            "step",
            "load_local_state_dict",
            "load_state_dict",
            "local_state_dict",
            "state_dict",
            "rank_local_state_dict",
            "_broadcast_params",
            "_update_param_groups",
            "_setup_bucket_strategy"
        ],
        "classes": [
            "ZeroRedundancyOptimizer"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/optim/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/batchnorm.py",
        "functions": [
            "__init__",
            "_check_input_dim",
            "_track",
            "_commit",
            "forward",
            "convert_deferred_batch_norm"
        ],
        "classes": [
            "DeferredBatchNorm"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/checkpoint.py",
        "functions": [
            "checkpoint",
            "enable_checkpointing",
            "enable_recomputing",
            "is_checkpointing",
            "is_recomputing",
            "save_rng_states",
            "restore_rng_states",
            "__call__",
            "__init__",
            "checkpoint",
            "recompute",
            "__init__",
            "save_for_backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Function",
            "Checkpointing",
            "ThreadLocal",
            "Context",
            "Checkpoint",
            "Recompute"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/copy.py",
        "functions": [
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Context",
            "Copy",
            "Wait"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/dependency.py",
        "functions": [
            "fork",
            "join",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Fork",
            "Join"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/microbatch.py",
        "functions": [
            "check",
            "scatter",
            "gather",
            "__init__",
            "tensor",
            "tensors",
            "tensor_or_tensors",
            "call",
            "__repr__",
            "__iter__",
            "__len__",
            "__getitem__",
            "__setitem__",
            "__setitem__",
            "__setitem__",
            "_setitem_by_index",
            "_setitem_by_slice"
        ],
        "classes": [
            "Batch"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/phony.py",
        "functions": [
            "get_phony"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/pipe.py",
        "functions": [
            "_recommend_auto_balance",
            "_verify_module",
            "_verify_splitting",
            "_retrieve_device",
            "_split_module",
            "__init__",
            "__len__",
            "__getitem__",
            "__iter__",
            "cuda",
            "cpu",
            "to",
            "_ensure_copy_streams",
            "forward"
        ],
        "classes": [
            "BalanceError",
            "Pipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/pipeline.py",
        "functions": [
            "_depend",
            "_copy",
            "_wait",
            "_clock_cycles",
            "__init__",
            "__del__",
            "run",
            "fence",
            "compute",
            "function",
            "compute"
        ],
        "classes": [
            "Pipeline"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/stream.py",
        "functions": [
            "new_stream",
            "current_stream",
            "default_stream",
            "use_device",
            "use_stream",
            "get_device",
            "wait_stream",
            "record_stream",
            "is_cuda",
            "as_cuda"
        ],
        "classes": [
            "CPUStreamType"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/utils.py",
        "functions": [
            "partition_model"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/worker.py",
        "functions": [
            "worker",
            "create_workers",
            "join_workers",
            "spawn_workers",
            "__init__",
            "compute",
            "finalize",
            "normalize_device"
        ],
        "classes": [
            "Task"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/layout.py",
        "functions": [
            "inspect_skip_layout",
            "__init__",
            "copy_policy",
            "requires_copy"
        ],
        "classes": [
            "SkipLayout"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/namespace.py",
        "functions": [
            "__init__",
            "__repr__",
            "__hash__",
            "__lt__",
            "__eq__"
        ],
        "classes": [
            "Namespace"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/portal.py",
        "functions": [
            "__init__",
            "blue",
            "orange",
            "copy",
            "check_tensor_life",
            "put_tensor",
            "use_tensor",
            "put_grad",
            "use_grad",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Portal",
            "Context",
            "PortalBlue",
            "PortalOrange",
            "PortalCopy"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/skippable.py",
        "functions": [
            "skippable",
            "verify_skippables",
            "__init__",
            "__repr__",
            "namespaced",
            "stashable",
            "poppable",
            "isolate",
            "dispatch",
            "forward",
            "extend_skippable",
            "__init__",
            "__init__",
            "handle_stash",
            "handle_pop"
        ],
        "classes": [
            "Skippable",
            "stash",
            "pop"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/tracker.py",
        "functions": [
            "use_skip_tracker",
            "current_skip_tracker",
            "__init__",
            "save",
            "load",
            "copy",
            "__init__",
            "save",
            "load",
            "copy",
            "__init__"
        ],
        "classes": [
            "SkipTracker",
            "SkipTrackerThroughPotals",
            "ThreadLocal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/skip/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/_balance/blockpartition.py",
        "functions": [
            "solve",
            "block_size",
            "leaderboard"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/_balance/profile.py",
        "functions": [
            "layerwise_sandbox",
            "detach",
            "profile_times",
            "profile_sizes"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/pipeline/sync/_balance/__init__.py",
        "functions": [
            "balance_cost",
            "balance_by_time",
            "balance_by_size"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/api.py",
        "functions": [
            "_use_rpc_pickler",
            "_require_initialized",
            "_init_rpc_states",
            "_gather_to_leader",
            "_broadcast_to_followers",
            "_wait_all",
            "_all_gather",
            "_wait_all_workers",
            "shutdown",
            "get_worker_info",
            "_to_worker_info",
            "_rref_typeof_on_owner",
            "_rref_typeof_on_user",
            "method_factory",
            "remote",
            "_invoke_rpc",
            "rpc_sync",
            "rpc_async",
            "wrapper",
            "__init__",
            "method"
        ],
        "classes": [
            "AllGatherStates",
            "RRef",
            "RRefMeta",
            "RRef"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/backend_registry.py",
        "functions": [
            "_backend_type_repr",
            "backend_registered",
            "register_backend",
            "construct_rpc_backend_options",
            "init_backend",
            "_process_group_construct_rpc_backend_options_handler",
            "_init_process_group",
            "_process_group_init_backend_handler",
            "_tensorpipe_construct_rpc_backend_options_handler",
            "_tensorpipe_check_device_maps",
            "_tensorpipe_init_backend_handler",
            "check_one_worker"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/constants.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/functions.py",
        "functions": [
            "async_execution",
            "wrapper"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/internal.py",
        "functions": [
            "serialize",
            "deserialize",
            "_run_function",
            "_handle_exception",
            "_build_rpc_profiling_key",
            "_start_record_function",
            "__init__",
            "_tensor_receiver",
            "_tensor_reducer",
            "_py_rref_receiver",
            "_py_rref_reducer",
            "_rref_reducer",
            "_script_module_receiver",
            "_script_module_reducer",
            "serialize",
            "deserialize"
        ],
        "classes": [
            "RPCExecMode",
            "_InternalRPCPickler"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/options.py",
        "functions": [
            "__init__",
            "set_device_map"
        ],
        "classes": [
            "TensorPipeRpcBackendOptions"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/rref_proxy.py",
        "functions": [
            "_local_invoke",
            "_local_invoke_async_execution",
            "_invoke_rpc",
            "__init__",
            "__getattr__"
        ],
        "classes": [
            "RRefProxy"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/server_process_global_profiler.py",
        "functions": [
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "_server_process_global_profile"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/utils.py",
        "functions": [
            "_parse_remote_device"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/__init__.py",
        "functions": [
            "is_available",
            "init_rpc",
            "_validate_rpc_args",
            "_init_rpc_backend",
            "_get_debug_info"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/_testing/faulty_agent_backend_registry.py",
        "functions": [
            "_faulty_process_group_construct_rpc_backend_options_handler",
            "_faulty_process_group_init_backend_handler"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributed/rpc/_testing/__init__.py",
        "functions": [
            "is_available"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/distributions/log_normal.py",
        "functions": [
            "__init__",
            "expand",
            "loc",
            "scale",
            "mean",
            "variance",
            "entropy"
        ],
        "classes": [
            "LogNormal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/bernoulli.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "mean",
            "variance",
            "logits",
            "probs",
            "param_shape",
            "sample",
            "log_prob",
            "entropy",
            "enumerate_support",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Bernoulli"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/beta.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "rsample",
            "log_prob",
            "entropy",
            "concentration1",
            "concentration0",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Beta"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/binomial.py",
        "functions": [
            "_clamp_by_zero",
            "__init__",
            "expand",
            "_new",
            "support",
            "mean",
            "variance",
            "logits",
            "probs",
            "param_shape",
            "sample",
            "log_prob",
            "enumerate_support"
        ],
        "classes": [
            "Binomial"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/categorical.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "support",
            "logits",
            "probs",
            "param_shape",
            "mean",
            "variance",
            "sample",
            "log_prob",
            "entropy",
            "enumerate_support"
        ],
        "classes": [
            "Categorical"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/cauchy.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy"
        ],
        "classes": [
            "Cauchy"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/chi2.py",
        "functions": [
            "__init__",
            "expand",
            "df"
        ],
        "classes": [
            "Chi2"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/constraints.py",
        "functions": [
            "is_dependent",
            "check",
            "__repr__",
            "__init__",
            "is_discrete",
            "event_dim",
            "__call__",
            "check",
            "__init__",
            "__call__",
            "__init__",
            "is_discrete",
            "event_dim",
            "check",
            "__repr__",
            "check",
            "check",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "check",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "__init__",
            "check",
            "__repr__",
            "check",
            "__init__",
            "check",
            "check",
            "check",
            "check",
            "check",
            "__init__",
            "is_discrete",
            "event_dim",
            "check",
            "__init__",
            "is_discrete",
            "event_dim",
            "check"
        ],
        "classes": [
            "Constraint",
            "_Dependent",
            "_DependentProperty",
            "_IndependentConstraint",
            "_Boolean",
            "_OneHot",
            "_IntegerInterval",
            "_IntegerLessThan",
            "_IntegerGreaterThan",
            "_Real",
            "_GreaterThan",
            "_GreaterThanEq",
            "_LessThan",
            "_Interval",
            "_HalfOpenInterval",
            "_Simplex",
            "_Multinomial",
            "_LowerTriangular",
            "_LowerCholesky",
            "_CorrCholesky",
            "_PositiveDefinite",
            "_Cat",
            "_Stack"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/constraint_registry.py",
        "functions": [
            "_transform_to_real",
            "_biject_to_independent",
            "_transform_to_independent",
            "_transform_to_positive",
            "_transform_to_greater_than",
            "_transform_to_less_than",
            "_transform_to_interval",
            "_biject_to_simplex",
            "_transform_to_simplex",
            "_transform_to_lower_cholesky",
            "_transform_to_corr_cholesky",
            "_biject_to_cat",
            "_transform_to_cat",
            "_biject_to_stack",
            "_transform_to_stack",
            "__init__",
            "register",
            "__call__"
        ],
        "classes": [
            "ConstraintRegistry"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/continuous_bernoulli.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "_outside_unstable_region",
            "_cut_probs",
            "_cont_bern_log_norm",
            "mean",
            "stddev",
            "variance",
            "logits",
            "probs",
            "param_shape",
            "sample",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "ContinuousBernoulli"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/dirichlet.py",
        "functions": [
            "_Dirichlet_backward",
            "forward",
            "backward",
            "__init__",
            "expand",
            "rsample",
            "log_prob",
            "mean",
            "variance",
            "entropy",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "_Dirichlet",
            "Dirichlet"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/distribution.py",
        "functions": [
            "set_default_validate_args",
            "__init__",
            "expand",
            "batch_shape",
            "event_shape",
            "arg_constraints",
            "support",
            "mean",
            "variance",
            "stddev",
            "sample",
            "rsample",
            "sample_n",
            "log_prob",
            "cdf",
            "icdf",
            "enumerate_support",
            "entropy",
            "perplexity",
            "_extended_shape",
            "_validate_sample",
            "_get_checked_instance",
            "__repr__"
        ],
        "classes": [
            "Distribution"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/exponential.py",
        "functions": [
            "mean",
            "stddev",
            "variance",
            "__init__",
            "expand",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Exponential"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/exp_family.py",
        "functions": [
            "_natural_params",
            "_log_normalizer",
            "_mean_carrier_measure",
            "entropy"
        ],
        "classes": [
            "ExponentialFamily"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/fishersnedecor.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "rsample",
            "log_prob"
        ],
        "classes": [
            "FisherSnedecor"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/gamma.py",
        "functions": [
            "_standard_gamma",
            "mean",
            "variance",
            "__init__",
            "expand",
            "rsample",
            "log_prob",
            "entropy",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Gamma"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/geometric.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "logits",
            "probs",
            "sample",
            "log_prob",
            "entropy"
        ],
        "classes": [
            "Geometric"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/gumbel.py",
        "functions": [
            "__init__",
            "expand",
            "log_prob",
            "mean",
            "stddev",
            "variance",
            "entropy"
        ],
        "classes": [
            "Gumbel"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/half_cauchy.py",
        "functions": [
            "__init__",
            "expand",
            "scale",
            "mean",
            "variance",
            "log_prob",
            "cdf",
            "icdf",
            "entropy"
        ],
        "classes": [
            "HalfCauchy"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/half_normal.py",
        "functions": [
            "__init__",
            "expand",
            "scale",
            "mean",
            "variance",
            "log_prob",
            "cdf",
            "icdf",
            "entropy"
        ],
        "classes": [
            "HalfNormal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/independent.py",
        "functions": [
            "__init__",
            "expand",
            "has_rsample",
            "has_enumerate_support",
            "support",
            "mean",
            "variance",
            "sample",
            "rsample",
            "log_prob",
            "entropy",
            "enumerate_support",
            "__repr__"
        ],
        "classes": [
            "Independent"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/kl.py",
        "functions": [
            "register_kl",
            "_dispatch_kl",
            "_infinite_like",
            "_x_log_x",
            "_batch_trace_XXT",
            "kl_divergence",
            "_kl_bernoulli_bernoulli",
            "_kl_beta_beta",
            "_kl_binomial_binomial",
            "_kl_categorical_categorical",
            "_kl_continuous_bernoulli_continuous_bernoulli",
            "_kl_dirichlet_dirichlet",
            "_kl_exponential_exponential",
            "_kl_expfamily_expfamily",
            "_kl_gamma_gamma",
            "_kl_gumbel_gumbel",
            "_kl_geometric_geometric",
            "_kl_halfnormal_halfnormal",
            "_kl_laplace_laplace",
            "_kl_lowrankmultivariatenormal_lowrankmultivariatenormal",
            "_kl_multivariatenormal_lowrankmultivariatenormal",
            "_kl_lowrankmultivariatenormal_multivariatenormal",
            "_kl_multivariatenormal_multivariatenormal",
            "_kl_normal_normal",
            "_kl_onehotcategorical_onehotcategorical",
            "_kl_pareto_pareto",
            "_kl_poisson_poisson",
            "_kl_transformed_transformed",
            "_kl_uniform_uniform",
            "_kl_bernoulli_poisson",
            "_kl_beta_continuous_bernoulli",
            "_kl_beta_infinity",
            "_kl_beta_exponential",
            "_kl_beta_gamma",
            "_kl_beta_normal",
            "_kl_beta_uniform",
            "_kl_continuous_bernoulli_infinity",
            "_kl_continuous_bernoulli_exponential",
            "_kl_continuous_bernoulli_normal",
            "_kl_continuous_bernoulli_uniform",
            "_kl_exponential_infinity",
            "_kl_exponential_gamma",
            "_kl_exponential_gumbel",
            "_kl_exponential_normal",
            "_kl_gamma_infinity",
            "_kl_gamma_exponential",
            "_kl_gamma_gumbel",
            "_kl_gamma_normal",
            "_kl_gumbel_infinity",
            "_kl_gumbel_normal",
            "_kl_laplace_infinity",
            "_kl_laplace_normal",
            "_kl_normal_infinity",
            "_kl_normal_gumbel",
            "_kl_pareto_infinity",
            "_kl_pareto_exponential",
            "_kl_pareto_gamma",
            "_kl_pareto_normal",
            "_kl_poisson_infinity",
            "_kl_uniform_beta",
            "_kl_uniform_continuous_bernoulli",
            "_kl_uniform_exponetial",
            "_kl_uniform_gamma",
            "_kl_uniform_gumbel",
            "_kl_uniform_normal",
            "_kl_uniform_pareto",
            "_kl_independent_independent",
            "_kl_cauchy_cauchy",
            "decorator",
            "__init__",
            "__eq__",
            "__le__"
        ],
        "classes": [
            "_Match"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/kumaraswamy.py",
        "functions": [
            "_moments",
            "__init__",
            "expand",
            "mean",
            "variance",
            "entropy"
        ],
        "classes": [
            "Kumaraswamy"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/laplace.py",
        "functions": [
            "mean",
            "variance",
            "stddev",
            "__init__",
            "expand",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy"
        ],
        "classes": [
            "Laplace"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/lkj_cholesky.py",
        "functions": [
            "__init__",
            "expand",
            "sample",
            "log_prob"
        ],
        "classes": [
            "LKJCholesky"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/logistic_normal.py",
        "functions": [
            "__init__",
            "expand",
            "loc",
            "scale"
        ],
        "classes": [
            "LogisticNormal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/lowrank_multivariate_normal.py",
        "functions": [
            "_batch_capacitance_tril",
            "_batch_lowrank_logdet",
            "_batch_lowrank_mahalanobis",
            "__init__",
            "expand",
            "mean",
            "variance",
            "scale_tril",
            "covariance_matrix",
            "precision_matrix",
            "rsample",
            "log_prob",
            "entropy"
        ],
        "classes": [
            "LowRankMultivariateNormal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/mixture_same_family.py",
        "functions": [
            "__init__",
            "expand",
            "support",
            "mixture_distribution",
            "component_distribution",
            "mean",
            "variance",
            "cdf",
            "log_prob",
            "sample",
            "_pad",
            "_pad_mixture_dimensions",
            "__repr__"
        ],
        "classes": [
            "MixtureSameFamily"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/multinomial.py",
        "functions": [
            "mean",
            "variance",
            "__init__",
            "expand",
            "_new",
            "support",
            "logits",
            "probs",
            "param_shape",
            "sample",
            "log_prob"
        ],
        "classes": [
            "Multinomial"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/multivariate_normal.py",
        "functions": [
            "_batch_mv",
            "_batch_mahalanobis",
            "_precision_to_scale_tril",
            "__init__",
            "expand",
            "scale_tril",
            "covariance_matrix",
            "precision_matrix",
            "mean",
            "variance",
            "rsample",
            "log_prob",
            "entropy"
        ],
        "classes": [
            "MultivariateNormal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/negative_binomial.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "mean",
            "variance",
            "logits",
            "probs",
            "param_shape",
            "_gamma",
            "sample",
            "log_prob"
        ],
        "classes": [
            "NegativeBinomial"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/normal.py",
        "functions": [
            "mean",
            "stddev",
            "variance",
            "__init__",
            "expand",
            "sample",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Normal"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/one_hot_categorical.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "_param",
            "probs",
            "logits",
            "mean",
            "variance",
            "param_shape",
            "sample",
            "log_prob",
            "entropy",
            "enumerate_support",
            "rsample"
        ],
        "classes": [
            "OneHotCategorical",
            "OneHotCategoricalStraightThrough"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/pareto.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "support",
            "entropy"
        ],
        "classes": [
            "Pareto"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/poisson.py",
        "functions": [
            "mean",
            "variance",
            "__init__",
            "expand",
            "sample",
            "log_prob",
            "_natural_params",
            "_log_normalizer"
        ],
        "classes": [
            "Poisson"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/relaxed_bernoulli.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "logits",
            "probs",
            "param_shape",
            "rsample",
            "log_prob",
            "__init__",
            "expand",
            "temperature",
            "logits",
            "probs"
        ],
        "classes": [
            "LogitRelaxedBernoulli",
            "RelaxedBernoulli"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/relaxed_categorical.py",
        "functions": [
            "__init__",
            "expand",
            "_new",
            "param_shape",
            "logits",
            "probs",
            "rsample",
            "log_prob",
            "__init__",
            "expand",
            "temperature",
            "logits",
            "probs"
        ],
        "classes": [
            "ExpRelaxedCategorical",
            "RelaxedOneHotCategorical"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/studentT.py",
        "functions": [
            "mean",
            "variance",
            "__init__",
            "expand",
            "rsample",
            "log_prob",
            "entropy"
        ],
        "classes": [
            "StudentT"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/transformed_distribution.py",
        "functions": [
            "__init__",
            "expand",
            "support",
            "has_rsample",
            "sample",
            "rsample",
            "log_prob",
            "_monotonize_cdf",
            "cdf",
            "icdf"
        ],
        "classes": [
            "TransformedDistribution"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/transforms.py",
        "functions": [
            "_clipped_sigmoid",
            "__init__",
            "event_dim",
            "inv",
            "sign",
            "with_cache",
            "__eq__",
            "__ne__",
            "__call__",
            "_inv_call",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "__repr__",
            "forward_shape",
            "inverse_shape",
            "__init__",
            "domain",
            "codomain",
            "bijective",
            "sign",
            "inv",
            "with_cache",
            "__eq__",
            "__repr__",
            "__call__",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__init__",
            "__eq__",
            "domain",
            "codomain",
            "bijective",
            "sign",
            "inv",
            "with_cache",
            "__call__",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__repr__",
            "__init__",
            "with_cache",
            "domain",
            "codomain",
            "bijective",
            "sign",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "__repr__",
            "forward_shape",
            "inverse_shape",
            "__init__",
            "domain",
            "codomain",
            "with_cache",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__eq__",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "__init__",
            "with_cache",
            "__eq__",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__eq__",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "__eq__",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "__eq__",
            "_call",
            "_inverse",
            "__init__",
            "event_dim",
            "domain",
            "codomain",
            "with_cache",
            "__eq__",
            "sign",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__eq__",
            "_call",
            "_inverse",
            "forward_shape",
            "inverse_shape",
            "__eq__",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "forward_shape",
            "inverse_shape",
            "__eq__",
            "_call",
            "_inverse",
            "__init__",
            "event_dim",
            "length",
            "with_cache",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "bijective",
            "domain",
            "codomain",
            "__init__",
            "with_cache",
            "_slice",
            "_call",
            "_inverse",
            "log_abs_det_jacobian",
            "bijective",
            "domain",
            "codomain"
        ],
        "classes": [
            "Transform",
            "_InverseTransform",
            "ComposeTransform",
            "IndependentTransform",
            "ReshapeTransform",
            "ExpTransform",
            "PowerTransform",
            "SigmoidTransform",
            "TanhTransform",
            "AbsTransform",
            "AffineTransform",
            "CorrCholeskyTransform",
            "SoftmaxTransform",
            "StickBreakingTransform",
            "LowerCholeskyTransform",
            "CatTransform",
            "StackTransform"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/uniform.py",
        "functions": [
            "mean",
            "stddev",
            "variance",
            "__init__",
            "expand",
            "support",
            "rsample",
            "log_prob",
            "cdf",
            "icdf",
            "entropy"
        ],
        "classes": [
            "Uniform"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/utils.py",
        "functions": [
            "broadcast_all",
            "_standard_normal",
            "_sum_rightmost",
            "logits_to_probs",
            "clamp_probs",
            "probs_to_logits",
            "tril_matrix_to_vec",
            "vec_to_tril_matrix",
            "__init__",
            "__get__"
        ],
        "classes": [
            "lazy_property"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/von_mises.py",
        "functions": [
            "_eval_poly",
            "_log_modified_bessel_fn",
            "_rejection_sample",
            "__init__",
            "log_prob",
            "sample",
            "expand",
            "mean",
            "variance"
        ],
        "classes": [
            "VonMises"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/weibull.py",
        "functions": [
            "__init__",
            "expand",
            "mean",
            "variance",
            "entropy"
        ],
        "classes": [
            "Weibull"
        ]
    },
    {
        "file_path": "../pytorch/torch/distributions/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fft/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/for_onnx/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/graph.py",
        "functions": [
            "_shadows_builtin_name",
            "_is_magic",
            "_snake_case",
            "get_qualified_name",
            "_find_module_of_method",
            "_format_args",
            "_format_target",
            "_type_repr",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__len__",
            "__iter__",
            "__reversed__",
            "__init__",
            "nodes",
            "graph_copy",
            "__deepcopy__",
            "create_node",
            "erase_node",
            "inserting_before",
            "inserting_after",
            "placeholder",
            "get_attr",
            "call_module",
            "call_method",
            "call_function",
            "node_copy",
            "output",
            "_target_to_str",
            "_create_unique_name",
            "python_code",
            "__str__",
            "print_tabular",
            "lint",
            "illegal_shadowing_name",
            "register_modules_used",
            "type_repr",
            "register_last_uses",
            "delete_unused_values",
            "emit_node",
            "format_arg",
            "pretty_print_target",
            "format_node",
            "check_arg"
        ],
        "classes": [
            "_InsertPoint",
            "_node_list",
            "Graph"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/graph_module.py",
        "functions": [
            "exec_with_source",
            "patched_getline",
            "_forward_from_src",
            "deserialize_graphmodule",
            "_copy_attr",
            "_assign_attr",
            "__new__",
            "__init__",
            "graph",
            "graph",
            "to_folder",
            "code",
            "recompile",
            "__reduce__",
            "__deepcopy__",
            "__copy__",
            "__str__",
            "__init__",
            "is_leaf_module",
            "_gen_model_repr",
            "print_full_traceback",
            "wrapped_call"
        ],
        "classes": [
            "GraphModule",
            "CodeOnlyModule",
            "KeepModules",
            "GraphModuleImpl"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/immutable_collections.py",
        "functions": [
            "_no_mutation",
            "_create_immutable_container"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/interpreter.py",
        "functions": [
            "__init__",
            "run",
            "run_node",
            "placeholder",
            "get_attr",
            "call_function",
            "call_method",
            "call_module",
            "output",
            "fetch_attr",
            "fetch_args_kwargs_from_env",
            "map_nodes_to_values",
            "__init__",
            "placeholder",
            "get_attr",
            "call_module",
            "transform",
            "load_arg",
            "__init__",
            "is_leaf_module"
        ],
        "classes": [
            "Interpreter",
            "Transformer",
            "TransformerTracer"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/node.py",
        "functions": [
            "map_arg",
            "map_aggregate",
            "__init__",
            "next",
            "prev",
            "prepend",
            "append",
            "_remove_from_list",
            "args",
            "args",
            "kwargs",
            "kwargs",
            "all_input_nodes",
            "__update_args_kwargs",
            "__repr__",
            "replace_all_uses_with",
            "maybe_replace_node"
        ],
        "classes": [
            "Node"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/proxy.py",
        "functions": [
            "_define_reflectable",
            "create_node",
            "proxy",
            "create_proxy",
            "create_arg",
            "to_bool",
            "iter",
            "keys",
            "__init__",
            "__init__",
            "__repr__",
            "__getattr__",
            "__call__",
            "__iter__",
            "__bool__",
            "keys",
            "__len__",
            "__torch_function__",
            "__init__",
            "node",
            "__call__",
            "scope",
            "impl",
            "impl",
            "no_node"
        ],
        "classes": [
            "TracerBase",
            "GraphAppendingTracer",
            "TraceError",
            "Proxy",
            "Attribute"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/subgraph_rewriter.py",
        "functions": [
            "replace_pattern",
            "__init__",
            "matches_subgraph_from_anchor",
            "_match_nodes",
            "overlaps_with_prev_match",
            "attributes_are_equal",
            "mark_node_as_replaced",
            "pattern_is_contained"
        ],
        "classes": [
            "Match",
            "SubgraphMatcher"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/symbolic_trace.py",
        "functions": [
            "_patch_function",
            "_find_proxy",
            "_create_wrapped_func",
            "_create_wrapped_method",
            "_patch_wrapped_functions",
            "_autowrap_check",
            "wrap",
            "symbolic_trace",
            "__init__",
            "create_arg",
            "is_leaf_module",
            "path_of_module",
            "call_module",
            "create_args_for_root",
            "trace",
            "find_proxy",
            "wrapped",
            "wrapped",
            "revert",
            "revert",
            "revert",
            "revert",
            "__init__",
            "patch",
            "patch_method",
            "visit_once",
            "__enter__",
            "__exit__",
            "proxy_placeholder",
            "collect_tensor_attrs",
            "module_getattr_wrapper",
            "module_call_wrapper",
            "forward"
        ],
        "classes": [
            "Tracer",
            "_PatchedFn",
            "_PatchedFnSetItem",
            "_PatchedFnDel",
            "_PatchedFnSetAttr",
            "_Patcher"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/passes/shape_prop.py",
        "functions": [
            "run_node",
            "propagate"
        ],
        "classes": [
            "ShapeProp"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/passes/split_module.py",
        "functions": [
            "split_module",
            "__init__",
            "__repr__",
            "record_cross_partition_use"
        ],
        "classes": [
            "Partition"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/passes/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/accelerator_partitioner.py",
        "functions": [
            "reset_partition_device",
            "combine_two_partitions",
            "set_parents_and_children",
            "reorganize_partitions",
            "get_bfs_level_partition",
            "get_node_to_partition_mapping",
            "get_device_to_partitions_mapping",
            "check_dependency",
            "__init__",
            "__str__",
            "__init__",
            "create_node",
            "calculate_extra_mem_bytes_needed_for",
            "find_device_for",
            "__init__",
            "partition_graph",
            "find_single_partition",
            "size_based_partition",
            "do_partition",
            "dump_dag",
            "create_partition",
            "create_single_node_partition",
            "sparse_nn_partition",
            "cost_aware_partition",
            "kl_based_partition",
            "aot_based_partition",
            "find_device_based_on_size",
            "combine_partitions_based_on_size",
            "calculate_mem_bytes_needed",
            "find_partition_to_combine_based_on_size",
            "reset_partition_in_sparse_nn",
            "is_embedding_node",
            "try_combining_partitions",
            "search_combination",
            "swap_nodes",
            "try_swap_nodes",
            "swap_node_to_partition"
        ],
        "classes": [
            "DAGNode",
            "DAG",
            "PartitionResult",
            "Partitioner"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/const_fold.py",
        "functions": [
            "_make_tuple",
            "split_const_subgraphs",
            "__init__",
            "__call__",
            "run_folding",
            "mod_partition"
        ],
        "classes": [
            "FoldedGraphModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/fuser.py",
        "functions": [
            "_parent_name",
            "matches_module_pattern",
            "replace_node_module",
            "fuse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/graph_manipulation.py",
        "functions": [
            "replace_target_nodes_with",
            "get_size_of_all_nodes",
            "get_size_of_node",
            "serialize_shape",
            "serialize_tensor_quantization",
            "serialize_weight",
            "serialize_leaf_module",
            "serialize_module"
        ],
        "classes": [
            "size_bytes"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/merge_matmul.py",
        "functions": [
            "get_first_dim",
            "legalize_graph",
            "may_depend_on",
            "are_nodes_independent",
            "merge_matmul"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/param_fetch.py",
        "functions": [
            "default_matching",
            "extract_attrs_for_lowering",
            "lift_lowering_attrs_to_nodes"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/partitioner_utils.py",
        "functions": [
            "get_extra_size_of",
            "get_latency_of_one_partition",
            "get_partition_to_latency_mapping",
            "get_comm_latency_between",
            "get_latency_of_partitioned_graph",
            "__init__",
            "__str__",
            "recalculate_mem_size",
            "add_node",
            "remove_node",
            "get_top_nodes",
            "dfs_helper",
            "dfs_helper",
            "get_top_partitions"
        ],
        "classes": [
            "Partition",
            "Device",
            "NodeLatency",
            "PartitionLatency",
            "PartitionMode",
            "PartitionerConfig"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/rewriter.py",
        "functions": [
            "_rewrite",
            "rewrite",
            "visit_Assert",
            "trace",
            "rewrite_module",
            "__init__"
        ],
        "classes": [
            "AST_Rewriter",
            "RewritingTracer",
            "RewrittenModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/fx/_experimental/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/annotations.py",
        "functions": [
            "get_signature",
            "is_function_or_method",
            "is_vararg",
            "get_param_names",
            "check_fn",
            "parse_type_line",
            "get_type_line",
            "split_type_line",
            "try_real_annotations",
            "get_enum_value_type",
            "try_ann_to_type",
            "ann_to_type",
            "__init__",
            "__getattr__",
            "__init__",
            "__getitem__",
            "get_parameter_type",
            "as_ann",
            "fake_rcb"
        ],
        "classes": [
            "Module",
            "EvalEnv"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/cuda.py",
        "functions": [
            "get_current_device_index",
            "get_device_index",
            "stream",
            "Stream",
            "Event",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "device",
            "StreamContext"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/frontend.py",
        "functions": [
            "is_reserved_name",
            "build_withitems",
            "build_stmts",
            "get_class_properties",
            "get_jit_class_def",
            "normalize_source_lines",
            "get_jit_def",
            "build_class_def",
            "build_def",
            "build_param_list",
            "build_param",
            "get_default_args",
            "get_default_args_for_class",
            "find_before",
            "__init__",
            "__str__",
            "__init__",
            "is_classmethod",
            "remove_prefix",
            "__call__",
            "build_withitem",
            "build_Expr",
            "build_Assign",
            "build_AnnAssign",
            "build_Delete",
            "build_Return",
            "build_Raise",
            "build_Assert",
            "build_AugAssign",
            "build_While",
            "build_For",
            "build_If",
            "build_Print",
            "build_Pass",
            "build_Break",
            "build_Continue",
            "build_With",
            "build_Attribute",
            "build_Call",
            "build_Ellipsis",
            "build_Name",
            "build_NameConstant",
            "build_BinOp",
            "build_UnaryOp",
            "build_BoolOp",
            "build_IfExp",
            "build_Compare",
            "build_Subscript",
            "build_List",
            "build_Tuple",
            "build_Dict",
            "build_Num",
            "build_Constant",
            "build_Str",
            "build_JoinedStr",
            "build_ListComp",
            "build_DictComp",
            "build_Starred",
            "get_char",
            "build_SliceExpr",
            "build_Index",
            "build_ExtSlice"
        ],
        "classes": [
            "FrontendError",
            "NotSupportedError",
            "UnsupportedNodeError",
            "FrontendTypeError",
            "Builder",
            "WithItemBuilder",
            "StmtBuilder",
            "ExprBuilder"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/quantized.py",
        "functions": [
            "apply_permutation",
            "quantize_rnn_cell_modules",
            "quantize_linear_modules",
            "quantize_rnn_modules",
            "__init__",
            "_unpack",
            "_pack",
            "forward",
            "extra_repr",
            "__init__",
            "_unpack",
            "_pack",
            "forward",
            "extra_repr",
            "__init__",
            "extra_repr",
            "check_forward_input",
            "check_forward_hidden",
            "_unpack",
            "_pack",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "check_input",
            "get_expected_hidden_size",
            "check_hidden_size",
            "check_forward_args",
            "permute_hidden",
            "__init__",
            "forward_impl",
            "forward_tensor",
            "forward_packed",
            "permute_hidden",
            "check_forward_args",
            "forward",
            "forward_impl",
            "forward_tensor",
            "forward_packed",
            "forward",
            "get_weight_bias"
        ],
        "classes": [
            "QuantizedLinear",
            "QuantizedLinearFP16",
            "QuantizedRNNCellBase",
            "QuantizedRNNCell",
            "QuantizedLSTMCell",
            "QuantizedGRUCell",
            "QuantizedRNNBase",
            "QuantizedLSTM",
            "QuantizedGRU"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/supported_ops.py",
        "functions": [
            "_hidden",
            "_emit_type",
            "_emit_arg",
            "_emit_args",
            "_emit_ret",
            "_emit_rets",
            "_emit_schema",
            "_get_tensor_ops",
            "_get_nn_functional_ops",
            "_get_builtins_helper",
            "_is_math_fn",
            "_get_torchscript_builtins",
            "_get_math_builtins",
            "_get_global_builtins",
            "_list_supported_ops",
            "is_tensor_method",
            "emit_block"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/unsupported_tensor_ops.py",
        "functions": [
            "execWrapper",
            "_gen_unsupported_methods_properties",
            "_list_unsupported_tensor_ops"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_async.py",
        "functions": [
            "fork",
            "wait"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_builtins.py",
        "functions": [
            "_gen_torch_functional_registered_ops",
            "_is_special_functional_bound_op",
            "_get_builtin_table",
            "_register_builtin",
            "_find_builtin",
            "register_all"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_freeze.py",
        "functions": [
            "freeze",
            "optimize_frozen_module"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_fuser.py",
        "functions": [
            "optimized_execution",
            "fuser",
            "_graph_for"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_logging.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_pickle.py",
        "functions": [
            "build_intlist",
            "build_tensorlist",
            "build_doublelist",
            "build_boollist",
            "build_tensor_from_id",
            "restore_type_tag"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_recursive.py",
        "functions": [
            "make_stub",
            "make_stub_from_method",
            "make_stubs_from_exported_methods",
            "_get_valid_constant",
            "infer_concrete_type_builder",
            "create_methods_and_properties_from_stubs",
            "create_hooks_from_stubs",
            "get_module_concrete_type",
            "create_script_module",
            "create_script_module_impl",
            "script_model_defines_attr",
            "add_python_attr_to_scripted_model",
            "get_overload_annotations",
            "get_overload_name_mapping",
            "_check_no_signature",
            "make_stubs_for_overloads",
            "check_module_initialized",
            "infer_methods_to_compile",
            "get_hook_stubs",
            "get_property_stubs",
            "interface_script",
            "try_compile_fn",
            "wrap_cpp_module",
            "compile_unbound_method",
            "lazy_bind",
            "__init__",
            "infer_type",
            "__init__",
            "get_or_create_concrete_type",
            "init_fn",
            "ignore_overloaded",
            "infer_interface_methods_to_compile",
            "init_fn",
            "lazy_binding_method",
            "init_fn"
        ],
        "classes": [
            "SourceContext",
            "ConcreteTypeStore"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/_script.py",
        "functions": [
            "_is_new_style_class",
            "_compile_and_register_class",
            "script_method",
            "call_prepare_scriptable_func_impl",
            "call_prepare_scriptable_func",
            "script",
            "_check_overload_defaults",
            "_compile_function_with_overload",
            "_get_overloads",
            "_check_directly_compile_overloaded",
            "interface",
            "_recursive_compile_class",
            "_unwrap_optional",
            "Attribute",
            "__init__",
            "keys",
            "values",
            "__len__",
            "__delitem__",
            "items",
            "__setitem__",
            "__contains__",
            "__getitem__",
            "__init__",
            "items",
            "__contains__",
            "__setitem__",
            "__getitem__",
            "__init__",
            "__get__",
            "__init__",
            "__getattr__",
            "_get_methods",
            "_make_fail",
            "init_then_script",
            "__init__",
            "__getattr__",
            "__setattr__",
            "define",
            "_replicate_for_data_parallel",
            "__init__",
            "_construct",
            "_finalize_scriptmodule",
            "_reconstruct",
            "graph",
            "inlined_graph",
            "code",
            "code_with_constants",
            "save",
            "_save_for_lite_interpreter",
            "_save_to_buffer_for_lite_interpreter",
            "save_to_buffer",
            "get_debug_state",
            "extra_repr",
            "graph_for",
            "original_name",
            "define",
            "__getattr__",
            "__setattr__",
            "__getstate__",
            "__copy__",
            "__deepcopy__",
            "forward_magic_method",
            "__iter__",
            "__getitem__",
            "__len__",
            "__contains__",
            "__dir__",
            "__bool__",
            "_replicate_for_data_parallel",
            "fail",
            "__init__",
            "__init__",
            "init_fn",
            "make_stubs"
        ],
        "classes": [
            "OrderedDictWrapper",
            "OrderedModuleDict",
            "ScriptMeta",
            "_CachedForward",
            "ScriptWarning",
            "ConstMap",
            "ScriptModule",
            "RecursiveScriptModule",
            "ScriptModule",
            "RecursiveScriptModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/_serialization.py",
        "functions": [
            "save",
            "load",
            "validate_map_location"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/_state.py",
        "functions": [
            "disable",
            "enable",
            "_add_script_class",
            "_get_script_class",
            "_try_get_jit_cached_overloads",
            "_set_jit_overload_cache",
            "_try_get_jit_cached_function",
            "_set_jit_function_cache",
            "__init__",
            "parse_env",
            "__bool__"
        ],
        "classes": [
            "EnabledProxy"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/_trace.py",
        "functions": [
            "_create_interpreter_name_lookup_fn",
            "_unique_state_dict",
            "_clone_inputs",
            "_time",
            "verify",
            "_verify_equal",
            "indent",
            "_check_trace",
            "make_tuple",
            "make_module",
            "wrap_check_inputs",
            "trace",
            "trace_module",
            "is_tracing",
            "_script_if_tracing",
            "_get_trace_graph",
            "_get_interpreter_name_for_var",
            "__init__",
            "forward",
            "clone_input",
            "run_fwd_bwd",
            "__init__",
            "ignore_lib_warnings",
            "__init__",
            "forward",
            "__getattr__",
            "__setattr__",
            "_get_name",
            "extra_repr",
            "_reconstruct",
            "wrapper",
            "wrapper",
            "graph_diagnostic_info",
            "wrap_retval",
            "run_mod_and_filter_tensor_outputs",
            "maybe_warn_nondeterministic",
            "compare_outputs",
            "register_submods",
            "check_unique"
        ],
        "classes": [
            "ONNXTracedModule",
            "TracingCheckError",
            "TracerWarning",
            "TracedModule",
            "TopLevelTracedModule",
            "QualnameWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/jit/__init__.py",
        "functions": [
            "export_opnames",
            "annotate",
            "script_if_tracing",
            "isinstance"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/jit/mobile/__init__.py",
        "functions": [
            "_load_for_lite_interpreter",
            "_export_operator_list",
            "__init__",
            "__call__",
            "find_method",
            "forward",
            "run_method"
        ],
        "classes": [
            "LiteScriptModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/linalg/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/pool.py",
        "functions": [
            "clean_worker",
            "_setup_queues",
            "_repopulate_pool"
        ],
        "classes": [
            "Pool"
        ]
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/queue.py",
        "functions": [
            "__init__",
            "send",
            "recv",
            "__getattr__",
            "__init__",
            "_make_methods"
        ],
        "classes": [
            "ConnectionWrapper",
            "Queue",
            "SimpleQueue"
        ]
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/reductions.py",
        "functions": [
            "rebuild_event",
            "reduce_event",
            "rebuild_tensor",
            "rebuild_cuda_tensor",
            "reduce_tensor",
            "fd_id",
            "storage_from_cache",
            "rebuild_storage_fd",
            "rebuild_storage_filename",
            "rebuild_storage_empty",
            "reduce_storage",
            "init_reductions",
            "__init__",
            "expired",
            "__del__",
            "__init__",
            "_after_fork",
            "__setitem__",
            "free_dead_references"
        ],
        "classes": [
            "StorageWeakRef",
            "SharedCache"
        ]
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/spawn.py",
        "functions": [
            "_wrap",
            "start_processes",
            "spawn",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "pids",
            "join",
            "__init__"
        ],
        "classes": [
            "ProcessException",
            "ProcessRaisedException",
            "ProcessExitedException",
            "ProcessContext",
            "SpawnContext"
        ]
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/_atfork.py",
        "functions": [
            "register_after_fork",
            "_register",
            "_register",
            "wrapper"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/multiprocessing/__init__.py",
        "functions": [
            "set_sharing_strategy",
            "get_sharing_strategy",
            "get_all_sharing_strategies"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/common_types.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/cpp.py",
        "functions": [
            "__init__",
            "cpp_dict",
            "items",
            "keys",
            "values",
            "__iter__",
            "__len__",
            "__contains__",
            "__getitem__",
            "__init__",
            "_apply",
            "training",
            "training",
            "__repr__"
        ],
        "classes": [
            "OrderedDictWrapper",
            "ModuleWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/functional.py",
        "functions": [
            "fractional_max_pool2d_with_indices",
            "_fractional_max_pool2d",
            "fractional_max_pool3d_with_indices",
            "_fractional_max_pool3d",
            "max_pool1d_with_indices",
            "_max_pool1d",
            "max_pool2d_with_indices",
            "_max_pool2d",
            "max_pool3d_with_indices",
            "_max_pool3d",
            "_unpool_output_size",
            "max_unpool1d",
            "max_unpool2d",
            "max_unpool3d",
            "lp_pool2d",
            "lp_pool1d",
            "adaptive_max_pool1d_with_indices",
            "_adaptive_max_pool1d",
            "adaptive_max_pool2d_with_indices",
            "_adaptive_max_pool2d",
            "adaptive_max_pool3d_with_indices",
            "_adaptive_max_pool3d",
            "adaptive_avg_pool2d",
            "adaptive_avg_pool3d",
            "dropout",
            "alpha_dropout",
            "dropout2d",
            "dropout3d",
            "feature_alpha_dropout",
            "_threshold",
            "relu",
            "glu",
            "hardtanh",
            "relu6",
            "elu",
            "selu",
            "celu",
            "leaky_relu",
            "prelu",
            "rrelu",
            "gelu",
            "hardshrink",
            "tanhshrink",
            "softsign",
            "_get_softmax_dim",
            "softmin",
            "softmax",
            "gumbel_softmax",
            "log_softmax",
            "tanh",
            "sigmoid",
            "hardsigmoid",
            "linear",
            "bilinear",
            "silu",
            "hardswish",
            "_no_grad_embedding_renorm_",
            "embedding",
            "embedding_bag",
            "_verify_batch_size",
            "batch_norm",
            "instance_norm",
            "layer_norm",
            "group_norm",
            "local_response_norm",
            "ctc_loss",
            "nll_loss",
            "poisson_nll_loss",
            "gaussian_nll_loss",
            "kl_div",
            "cross_entropy",
            "binary_cross_entropy",
            "binary_cross_entropy_with_logits",
            "smooth_l1_loss",
            "l1_loss",
            "mse_loss",
            "margin_ranking_loss",
            "hinge_embedding_loss",
            "multilabel_margin_loss",
            "soft_margin_loss",
            "multilabel_soft_margin_loss",
            "cosine_embedding_loss",
            "multi_margin_loss",
            "upsample",
            "upsample",
            "upsample",
            "interpolate",
            "interpolate",
            "interpolate",
            "interpolate",
            "interpolate",
            "upsample_nearest",
            "upsample_nearest",
            "upsample_nearest",
            "upsample_bilinear",
            "upsample_bilinear",
            "upsample_bilinear",
            "upsample_bilinear",
            "upsample_bilinear",
            "grid_sample",
            "affine_grid",
            "_pad",
            "pairwise_distance",
            "triplet_margin_loss",
            "triplet_margin_with_distance_loss",
            "normalize",
            "assert_int_or_pair",
            "unfold",
            "fold",
            "_pad_circular",
            "multi_head_attention_forward"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/grad.py",
        "functions": [
            "_grad_input_padding",
            "conv1d_input",
            "conv1d_weight",
            "conv2d_input",
            "conv2d_weight",
            "conv3d_input",
            "conv3d_weight",
            "dim_size"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/init.py",
        "functions": [
            "_no_grad_uniform_",
            "_no_grad_normal_",
            "_no_grad_trunc_normal_",
            "_no_grad_fill_",
            "_no_grad_zero_",
            "calculate_gain",
            "uniform_",
            "normal_",
            "trunc_normal_",
            "constant_",
            "ones_",
            "zeros_",
            "eye_",
            "dirac_",
            "_calculate_fan_in_and_fan_out",
            "xavier_uniform_",
            "xavier_normal_",
            "_calculate_correct_fan",
            "kaiming_uniform_",
            "kaiming_normal_",
            "orthogonal_",
            "sparse_",
            "_make_deprecate",
            "norm_cdf",
            "deprecated_init"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parameter.py",
        "functions": [
            "__new__",
            "__deepcopy__",
            "__repr__",
            "__reduce_ex__",
            "__new__",
            "materialize",
            "shape",
            "share_memory_",
            "__repr__",
            "__reduce_ex__",
            "__torch_function__"
        ],
        "classes": [
            "Parameter",
            "UninitializedParameter"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/_reduction.py",
        "functions": [
            "get_enum",
            "legacy_get_string",
            "legacy_get_enum"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/backends/thnn.py",
        "functions": [
            "_get_thnn_function_backend"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/backends/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/modules/fused.py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": [
            "_FusedModule",
            "ConvReLU1d",
            "ConvReLU2d",
            "ConvReLU3d",
            "LinearReLU",
            "ConvBn1d",
            "ConvBn2d",
            "ConvBnReLU1d",
            "ConvBnReLU2d",
            "ConvBn3d",
            "ConvBnReLU3d",
            "BNReLU2d",
            "BNReLU3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/qat/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/qat/modules/conv_fused.py",
        "functions": [
            "update_bn_stats",
            "freeze_bn_stats",
            "__init__",
            "reset_running_stats",
            "reset_bn_parameters",
            "reset_parameters",
            "update_bn_stats",
            "freeze_bn_stats",
            "_forward",
            "extra_repr",
            "forward",
            "train",
            "_load_from_state_dict",
            "from_float",
            "__init__",
            "__init__",
            "forward",
            "from_float",
            "__init__",
            "__init__",
            "forward",
            "from_float",
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "_ConvBnNd",
            "ConvBn1d",
            "ConvBnReLU1d",
            "ConvBn2d",
            "ConvBnReLU2d",
            "ConvReLU2d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/qat/modules/linear_relu.py",
        "functions": [
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "LinearReLU"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/qat/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/modules/bn_relu.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "BNReLU2d",
            "BNReLU3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/modules/conv_relu.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "ConvReLU1d",
            "ConvReLU2d",
            "ConvReLU3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/modules/linear_relu.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "LinearReLU"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/_reference/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/_reference/modules/linear_relu.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name"
        ],
        "classes": [
            "LinearReLU"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/intrinsic/quantized/_reference/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/modules/activation.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "extra_repr",
            "forward",
            "__init__",
            "forward",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "_reset_parameters",
            "__setstate__",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "forward",
            "forward",
            "__init__",
            "__setstate__",
            "forward",
            "extra_repr",
            "__init__",
            "__setstate__",
            "forward",
            "extra_repr",
            "forward",
            "__init__",
            "__setstate__",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "Threshold",
            "ReLU",
            "RReLU",
            "Hardtanh",
            "ReLU6",
            "Sigmoid",
            "Hardsigmoid",
            "Tanh",
            "SiLU",
            "Hardswish",
            "ELU",
            "CELU",
            "SELU",
            "GLU",
            "GELU",
            "Hardshrink",
            "LeakyReLU",
            "LogSigmoid",
            "Softplus",
            "Softshrink",
            "MultiheadAttention",
            "PReLU",
            "Softsign",
            "Tanhshrink",
            "Softmin",
            "Softmax",
            "Softmax2d",
            "LogSoftmax"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/adaptive.py",
        "functions": [
            "__init__",
            "reset_parameters",
            "forward",
            "_get_full_log_prob",
            "log_prob",
            "predict"
        ],
        "classes": [
            "AdaptiveLogSoftmaxWithLoss"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/batchnorm.py",
        "functions": [
            "__init__",
            "reset_running_stats",
            "reset_parameters",
            "_check_input_dim",
            "extra_repr",
            "_load_from_state_dict",
            "__init__",
            "forward",
            "_check_input_dim",
            "_check_input_dim",
            "_check_input_dim",
            "__init__",
            "_check_input_dim",
            "_specify_ddp_gpu_num",
            "forward",
            "convert_sync_batchnorm"
        ],
        "classes": [
            "_NormBase",
            "_BatchNorm",
            "BatchNorm1d",
            "BatchNorm2d",
            "BatchNorm3d",
            "SyncBatchNorm"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/channelshuffle.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "ChannelShuffle"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/container.py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "_get_item_by_idx",
            "__getitem__",
            "__setitem__",
            "__delitem__",
            "__len__",
            "__dir__",
            "__iter__",
            "forward",
            "__init__",
            "_get_abs_string_index",
            "__getitem__",
            "__setitem__",
            "__delitem__",
            "__len__",
            "__iter__",
            "__iadd__",
            "__dir__",
            "insert",
            "append",
            "extend",
            "forward",
            "__init__",
            "__getitem__",
            "__setitem__",
            "__delitem__",
            "__len__",
            "__iter__",
            "__contains__",
            "clear",
            "pop",
            "keys",
            "items",
            "values",
            "update",
            "forward",
            "__init__",
            "__setstate__",
            "_get_abs_string_index",
            "__getitem__",
            "__getitem__",
            "__getitem__",
            "__setitem__",
            "__setattr__",
            "__len__",
            "__iter__",
            "__iadd__",
            "__dir__",
            "append",
            "extend",
            "extra_repr",
            "__call__",
            "_replicate_for_data_parallel",
            "__init__",
            "__setstate__",
            "__getitem__",
            "__setitem__",
            "__delitem__",
            "__setattr__",
            "__len__",
            "__iter__",
            "__contains__",
            "clear",
            "pop",
            "keys",
            "items",
            "values",
            "update",
            "extra_repr",
            "__call__",
            "_replicate_for_data_parallel"
        ],
        "classes": [
            "Container",
            "Sequential",
            "ModuleList",
            "ModuleDict",
            "ParameterList",
            "ParameterDict"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/conv.py",
        "functions": [
            "_conv_forward",
            "__init__",
            "reset_parameters",
            "extra_repr",
            "__setstate__",
            "__init__",
            "_conv_forward",
            "forward",
            "__init__",
            "_conv_forward",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "_output_padding",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "reset_parameters",
            "initialize_parameters",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": [
            "_ConvNd",
            "Conv1d",
            "Conv2d",
            "Conv3d",
            "_ConvTransposeNd",
            "ConvTranspose1d",
            "ConvTranspose2d",
            "ConvTranspose3d",
            "_ConvTransposeMixin",
            "_LazyConvXdMixin",
            "LazyConv1d",
            "LazyConv2d",
            "LazyConv3d",
            "LazyConvTranspose1d",
            "LazyConvTranspose2d",
            "LazyConvTranspose3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/distance.py",
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "PairwiseDistance",
            "CosineSimilarity"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/dropout.py",
        "functions": [
            "__init__",
            "extra_repr",
            "forward",
            "forward",
            "forward",
            "forward",
            "forward"
        ],
        "classes": [
            "_DropoutNd",
            "Dropout",
            "Dropout2d",
            "Dropout3d",
            "AlphaDropout",
            "FeatureAlphaDropout"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/flatten.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "_require_tuple_tuple",
            "_require_tuple_int",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "Flatten",
            "Unflatten"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/fold.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "Fold",
            "Unfold"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/instancenorm.py",
        "functions": [
            "__init__",
            "_check_input_dim",
            "_load_from_state_dict",
            "forward",
            "_check_input_dim",
            "_check_input_dim",
            "_check_input_dim"
        ],
        "classes": [
            "_InstanceNorm",
            "InstanceNorm1d",
            "InstanceNorm2d",
            "InstanceNorm3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/lazy.py",
        "functions": [
            "_register_load_state_dict_pre_hook",
            "register_forward_pre_hook",
            "_lazy_load_hook",
            "_get_name",
            "_infer_parameters",
            "_parameters",
            "_buffers",
            "_non_persistent_buffers_set",
            "_load_hook",
            "_initialize_hook",
            "__init__",
            "_save_to_state_dict",
            "_lazy_load_hook",
            "initialize_parameters",
            "has_uninitialized_params",
            "_infer_parameters",
            "_replicate_for_data_parallel"
        ],
        "classes": [
            "_LazyProtocol",
            "LazyModuleMixin"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/linear.py",
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "reset_parameters",
            "forward",
            "extra_repr",
            "__init__",
            "__init__",
            "reset_parameters",
            "forward",
            "extra_repr",
            "__init__",
            "reset_parameters",
            "initialize_parameters"
        ],
        "classes": [
            "Identity",
            "Linear",
            "_LinearWithBias",
            "Bilinear",
            "LazyLinear"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/loss.py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "_Loss",
            "_WeightedLoss",
            "L1Loss",
            "NLLLoss",
            "NLLLoss2d",
            "PoissonNLLLoss",
            "GaussianNLLLoss",
            "KLDivLoss",
            "MSELoss",
            "BCELoss",
            "BCEWithLogitsLoss",
            "HingeEmbeddingLoss",
            "MultiLabelMarginLoss",
            "SmoothL1Loss",
            "SoftMarginLoss",
            "CrossEntropyLoss",
            "MultiLabelSoftMarginLoss",
            "CosineEmbeddingLoss",
            "MarginRankingLoss",
            "MultiMarginLoss",
            "TripletMarginLoss",
            "TripletMarginWithDistanceLoss",
            "CTCLoss"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/module.py",
        "functions": [
            "_addindent",
            "register_module_forward_pre_hook",
            "register_module_forward_hook",
            "register_module_backward_hook",
            "register_module_full_backward_hook",
            "_forward_unimplemented",
            "__repr__",
            "__init__",
            "register_buffer",
            "register_parameter",
            "add_module",
            "_apply",
            "apply",
            "cuda",
            "xpu",
            "cpu",
            "type",
            "float",
            "double",
            "half",
            "bfloat16",
            "to",
            "to",
            "to",
            "to",
            "register_backward_hook",
            "register_full_backward_hook",
            "_get_backward_hooks",
            "_maybe_warn_non_full_backward_hook",
            "register_forward_pre_hook",
            "register_forward_hook",
            "_slow_forward",
            "_call_impl",
            "__setstate__",
            "__getattr__",
            "__setattr__",
            "__delattr__",
            "_register_state_dict_hook",
            "_save_to_state_dict",
            "state_dict",
            "state_dict",
            "state_dict",
            "_register_load_state_dict_pre_hook",
            "_load_from_state_dict",
            "load_state_dict",
            "_named_members",
            "parameters",
            "named_parameters",
            "buffers",
            "named_buffers",
            "children",
            "named_children",
            "modules",
            "named_modules",
            "train",
            "eval",
            "requires_grad_",
            "zero_grad",
            "share_memory",
            "_get_name",
            "extra_repr",
            "__repr__",
            "__dir__",
            "_replicate_for_data_parallel",
            "compute_should_use_set_data",
            "convert",
            "remove_from",
            "load"
        ],
        "classes": [
            "_IncompatibleKeys",
            "Module"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/normalization.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "reset_parameters",
            "forward",
            "extra_repr",
            "__init__",
            "reset_parameters",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "LocalResponseNorm",
            "CrossMapLRN2d",
            "LayerNorm",
            "GroupNorm"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/padding.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "__init__",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": [
            "_ConstantPadNd",
            "ConstantPad1d",
            "ConstantPad2d",
            "ConstantPad3d",
            "_ReflectionPadNd",
            "ReflectionPad1d",
            "ReflectionPad2d",
            "_ReplicationPadNd",
            "ReplicationPad1d",
            "ReplicationPad2d",
            "ReplicationPad3d",
            "ZeroPad2d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/pixelshuffle.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "extra_repr"
        ],
        "classes": [
            "PixelShuffle",
            "PixelUnshuffle"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/pooling.py",
        "functions": [
            "__init__",
            "extra_repr",
            "forward",
            "forward",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__setstate__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "extra_repr",
            "forward",
            "forward",
            "__init__",
            "extra_repr",
            "forward",
            "forward",
            "forward",
            "__init__",
            "extra_repr",
            "forward",
            "forward",
            "forward"
        ],
        "classes": [
            "_MaxPoolNd",
            "MaxPool1d",
            "MaxPool2d",
            "MaxPool3d",
            "_MaxUnpoolNd",
            "MaxUnpool1d",
            "MaxUnpool2d",
            "MaxUnpool3d",
            "_AvgPoolNd",
            "AvgPool1d",
            "AvgPool2d",
            "AvgPool3d",
            "FractionalMaxPool2d",
            "FractionalMaxPool3d",
            "_LPPoolNd",
            "LPPool1d",
            "LPPool2d",
            "_AdaptiveMaxPoolNd",
            "AdaptiveMaxPool1d",
            "AdaptiveMaxPool2d",
            "AdaptiveMaxPool3d",
            "_AdaptiveAvgPoolNd",
            "AdaptiveAvgPool1d",
            "AdaptiveAvgPool2d",
            "AdaptiveAvgPool3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/rnn.py",
        "functions": [
            "apply_permutation",
            "__init__",
            "__setattr__",
            "flatten_parameters",
            "_apply",
            "reset_parameters",
            "check_input",
            "get_expected_hidden_size",
            "check_hidden_size",
            "check_forward_args",
            "permute_hidden",
            "forward",
            "extra_repr",
            "__setstate__",
            "all_weights",
            "_replicate_for_data_parallel",
            "__init__",
            "__init__",
            "get_expected_cell_size",
            "check_forward_args",
            "permute_hidden",
            "forward",
            "forward",
            "forward",
            "__init__",
            "forward",
            "forward",
            "forward",
            "__init__",
            "extra_repr",
            "check_forward_input",
            "check_forward_hidden",
            "reset_parameters",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "RNNBase",
            "RNN",
            "LSTM",
            "GRU",
            "RNNCellBase",
            "RNNCell",
            "LSTMCell",
            "GRUCell"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/sparse.py",
        "functions": [
            "__init__",
            "reset_parameters",
            "_fill_padding_idx_with_zero",
            "forward",
            "extra_repr",
            "from_pretrained",
            "__init__",
            "reset_parameters",
            "forward",
            "extra_repr",
            "from_pretrained"
        ],
        "classes": [
            "Embedding",
            "EmbeddingBag"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/transformer.py",
        "functions": [
            "_get_clones",
            "_get_activation_fn",
            "__init__",
            "forward",
            "generate_square_subsequent_mask",
            "_reset_parameters",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__setstate__",
            "forward",
            "__init__",
            "__setstate__",
            "forward"
        ],
        "classes": [
            "Transformer",
            "TransformerEncoder",
            "TransformerDecoder",
            "TransformerEncoderLayer",
            "TransformerDecoderLayer"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/upsampling.py",
        "functions": [
            "__init__",
            "forward",
            "extra_repr",
            "__init__",
            "__init__"
        ],
        "classes": [
            "Upsample",
            "UpsamplingNearest2d",
            "UpsamplingBilinear2d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/utils.py",
        "functions": [
            "_ntuple",
            "_reverse_repeat_tuple",
            "_list_with_default",
            "parse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/modules/_functions.py",
        "functions": [
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "SyncBatchNorm",
            "CrossMapLRN2d",
            "BackwardHookFunction"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/comm.py",
        "functions": [
            "broadcast",
            "broadcast_coalesced",
            "reduce_add",
            "reduce_add_coalesced",
            "scatter",
            "gather"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/data_parallel.py",
        "functions": [
            "_check_balance",
            "data_parallel",
            "warn_imbalance",
            "__init__",
            "forward",
            "replicate",
            "scatter",
            "parallel_apply",
            "gather"
        ],
        "classes": [
            "DataParallel"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/distributed.py",
        "functions": [
            "_find_tensors",
            "_dump_DDP_relevant_env_vars",
            "__init__",
            "_sync_params_and_buffers",
            "_ddp_init_helper",
            "__getstate__",
            "__setstate__",
            "_check_default_group",
            "no_sync",
            "forward",
            "scatter",
            "_recursive_to",
            "to_kwargs",
            "parallel_apply",
            "gather",
            "train",
            "get_ddp_logging_data",
            "_schedule_shadow_all_reduce_for_fwd_pass",
            "_check_global_requires_backward_grad_sync",
            "_check_and_sync_module_buffers",
            "_sync_final_model",
            "_match_all_reduce_for_bwd_pass",
            "_match_unused_params_allreduce",
            "join",
            "register_comm_hook",
            "_register_builtin_comm_hook",
            "_distributed_broadcast_coalesced",
            "will_sync_module_buffers",
            "_find_common_rank",
            "_sync_params",
            "_passing_sync_batchnorm_handle",
            "_check_comm_hook",
            "_set_params_and_buffers_to_ignore_for_model",
            "parameters",
            "produces_sparse_gradient",
            "to_map",
            "model_parameters"
        ],
        "classes": [
            "_DDPUnevenInputsConfig",
            "DistributedDataParallel"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/parallel_apply.py",
        "functions": [
            "get_a_var",
            "parallel_apply",
            "_worker"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/replicate.py",
        "functions": [
            "_is_script_module",
            "_is_script_method",
            "_init_script_module",
            "_is_jit_enabled",
            "_replicatable_module",
            "_broadcast_coalesced_reshape",
            "replicate",
            "descendant_modules"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/scatter_gather.py",
        "functions": [
            "is_namedtuple",
            "scatter",
            "scatter_kwargs",
            "gather",
            "scatter_map",
            "gather_map"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/_functions.py",
        "functions": [
            "_get_stream",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "Broadcast",
            "ReduceAddCoalesced",
            "Gather",
            "Scatter"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/parallel/__init__.py",
        "functions": [
            "DistributedDataParallelCPU"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/qat/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/qat/modules/conv.py",
        "functions": [
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "Conv2d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/qat/modules/linear.py",
        "functions": [
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "Linear"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/qat/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantizable/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantizable/modules/rnn.py",
        "functions": [
            "__init__",
            "forward",
            "initialize_hidden",
            "_get_name",
            "from_params",
            "from_float",
            "__init__",
            "forward",
            "from_params",
            "__init__",
            "forward",
            "from_float",
            "weight_ih",
            "weight_hh",
            "bias_ih",
            "bias_hh",
            "weight_ih_reverse",
            "weight_hh_reverse",
            "bias_ih_reverse",
            "bias_hh_reverse",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "from_observed"
        ],
        "classes": [
            "LSTMCell",
            "_LSTMSingleLayer",
            "_LSTMLayer",
            "LSTM"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantizable/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/functional.py",
        "functions": [
            "avg_pool2d",
            "avg_pool3d",
            "adaptive_avg_pool2d",
            "adaptive_avg_pool3d",
            "conv1d",
            "conv2d",
            "conv3d",
            "interpolate",
            "linear",
            "max_pool1d",
            "max_pool2d",
            "celu",
            "leaky_relu",
            "hardtanh",
            "hardswish",
            "threshold",
            "elu",
            "hardsigmoid",
            "clamp",
            "upsample",
            "upsample_bilinear",
            "upsample_nearest"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/dynamic/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/dynamic/modules/linear.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "extra_repr",
            "_load_from_state_dict",
            "from_float"
        ],
        "classes": [
            "Linear"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/dynamic/modules/rnn.py",
        "functions": [
            "apply_permutation",
            "__init__",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__init__",
            "_get_name",
            "extra_repr",
            "__repr__",
            "check_input",
            "get_expected_hidden_size",
            "check_hidden_size",
            "check_forward_args",
            "permute_hidden",
            "_load_from_state_dict",
            "from_float",
            "_weight_bias",
            "get_weight",
            "get_bias",
            "__init__",
            "_get_name",
            "forward_impl",
            "forward_tensor",
            "forward_packed",
            "permute_hidden",
            "check_forward_args",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "check_forward_args",
            "forward_impl",
            "forward_tensor",
            "forward_packed",
            "permute_hidden",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "extra_repr",
            "check_forward_input",
            "check_forward_hidden",
            "from_float",
            "_weight_bias",
            "get_weight",
            "get_bias",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__init__",
            "_get_name",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "forward",
            "from_float",
            "process_weights",
            "retrieve_weight_bias",
            "quantize_and_pack"
        ],
        "classes": [
            "PackedParameter",
            "RNNBase",
            "LSTM",
            "GRU",
            "RNNCellBase",
            "RNNCell",
            "LSTMCell",
            "GRUCell"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/dynamic/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/activation.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "ReLU6",
            "Hardswish",
            "ELU",
            "LeakyReLU",
            "Sigmoid"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/batchnorm.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "BatchNorm2d",
            "BatchNorm3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/conv.py",
        "functions": [
            "_reverse_repeat_padding",
            "__init__",
            "_init",
            "set_weight_bias",
            "bias",
            "_weight_bias",
            "extra_repr",
            "_save_to_state_dict",
            "__getstate__",
            "_load_from_state_dict",
            "__setstate__",
            "get_qconv",
            "from_float",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward",
            "from_float",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward",
            "from_float",
            "__init__",
            "_input_padding",
            "from_float",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward",
            "__init__",
            "_get_name",
            "set_weight_bias",
            "_weight_bias",
            "weight",
            "bias",
            "forward"
        ],
        "classes": [
            "_ConvNd",
            "Conv1d",
            "Conv2d",
            "Conv3d",
            "_ConvTransposeNd",
            "ConvTranspose1d",
            "ConvTranspose2d",
            "ConvTranspose3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/embedding_ops.py",
        "functions": [
            "__init__",
            "set_weight",
            "_weight",
            "forward",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__repr__",
            "__init__",
            "forward",
            "_get_name",
            "__repr__",
            "extra_repr",
            "set_weight",
            "weight",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "EmbeddingPackedParams",
            "Embedding",
            "EmbeddingBag"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/functional_modules.py",
        "functions": [
            "__init__",
            "forward",
            "add",
            "add_scalar",
            "mul",
            "mul_scalar",
            "cat",
            "add_relu",
            "forward",
            "add",
            "add_scalar",
            "mul",
            "mul_scalar",
            "cat",
            "add_relu",
            "__init__",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "_get_name",
            "extra_repr",
            "forward",
            "add",
            "add_scalar",
            "mul",
            "mul_scalar",
            "cat",
            "add_relu",
            "from_float"
        ],
        "classes": [
            "FloatFunctional",
            "FXFloatFunctional",
            "QFunctional"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/linear.py",
        "functions": [
            "__init__",
            "set_weight_bias",
            "_weight_bias",
            "forward",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__getstate__",
            "__setstate__",
            "__repr__",
            "__init__",
            "_get_name",
            "extra_repr",
            "__repr__",
            "forward",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "_weight_bias",
            "weight",
            "bias",
            "set_weight_bias",
            "from_float"
        ],
        "classes": [
            "LinearPackedParams",
            "Linear"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/normalization.py",
        "functions": [
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float",
            "__init__",
            "forward",
            "_get_name",
            "from_float"
        ],
        "classes": [
            "LayerNorm",
            "GroupNorm",
            "InstanceNorm1d",
            "InstanceNorm2d",
            "InstanceNorm3d"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/utils.py",
        "functions": [
            "_quantize_weight",
            "_ntuple_from_first",
            "hide_packed_params_repr",
            "parse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/modules/__init__.py",
        "functions": [
            "__init__",
            "forward",
            "from_float",
            "extra_repr",
            "__init__",
            "forward",
            "from_float"
        ],
        "classes": [
            "Quantize",
            "DeQuantize"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/_reference/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/_reference/modules/linear.py",
        "functions": [
            "__init__",
            "_get_name",
            "forward",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "_weight_bias",
            "set_weight_bias"
        ],
        "classes": [
            "Linear"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/quantized/_reference/modules/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/utils/clip_grad.py",
        "functions": [
            "clip_grad_norm_",
            "clip_grad_norm",
            "clip_grad_value_"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/utils/convert_parameters.py",
        "functions": [
            "parameters_to_vector",
            "vector_to_parameters",
            "_check_param_device"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/utils/fusion.py",
        "functions": [
            "fuse_conv_bn_eval",
            "fuse_conv_bn_weights",
            "fuse_linear_bn_eval",
            "fuse_linear_bn_weights"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/utils/memory_format.py",
        "functions": [
            "convert_conv2d_weight_memory_format"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/nn/utils/prune.py",
        "functions": [
            "identity",
            "random_unstructured",
            "l1_unstructured",
            "random_structured",
            "ln_structured",
            "global_unstructured",
            "custom_from_mask",
            "remove",
            "is_pruned",
            "_validate_pruning_amount_init",
            "_validate_pruning_amount",
            "_validate_structured_pruning",
            "_compute_nparams_toprune",
            "_validate_pruning_dim",
            "_compute_norm",
            "__init__",
            "__call__",
            "compute_mask",
            "apply_mask",
            "apply",
            "prune",
            "remove",
            "__init__",
            "add_pruning_method",
            "__len__",
            "__iter__",
            "__getitem__",
            "compute_mask",
            "compute_mask",
            "apply",
            "__init__",
            "compute_mask",
            "apply",
            "__init__",
            "compute_mask",
            "apply",
            "__init__",
            "compute_mask",
            "apply",
            "__init__",
            "compute_mask",
            "apply",
            "__init__",
            "compute_mask",
            "apply",
            "_get_composite_method",
            "_combine_masks",
            "make_mask",
            "make_mask"
        ],
        "classes": [
            "BasePruningMethod",
            "PruningContainer",
            "Identity",
            "RandomUnstructured",
            "L1Unstructured",
            "RandomStructured",
            "LnStructured",
            "CustomFromMask"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/utils/rnn.py",
        "functions": [
            "bind",
            "_packed_sequence_init_args",
            "_packed_sequence_init",
            "invert_permutation",
            "pack_padded_sequence",
            "pad_packed_sequence",
            "pad_sequence",
            "pack_sequence",
            "__new__",
            "pin_memory",
            "cuda",
            "cpu",
            "double",
            "float",
            "half",
            "long",
            "int",
            "short",
            "char",
            "byte",
            "to",
            "is_cuda",
            "is_pinned"
        ],
        "classes": [
            "PackedSequence"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/utils/spectral_norm.py",
        "functions": [
            "spectral_norm",
            "remove_spectral_norm",
            "__init__",
            "reshape_weight_to_matrix",
            "compute_weight",
            "remove",
            "__call__",
            "_solve_v_and_rescale",
            "apply",
            "__init__",
            "__call__",
            "__init__",
            "__call__"
        ],
        "classes": [
            "SpectralNorm",
            "SpectralNormLoadStateDictPreHook",
            "SpectralNormStateDictHook"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/utils/weight_norm.py",
        "functions": [
            "weight_norm",
            "remove_weight_norm",
            "__init__",
            "compute_weight",
            "apply",
            "remove",
            "__call__"
        ],
        "classes": [
            "WeightNorm"
        ]
    },
    {
        "file_path": "../pytorch/torch/nn/utils/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/operators.py",
        "functions": [
            "shape_as_tensor",
            "reshape_from_tensor_shape"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_caffe2.py",
        "functions": [
            "register_quantized_ops",
            "_permute_helper",
            "nchw2nhwc",
            "nhwc2nchw",
            "linear_prepack",
            "linear",
            "conv_prepack",
            "conv2d",
            "conv2d_relu",
            "add",
            "relu",
            "quantize_per_tensor",
            "dequantize",
            "_empty_affine_quantized",
            "upsample_nearest2d",
            "max_pool2d",
            "avg_pool2d",
            "reshape",
            "slice",
            "cat",
            "sigmoid"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_helper.py",
        "functions": [
            "_parse_arg",
            "_maybe_get_const",
            "_maybe_get_scalar",
            "_get_const",
            "_unpack_list",
            "_is_packed_list",
            "parse_args",
            "_scalar",
            "_if_scalar_type_as",
            "_is_none",
            "_is_value",
            "_is_tensor",
            "_is_tensor_list",
            "_get_tensor_rank",
            "_get_tensor_sizes",
            "_get_tensor_dim_size",
            "_unimplemented",
            "_onnx_unsupported",
            "_onnx_opset_unsupported",
            "_onnx_opset_unsupported_detailed",
            "_block_list_in_opset",
            "_try_get_scalar_type",
            "_select_helper",
            "_slice_helper",
            "_hardtanh_helper",
            "_is_fp",
            "_generate_wrapped_number",
            "_sort_helper",
            "_topk_helper",
            "_interpolate_warning",
            "_unsqueeze_helper",
            "_squeeze_helper",
            "_reducesum_helper",
            "_interpolate_size_to_scales",
            "_interpolate_get_scales_if_available",
            "_get_interpolate_attributes",
            "_interpolate_get_scales",
            "_interpolate_get_scales_and_mode",
            "_interpolate_helper",
            "__interpolate_helper",
            "_unbind_helper",
            "_scatter_helper",
            "_arange_cast_helper",
            "_size_helper",
            "_index_fill_reshape_helper",
            "_avgpool_helper",
            "assert_training_mode",
            "_flatten_helper",
            "_is_split_static",
            "_optional_input_placeholder_tensor",
            "_set_opset_version",
            "_set_operator_export_type",
            "_set_training_mode",
            "_set_onnx_shape_inference",
            "_cast_func_template",
            "decorator",
            "symbolic_fn",
            "symbolic_fn",
            "_is_all_integral",
            "wrapper"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset10.py",
        "functions": [
            "sort",
            "topk",
            "_max_pool",
            "_avg_pool",
            "_interpolate",
            "__interpolate",
            "_slice",
            "slice",
            "flip",
            "fmod",
            "embedding_bag",
            "fake_quantize_per_tensor_affine",
            "isinf",
            "symbolic_fn",
            "symbolic_fn",
            "symbolic_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset11.py",
        "functions": [
            "hardtanh",
            "clamp",
            "clamp_min",
            "clamp_max",
            "select",
            "index_put",
            "pixel_shuffle",
            "_interpolate",
            "__interpolate",
            "gather",
            "scatter",
            "cumsum",
            "masked_select",
            "masked_scatter",
            "_len",
            "__getitem_",
            "append",
            "add",
            "insert",
            "pop",
            "Delete",
            "cat",
            "stack",
            "_unique2",
            "_avg_pool",
            "unique_dim",
            "topk",
            "sort",
            "round",
            "split",
            "split_with_sizes",
            "unbind",
            "_prepare_onnx_paddings",
            "constant_pad_nd",
            "reflection_pad",
            "replication_pad",
            "det",
            "logdet",
            "arange",
            "_dim_arange",
            "size",
            "squeeze",
            "unsqueeze",
            "mm",
            "index",
            "index_fill",
            "index_copy",
            "__rshift_",
            "__lshift_",
            "_get_im2col_indices_along_dim",
            "_get_im2col_padded_input",
            "_get_im2col_output_shape",
            "im2col",
            "narrow",
            "flatten",
            "embedding_bag",
            "prim_ConstantChunk",
            "_cast_if_not_none",
            "symbolic_fn",
            "_get_arange_dtype"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset12.py",
        "functions": [
            "einsum",
            "dropout",
            "nll_loss",
            "nll_loss2d",
            "binary_cross_entropy_with_logits",
            "celu",
            "argmax",
            "argmin",
            "pow",
            "ge",
            "le",
            "unfold"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset13.py",
        "functions": [
            "softmax",
            "log_softmax",
            "frobenius_norm",
            "split",
            "split_with_sizes",
            "unsafe_split",
            "unsafe_split_with_sizes",
            "unbind",
            "nonzero_numpy",
            "where",
            "fake_quantize_per_channel_affine",
            "_reduce_op_symbolic",
            "_reduce_with_dtype",
            "unsafe_chunk",
            "symbolic",
            "reduce",
            "reduce_nodim",
            "reduce_dim"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset7.py",
        "functions": [
            "max",
            "min"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset8.py",
        "functions": [
            "_interpolate",
            "__interpolate",
            "_try_cast_integer_to_float",
            "_cast_to_type",
            "_comparison_operator",
            "gt",
            "lt",
            "bmm",
            "matmul",
            "prelu",
            "mm",
            "addmm",
            "flatten",
            "_constant_fill",
            "empty",
            "empty_like",
            "zeros",
            "zeros_like",
            "ones",
            "ones_like",
            "full",
            "full_like",
            "repeat",
            "symbolic_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_opset9.py",
        "functions": [
            "unused",
            "_shape_as_tensor",
            "_reshape_from_tensor",
            "reshape",
            "reshape_as",
            "add",
            "sub",
            "rsub",
            "mul",
            "div",
            "floor_divide",
            "floordiv",
            "true_divide",
            "reciprocal",
            "cat",
            "stack",
            "_list",
            "mm",
            "bmm",
            "matmul",
            "addmm",
            "neg",
            "sqrt",
            "rsqrt",
            "tanh",
            "sin",
            "cos",
            "tan",
            "asin",
            "acos",
            "atan",
            "sigmoid",
            "sign",
            "_slice",
            "_maybe_cast_reduce_op_input",
            "_reduce_op_symbolic",
            "overload_by_arg_count",
            "_reduce_with_dtype",
            "cumsum",
            "_sample_dirichlet",
            "_standard_gamma",
            "t",
            "expand",
            "expand_as",
            "embedding",
            "embedding_bag",
            "size",
            "transpose",
            "permute",
            "view",
            "view_as",
            "prim_ConstantSplit",
            "prim_ConstantChunk",
            "unsafe_chunk",
            "split",
            "unsafe_split",
            "split_with_sizes",
            "unsafe_split_with_sizes",
            "unbind",
            "select",
            "square",
            "squeeze",
            "prelu",
            "silu",
            "relu",
            "ceil",
            "floor",
            "_len",
            "threshold",
            "leaky_relu",
            "glu",
            "softmax",
            "softplus",
            "get_pool_ceil_padding",
            "_max_pool",
            "_avg_pool",
            "_adaptive_pool",
            "_prepare_onnx_paddings",
            "_convert_padding_node",
            "constant_pad_nd",
            "reflection_pad",
            "replication_pad",
            "_interpolate",
            "__interpolate",
            "bitwise_not",
            "wrap_logical_op_with_cast_to",
            "wrap_logical_op_with_cast_to_and_from",
            "wrap_logical_op_with_negation",
            "eq",
            "ne",
            "gt",
            "gt_impl",
            "lt",
            "lt_impl",
            "ge",
            "le",
            "__and_",
            "__or_",
            "logical_and",
            "logical_or",
            "logical_xor",
            "__rshift_",
            "__lshift_",
            "where",
            "log_softmax",
            "_convolution",
            "conv1d",
            "conv2d",
            "conv3d",
            "conv_transpose1d",
            "conv_transpose2d",
            "conv_transpose3d",
            "batch_norm",
            "layer_norm",
            "instance_norm",
            "unfold",
            "elu",
            "selu",
            "index_select",
            "index_put",
            "index_fill",
            "index_copy",
            "type_as",
            "cosine_similarity",
            "clone",
            "abs",
            "log",
            "log1p",
            "pow",
            "clamp",
            "clamp_min",
            "clamp_max",
            "max",
            "min",
            "exp",
            "dropout",
            "_unsupported_dropout",
            "norm",
            "conv_tbc",
            "_unique",
            "_unique2",
            "empty",
            "empty_like",
            "new_empty",
            "scalar_tensor",
            "tensor",
            "zeros",
            "zeros_like",
            "new_zeros",
            "ones",
            "ones_like",
            "full",
            "full_like",
            "new_full",
            "eye",
            "slice",
            "hardtanh",
            "hardswish",
            "alias",
            "unsqueeze",
            "sort",
            "numel",
            "topk",
            "to",
            "repeat",
            "pixel_shuffle",
            "_generic_rnn",
            "_lstm_full",
            "_lstm_packed",
            "lstm",
            "_one_hidden_rnn",
            "_dim_arange",
            "detach",
            "contiguous",
            "_pack_padded_sequence",
            "_pad_packed_sequence",
            "randn",
            "rand",
            "randn_like",
            "rand_like",
            "rrelu",
            "log_sigmoid",
            "erf",
            "flatten",
            "nonzero",
            "nonzero_numpy",
            "isnan",
            "_any",
            "_all",
            "narrow",
            "argmax",
            "argmin",
            "scatter",
            "scatter_add",
            "log2",
            "prim_shape",
            "prim_max",
            "prim_data",
            "is_floating_point",
            "__isnot_",
            "prim_unchecked_cast",
            "prim_dtype",
            "prim_tolist",
            "one_hot",
            "gather",
            "_var_mean",
            "std",
            "var",
            "var_mean",
            "std_mean",
            "logsumexp",
            "arange",
            "masked_fill",
            "index",
            "frobenius_norm",
            "multinomial",
            "baddbmm",
            "meshgrid",
            "remainder",
            "gelu",
            "group_norm",
            "_weight_norm",
            "dim",
            "__getitem_",
            "take",
            "_kl_div_log_target_impl",
            "_kl_div_non_log_target_impl",
            "kl_div",
            "as_strided",
            "__derive_index",
            "__range_length",
            "isNotNoneAnd",
            "symbolic",
            "wrapper",
            "reduce",
            "symbolic_fn",
            "symbolic_fn",
            "symbolic_fn",
            "symbolic_fn",
            "decorator",
            "decorator",
            "wrap_with_not",
            "feature_dropout",
            "reform_weights",
            "transform_weights_no_bias",
            "transform_weights",
            "retrieve_state",
            "_rnn_full",
            "_rnn_packed",
            "symbolic",
            "_get_arange_dtype",
            "try_mask_to_index",
            "reduce_nodim",
            "reduce_dim",
            "wrap_with_cast",
            "wrap_with_cast"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/symbolic_registry.py",
        "functions": [
            "register_version",
            "register_ops_helper",
            "register_ops_in_version",
            "get_ops_in_version",
            "is_registered_version",
            "register_op",
            "is_registered_op",
            "get_op_supported_version",
            "get_registered_op"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/utils.py",
        "functions": [
            "is_in_onnx_export",
            "select_model_mode_for_export",
            "export",
            "_is_constant_tensor_list",
            "_split_tensor_list_constants",
            "_optimize_graph",
            "warn_on_static_input_change",
            "_resolve_args_by_export_type",
            "_decide_keep_init_as_input",
            "_decide_add_node_names",
            "_decide_constant_folding",
            "_decide_external_data_format",
            "_decide_input_format",
            "_trace",
            "_trace_and_get_graph_from_model",
            "_create_jit_graph",
            "_get_named_param_dict",
            "_model_to_graph",
            "export_to_pretty_string",
            "_export_to_pretty_string",
            "_find_missing_ops_onnx_export",
            "_export",
            "_set_input_and_output_names",
            "_run_symbolic_method",
            "_is_onnx_list",
            "_add_attribute",
            "_scalar",
            "_newNode",
            "_graph_op",
            "_block_op",
            "_add_block",
            "_add_input_to_block",
            "_add_output_to_block",
            "_find_symbolic_in_registry",
            "_run_symbolic_function",
            "_graph_at",
            "_graph_constant",
            "_node_getitem",
            "register_custom_op_symbolic",
            "_validate_dynamic_axes",
            "set_names",
            "const_if_tensor"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/onnx/__init__.py",
        "functions": [
            "_export",
            "export",
            "export_to_pretty_string",
            "_export_to_pretty_string",
            "_optimize_trace",
            "select_model_mode_for_export",
            "_run_symbolic_function",
            "_run_symbolic_method",
            "is_in_onnx_export",
            "register_custom_op_symbolic"
        ],
        "classes": [
            "ExportTypes"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/adadelta.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "Adadelta"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/adagrad.py",
        "functions": [
            "__init__",
            "share_memory",
            "step"
        ],
        "classes": [
            "Adagrad"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/adam.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step"
        ],
        "classes": [
            "Adam"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/adamax.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "Adamax"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/adamw.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step"
        ],
        "classes": [
            "AdamW"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/asgd.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "ASGD"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/lbfgs.py",
        "functions": [
            "_cubic_interpolate",
            "_strong_wolfe",
            "__init__",
            "_numel",
            "_gather_flat_grad",
            "_add_grad",
            "_clone_param",
            "_set_param",
            "_directional_evaluate",
            "step",
            "obj_func"
        ],
        "classes": [
            "LBFGS"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/lr_scheduler.py",
        "functions": [
            "__init__",
            "state_dict",
            "load_state_dict",
            "get_last_lr",
            "get_lr",
            "print_lr",
            "step",
            "__init__",
            "state_dict",
            "load_state_dict",
            "get_lr",
            "__init__",
            "state_dict",
            "load_state_dict",
            "get_lr",
            "__init__",
            "get_lr",
            "_get_closed_form_lr",
            "__init__",
            "get_lr",
            "_get_closed_form_lr",
            "__init__",
            "get_lr",
            "_get_closed_form_lr",
            "__init__",
            "get_lr",
            "_get_closed_form_lr",
            "__init__",
            "_reset",
            "step",
            "_reduce_lr",
            "in_cooldown",
            "is_better",
            "_init_is_better",
            "state_dict",
            "load_state_dict",
            "__init__",
            "_format_param",
            "_triangular_scale_fn",
            "_triangular2_scale_fn",
            "_exp_range_scale_fn",
            "get_lr",
            "__init__",
            "get_lr",
            "step",
            "__init__",
            "_format_param",
            "_annealing_cos",
            "_annealing_linear",
            "get_lr",
            "with_counter",
            "wrapper",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "_LRScheduler",
            "LambdaLR",
            "MultiplicativeLR",
            "StepLR",
            "MultiStepLR",
            "ExponentialLR",
            "CosineAnnealingLR",
            "ReduceLROnPlateau",
            "CyclicLR",
            "CosineAnnealingWarmRestarts",
            "OneCycleLR",
            "_enable_get_lr_call",
            "_enable_get_lr_call"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/optimizer.py",
        "functions": [
            "__repr__",
            "__init__",
            "__getstate__",
            "__setstate__",
            "__repr__",
            "_hook_for_profile",
            "state_dict",
            "load_state_dict",
            "zero_grad",
            "step",
            "add_param_group",
            "profile_hook_step",
            "pack_group",
            "cast",
            "update_group",
            "wrapper"
        ],
        "classes": [
            "_RequiredParameter",
            "Optimizer"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/rmsprop.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step"
        ],
        "classes": [
            "RMSprop"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/rprop.py",
        "functions": [
            "__init__",
            "step"
        ],
        "classes": [
            "Rprop"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/sgd.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step"
        ],
        "classes": [
            "SGD"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/sparse_adam.py",
        "functions": [
            "__init__",
            "step",
            "make_sparse"
        ],
        "classes": [
            "SparseAdam"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/swa_utils.py",
        "functions": [
            "update_bn",
            "__init__",
            "forward",
            "update_parameters",
            "__init__",
            "_format_param",
            "_linear_anneal",
            "_cosine_anneal",
            "_get_initial_lr",
            "get_lr",
            "avg_fn"
        ],
        "classes": [
            "AveragedModel",
            "SWALR"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_functional.py",
        "functions": [
            "_make_sparse",
            "adagrad",
            "adam",
            "adamw",
            "sgd",
            "adadelta",
            "rmsprop"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/optim/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/adadelta.py",
        "functions": [
            "__init__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "Adadelta"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/adam.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "Adam"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/adamax.py",
        "functions": [
            "__init__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "Adamax"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/adamw.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "AdamW"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/asgd.py",
        "functions": [
            "__init__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "ASGD"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/rmsprop.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "RMSprop"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/rprop.py",
        "functions": [
            "__init__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "Rprop"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/sgd.py",
        "functions": [
            "__init__",
            "__setstate__",
            "step",
            "zero_grad"
        ],
        "classes": [
            "SGD"
        ]
    },
    {
        "file_path": "../pytorch/torch/optim/_multi_tensor/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/package/exporter.py",
        "functions": [
            "_is_builtin_or_stdlib_module",
            "_read_file",
            "__init__",
            "save_source_file",
            "save_source_string",
            "_import_module",
            "_module_exists",
            "_write_dep_graph",
            "_get_source_of_module",
            "require_module_if_not_provided",
            "require_module",
            "save_module",
            "save_pickle",
            "save_text",
            "save_binary",
            "mock",
            "extern",
            "save_extern_module",
            "save_mock_module",
            "_module_is_already_provided",
            "_persistent_id",
            "__enter__",
            "__exit__",
            "_write",
            "close",
            "_filename",
            "_can_implicitly_extern",
            "__init__",
            "__str__",
            "matches",
            "_glob_list",
            "_glob_to_re",
            "component_to_re"
        ],
        "classes": [
            "PackageExporter",
            "_GlobGroup"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/find_file_dependencies.py",
        "functions": [
            "run",
            "__init__",
            "_absmodule",
            "visit_Import",
            "visit_ImportFrom"
        ],
        "classes": [
            "_ExtractModuleReferences"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/importer.py",
        "functions": [
            "patched_getfile",
            "__init__",
            "import_module",
            "load_binary",
            "load_text",
            "load_pickle",
            "id",
            "_read_extern",
            "_make_module",
            "_load_module",
            "_compile_source",
            "get_source",
            "_install_on_parent",
            "_do_find_and_load",
            "_find_and_load",
            "_gcd_import",
            "_handle_fromlist",
            "__import__",
            "_get_package",
            "_zipfile_path",
            "_get_or_create_package",
            "_add_file",
            "_add_extern",
            "__init__",
            "find_class",
            "__init__",
            "__init__"
        ],
        "classes": [
            "PackageImporter",
            "_UnpicklerWrapper",
            "_PathNode",
            "_PackageNode",
            "_ModuleNode",
            "_ExternNode"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/_custom_import_pickler.py",
        "functions": [
            "import_module_from_importers",
            "create_custom_import_pickler",
            "__init__",
            "save_global"
        ],
        "classes": [
            "CustomImportPickler"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/_importlib.py",
        "functions": [
            "_normalize_line_endings",
            "_resolve_name",
            "_sanity_check",
            "_calc___package__",
            "_normalize_path"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/package/_mangling.py",
        "functions": [
            "is_mangled",
            "demangle",
            "get_mangle_prefix",
            "__init__",
            "mangle",
            "parent_name"
        ],
        "classes": [
            "PackageMangler"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/_mock.py",
        "functions": [
            "install_method",
            "__new__",
            "__init__",
            "__repr__",
            "_not_implemented"
        ],
        "classes": [
            "MockedObject"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/_mock_zipreader.py",
        "functions": [
            "__init__",
            "storage",
            "__init__",
            "get_record",
            "get_storage_from_record",
            "get_all_records"
        ],
        "classes": [
            "_HasStorage",
            "MockZipReader"
        ]
    },
    {
        "file_path": "../pytorch/torch/package/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/profiler/profiler.py",
        "functions": [
            "schedule",
            "_default_schedule_fn",
            "tensorboard_trace_handler",
            "schedule_fn",
            "handler_fn",
            "__init__",
            "__enter__",
            "__exit__",
            "step",
            "export_chrome_trace",
            "export_stacks",
            "key_averages",
            "events",
            "_enter_actions",
            "_exit_actions",
            "_start_warmup",
            "_start_trace",
            "_stop_trace"
        ],
        "classes": [
            "ProfilerAction",
            "profile"
        ]
    },
    {
        "file_path": "../pytorch/torch/profiler/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/sparse/__init__.py",
        "functions": [
            "addmm",
            "mm",
            "sum",
            "softmax",
            "log_softmax"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/check_kernel_launches.py",
        "functions": [
            "check_code_for_cuda_kernel_launches",
            "check_file",
            "check_cuda_kernel_launches"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/__init__.py",
        "functions": [
            "is_integral",
            "is_quantized",
            "_unravel_index",
            "_compare_tensors_internal",
            "_compare_scalars_internal",
            "assert_allclose",
            "make_non_contiguous",
            "_validate_dtypes",
            "floating_types",
            "floating_types_and_half",
            "floating_types_and",
            "floating_and_complex_types",
            "floating_and_complex_types_and",
            "integral_types",
            "integral_types_and",
            "all_types",
            "all_types_and",
            "complex_types",
            "all_types_and_complex",
            "all_types_and_complex_and",
            "all_types_and_half",
            "get_all_dtypes",
            "get_all_math_dtypes",
            "get_all_complex_dtypes",
            "get_all_int_dtypes",
            "get_all_fp_dtypes",
            "get_all_device_types",
            "_get_default_tolerance",
            "_helper",
            "__add__"
        ],
        "classes": [
            "_dispatch_dtypes"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/autocast_test_lists.py",
        "functions": [
            "_rnn_cell_args",
            "__init__"
        ],
        "classes": [
            "AutocastTestLists"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_cuda.py",
        "functions": [
            "initialize_cuda_context_rng",
            "tf32_is_not_fp32",
            "tf32_off",
            "tf32_on",
            "tf32_on_and_off",
            "with_tf32_off",
            "_get_torch_cuda_version",
            "with_tf32_disabled",
            "with_tf32_enabled",
            "wrapper",
            "wrapped",
            "wrapped",
            "wrapped"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_device_type.py",
        "functions": [
            "_construct_test_name",
            "get_device_type_test_bases",
            "instantiate_device_type_tests",
            "_has_sufficient_memory",
            "largeTensorTest",
            "onlyOnCPUAndCUDA",
            "onlyCPU",
            "onlyCUDA",
            "expectedFailureCUDA",
            "skipCPUIfNoLapack",
            "skipCPUIfNoMkl",
            "skipCUDAIfNoMagma",
            "skipCUDAIfNoMagmaAndNoCusolver",
            "skipCUDAIfRocm",
            "skipCUDAIfNotRocm",
            "skipCUDAIfCudnnVersionLessThan",
            "skipCUDAIfNoCudnn",
            "precision",
            "precision",
            "get_primary_device",
            "get_all_devices",
            "_get_dtypes",
            "_get_precision_override",
            "_should_stop_test_suite",
            "instantiate_test",
            "run",
            "_should_stop_test_suite",
            "has_cudnn",
            "get_primary_device",
            "get_all_devices",
            "setUpClass",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__init__",
            "inner",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "only_fn",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__init__",
            "__init__",
            "__call__",
            "dec_fn",
            "instantiate_test_helper",
            "dep_fn",
            "dep_fn",
            "efail_fn",
            "only_fn",
            "multi_fn",
            "efail_fn",
            "efail_fn_no_device",
            "wrap_fn",
            "instantiated_test",
            "test_wrapper"
        ],
        "classes": [
            "DeviceTypeTestBase",
            "CPUTestBase",
            "CUDATestBase",
            "OpDTypes",
            "ops",
            "skipIf",
            "skipCPUIf",
            "skipCUDAIf",
            "expectedFailure",
            "onlyOn",
            "deviceCountAtLeast",
            "precisionOverride",
            "dtypes",
            "dtypesIfCPU",
            "dtypesIfCUDA",
            "expectedAlertNondeterministic"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_distributed.py",
        "functions": [
            "skip_if_no_gpu",
            "skip_if_small_worldsize",
            "skip_if_not_multigpu",
            "require_n_gpus_for_nccl_backend",
            "skip_if_lt_x_gpu",
            "requires_gloo",
            "requires_nccl_version",
            "requires_nccl",
            "requires_mpi",
            "skip_if_rocm_single_process",
            "skip_if_rocm",
            "skip_if_win32",
            "create_device",
            "get_timeout",
            "captured_output",
            "simple_sparse_reduce_tests",
            "initialize_temp_directories",
            "cleanup_temp_dir",
            "wrapper",
            "wrapper",
            "decorator",
            "decorator",
            "decorator",
            "wrapper",
            "wrapper",
            "generate",
            "compute_sum",
            "world_size",
            "join_or_run",
            "__init__",
            "setUp",
            "tearDown",
            "_current_test_name",
            "_start_processes",
            "_fork_processes",
            "_spawn_processes",
            "_run",
            "_join_processes",
            "_check_no_test_errors",
            "_check_return_codes",
            "is_master",
            "wrapper",
            "wrapper",
            "wrapper",
            "wrapper"
        ],
        "classes": [
            "TestSkip",
            "MultiProcessTestCase"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_jit.py",
        "functions": [
            "check_output_types",
            "check_against_reference",
            "allSum",
            "clone_inputs",
            "createFunctionFromGraph",
            "assertExportImport",
            "assertExportImportModule",
            "runAndSaveRNG",
            "getExportImportCopy",
            "autoDiffErrorMessage",
            "assertAutodiffNode"
        ],
        "classes": [
            "JitCommonTestCase"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_methods_invocations.py",
        "functions": [
            "_getattr_qual",
            "sample_inputs_unary",
            "sample_inputs_tensor_split",
            "sample_inputs_linalg_norm",
            "sample_inputs_slogdet",
            "sample_inputs_addmm",
            "sample_inputs_addr",
            "sample_inputs_xlogy",
            "sample_inputs_trace",
            "sample_inputs_linalg_inv",
            "np_sinc_with_fp16_as_fp32",
            "sample_inputs_broadcast_to",
            "sample_inputs_div",
            "sample_inputs_stack",
            "sample_inputs_hstack_dstack_vstack",
            "sample_inputs_gather",
            "sample_inputs_diff",
            "sample_inputs_index_select",
            "sample_inputs_index_fill",
            "sample_movedim_moveaxis",
            "sample_repeat_tile",
            "np_unary_ufunc_integer_promotion_wrapper",
            "sample_inputs_linalg_pinv",
            "sample_inputs_linalg_pinv_hermitian",
            "sample_inputs_linalg_solve",
            "sample_inputs_legacy_solve",
            "sample_inputs_std_var",
            "_sample_inputs_svd",
            "sample_inputs_svd",
            "sample_inputs_linalg_svd",
            "sample_inputs_pinverse",
            "sample_inputs_flip",
            "sample_inputs_fliplr_flipud",
            "sample_inputs_diag",
            "sample_inputs_logit",
            "sample_inputs_masked_scatter",
            "sample_inputs_masked_select",
            "index_variable",
            "index_perm_variable",
            "gather_variable",
            "bernoulli_scalar",
            "mask_not_all_zeros",
            "uniform_scalar",
            "normal_scalar_clamp",
            "prod_zeros",
            "ident",
            "method_tests",
            "create_input",
            "_compare_trilu_indices",
            "_compare_large_trilu_indices",
            "run_additional_tri_tests",
            "unpack_variables",
            "exclude_tensor_method",
            "__init__",
            "is_active",
            "__init__",
            "__init__",
            "__repr__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "get_op",
            "get_method",
            "get_inplace",
            "get_operator_variant",
            "sample_inputs",
            "should_skip",
            "supported_dtypes",
            "supports_dtype",
            "default_test_dtypes",
            "__init__",
            "is_integral",
            "wrapped_fn",
            "__init__",
            "sample_inputs",
            "__init__",
            "get_op",
            "get_op",
            "get_method",
            "sample_inputs",
            "reference_sigmoid",
            "reference_lgamma",
            "__iter__",
            "__next__",
            "__len__",
            "map_arg",
            "hermitian_func",
            "triangular_func",
            "triangular_func",
            "slice_V",
            "uv_loss",
            "slice_V",
            "uv_loss",
            "maybe_non_contig"
        ],
        "classes": [
            "DecorateInfo",
            "SkipInfo",
            "SampleInput",
            "AliasInfo",
            "OpInfo",
            "UnaryUfuncInfo",
            "SpectralFuncInfo",
            "ShapeFuncInfo",
            "HermitianOpInfo",
            "TriangularOpInfo",
            "dont_convert",
            "NoArgsClass"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_nn.py",
        "functions": [
            "get_reduction",
            "get_weight",
            "_rand_tensor_non_equal",
            "wrap_functional",
            "poissonnllloss_no_reduce_test",
            "bceloss_no_reduce_test",
            "bceloss_no_reduce_scalar_test",
            "bceloss_weights_no_reduce_test",
            "bceloss_weights_no_reduce_scalar_test",
            "bce_with_logistic_legacy_enum_test",
            "bce_with_logistic_no_reduce_test",
            "bce_with_logistic_no_reduce_scalar_test",
            "kldivloss_with_target_no_reduce_test",
            "kldivloss_no_reduce_test",
            "kldivloss_no_reduce_scalar_test",
            "kldivloss_with_log_target_no_reduce_test",
            "kldivloss_no_reduce_log_target_test",
            "kldivloss_no_reduce_scalar_log_target_test",
            "l1loss_no_reduce_test",
            "l1loss_no_reduce_complex_test",
            "l1loss_no_reduce_scalar_test",
            "mseloss_no_reduce_test",
            "mseloss_no_reduce_scalar_test",
            "nllloss_no_reduce_test",
            "nllloss_no_reduce_ignore_index_test",
            "nllloss_no_reduce_weights_test",
            "nllloss_no_reduce_weights_ignore_index_test",
            "nllloss_no_reduce_weights_ignore_index_neg_test",
            "nllloss2d_no_reduce_test",
            "nllloss2d_no_reduce_ignore_index_test",
            "nllloss2d_no_reduce_weights_test",
            "nlllossNd_no_reduce_test",
            "nlllossNd_no_reduce_ignore_index_test",
            "nlllossNd_no_reduce_weights_test",
            "smoothl1loss_no_reduce_test",
            "smoothl1loss_no_reduce_scalar_test",
            "smoothl1loss_beta_test",
            "smoothl1loss_zero_beta_test",
            "multilabelmarginloss_0d_no_reduce_test",
            "multilabelmarginloss_1d_no_reduce_test",
            "multilabelmarginloss_index_neg_test",
            "multilabelmarginloss_no_reduce_test",
            "hingeembeddingloss_no_reduce_test",
            "hingeembeddingloss_margin_no_reduce_test",
            "softmarginloss_no_reduce_test",
            "multilabelsoftmarginloss_no_reduce_test",
            "multilabelsoftmarginloss_weights_no_reduce_test",
            "multimarginloss_no_reduce_test",
            "multimarginloss_1d_no_reduce_test",
            "multimarginloss_1d_input_0d_target_no_reduce_test",
            "multimarginloss_p_no_reduce_test",
            "multimarginloss_margin_no_reduce_test",
            "multimarginloss_weights_no_reduce_test",
            "fractional_max_pool2d_test",
            "fractional_max_pool3d_test",
            "kldivloss_reference",
            "kldivloss_log_target_reference",
            "nlllossNd_reference",
            "nllloss_reference",
            "smoothl1loss_reference",
            "_multilabelmarginloss_reference",
            "multilabelmarginloss_reference",
            "hingeembeddingloss_reference",
            "softmarginloss_reference",
            "_multimarginloss_reference",
            "multimarginloss_reference",
            "cosineembeddingloss_reference",
            "tripletmarginloss_reference",
            "marginrankingloss_reference",
            "ctcloss_reference",
            "padding1d_circular",
            "padding2d_circular",
            "padding3d_circular",
            "kwargs",
            "kwargs",
            "kwargs",
            "kwargs",
            "kwargs",
            "nll_loss_helper",
            "_cos",
            "_forward",
            "_get_parameters",
            "_zero_grad_parameters",
            "_backward",
            "_jacobian",
            "_flatten_tensors",
            "_zero_grad_input",
            "_analytical_jacobian",
            "_numerical_jacobian",
            "check_jacobian",
            "__init__",
            "get_name",
            "_unpack",
            "constructor_args",
            "extra_args",
            "_get_arg",
            "_get_input",
            "__call__",
            "_do_test",
            "__init__",
            "__call__",
            "noncontiguize",
            "test_noncontig",
            "test_cuda",
            "_get_input",
            "__init__",
            "_check_gradients",
            "_do_test",
            "_get_target",
            "constructor_args",
            "__init__",
            "__call__",
            "test_cuda",
            "_get_target",
            "constructor_args",
            "extra_args",
            "forward",
            "fw",
            "map_variables",
            "fn_to_gradcheck",
            "assert_module_parameters_are",
            "convert_dtype",
            "to_type",
            "to_half",
            "to_single",
            "to_double",
            "apply_fn",
            "apply_fn",
            "map_tensor_sizes"
        ],
        "classes": [
            "NNTestCase",
            "TestBase",
            "ModuleTest",
            "InputVariableMixin",
            "NewModuleTest",
            "CriterionTest",
            "FunctionalModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_quantization.py",
        "functions": [
            "test_only_eval_fn",
            "test_only_train_fn",
            "accuracy",
            "train_one_epoch",
            "ddp_setup",
            "ddp_cleanup",
            "run_ddp",
            "convert_dynamic",
            "prepare_dynamic",
            "_make_conv_test_input",
            "skipIfNoFBGEMM",
            "get_script_module",
            "lengths_to_offsets",
            "__init__",
            "call_function",
            "call_method",
            "call_module",
            "__hash__",
            "__eq__",
            "__repr__",
            "__init__",
            "reset",
            "update",
            "__str__",
            "wrapper",
            "setUp",
            "checkNoPrepModules",
            "checkNoQconfig",
            "checkHasPrepModules",
            "checkObservers",
            "checkQuantDequant",
            "checkWrappedQuantizedLinear",
            "checkQuantizedLinear",
            "checkDynamicQuantizedLinear",
            "check_eager_serialization",
            "check_weight_bias_api",
            "checkDynamicQuantizedLSTM",
            "checkLinear",
            "checkDynamicQuantizedModule",
            "checkScriptable",
            "_checkScriptable",
            "_checkModuleCorrectnessAgainstOrig",
            "checkGraphModeOp",
            "checkGraphModuleNodes",
            "printGraphModule",
            "checkEmbeddingSerialization",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "fuse_model",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "fuse_modules",
            "__init__",
            "forward",
            "fuse_modules",
            "__init__",
            "forward",
            "fuse_modules",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "calculate_qparams",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "fuse_model",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "is_leaf_module",
            "check_outputs",
            "checkGraphModeFxOp"
        ],
        "classes": [
            "NodeSpec",
            "AverageMeter",
            "QuantizationTestCase",
            "SingleLayerLinearModel",
            "AnnotatedSingleLayerLinearModel",
            "SingleLayerLinearDynamicModel",
            "RNNDynamicModel",
            "RNNCellDynamicModel",
            "LSTMwithHiddenDynamicModel",
            "ConvModel",
            "ConvTransposeModel",
            "AnnotatedConvModel",
            "AnnotatedConvTransposeModel",
            "ConvBnModel",
            "AnnotatedConvBnModel",
            "ConvBnReLUModel",
            "AnnotatedConvBnReLUModel",
            "TwoLayerLinearModel",
            "LinearModelWithSubmodule",
            "AnnotatedTwoLayerLinearModel",
            "ActivationsTestModel",
            "LinearReluModel",
            "NormalizationTestModel",
            "NestedModel",
            "AnnotatedNestedModel",
            "AnnotatedSubNestedModel",
            "AnnotatedCustomConfigNestedModel",
            "QuantSubModel",
            "InnerModule",
            "SkipQuantModel",
            "AnnotatedSkipQuantModel",
            "QuantStubModel",
            "ManualLinearQATModel",
            "ManualConvLinearQATModel",
            "SubModelForFusion",
            "SubModelWithoutFusion",
            "ModelForFusion",
            "ConvBNReLU",
            "ModelWithSequentialFusion",
            "ModelForFusionWithBias",
            "ModelForLinearBNFusion",
            "DummyObserver",
            "ModelWithFunctionals",
            "ResNetBase",
            "ModelMultipleOps",
            "ModelMultipleOpsNoAvgPool",
            "EmbeddingBagModule",
            "EmbeddingModule",
            "EmbeddingWithLinear"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_quantized.py",
        "functions": [
            "_conv_output_shape",
            "_quantize",
            "_dequantize",
            "_requantize",
            "_calculate_dynamic_qparams",
            "_calculate_dynamic_per_channel_qparams",
            "_snr",
            "override_quantized_engine",
            "override_qengines",
            "qengine_is_fbgemm",
            "qengine_is_qnnpack",
            "test_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/common_utils.py",
        "functions": [
            "cppProfilingFlagsToProfilingMode",
            "enable_profiling_mode_for_profiling_tests",
            "enable_profiling_mode",
            "num_profiled_runs",
            "prof_callable",
            "prof_func_call",
            "prof_meth_call",
            "_get_test_report_path",
            "wait_for_process",
            "shell",
            "repeat_test_for_types",
            "discover_test_cases_recursively",
            "get_test_names",
            "chunk_list",
            "run_tests",
            "_check_module_exists",
            "skipIfRocm",
            "wrapDeterministicFlagAPITest",
            "skipIfCompiledWithoutNumpy",
            "_test_function",
            "skipIfNoLapack",
            "skipIfNotRegistered",
            "skipIfNoSciPy",
            "slowTest",
            "slowAwareTest",
            "skipCUDAMemoryLeakCheckIf",
            "skipCUDANonDefaultStreamIf",
            "suppress_warnings",
            "to_gpu",
            "get_function_arglist",
            "set_rng_seed",
            "freeze_rng_state",
            "set_default_dtype",
            "iter_indices",
            "is_iterable",
            "check_disabled",
            "get_comparison_dtype",
            "download_file",
            "find_free_port",
            "retry_on_connect_failures",
            "retry",
            "make_tensor",
            "prod_single_zero",
            "random_square_matrix_of_rank",
            "random_symmetric_matrix",
            "random_hermitian_matrix",
            "random_symmetric_psd_matrix",
            "random_hermitian_psd_matrix",
            "random_symmetric_pd_matrix",
            "random_hermitian_pd_matrix",
            "make_nonzero_det",
            "random_fullrank_matrix_distinct_singular_value",
            "random_matrix",
            "random_lowrank_matrix",
            "random_sparse_matrix",
            "random_sparse_pd_matrix",
            "do_test_dtypes",
            "do_test_empty_full",
            "clone_input_helper",
            "set_running_script_path",
            "check_test_defined_in_running_script",
            "load_tests",
            "gradcheck",
            "gradgradcheck",
            "_assertGradAndGradgradChecks",
            "set_cwd",
            "repeat_helper",
            "TemporaryFileName",
            "TemporaryFileName",
            "TemporaryDirectoryName",
            "TemporaryDirectoryName",
            "wrapper",
            "__init__",
            "__enter__",
            "__exit__",
            "wrapper",
            "wrapper",
            "run_test_function",
            "wrapper",
            "wrapper",
            "wrapper",
            "dec",
            "dec",
            "wrapper",
            "__enter__",
            "__exit__",
            "__init__",
            "get_cuda_memory_usage",
            "__enter__",
            "__exit__",
            "settings",
            "precision",
            "precision",
            "__init__",
            "assertLeaksNoCudaTensors",
            "enforceNonDefaultStream",
            "wrap_with_cuda_policy",
            "wrap_method_with_cuda_policy",
            "wrap_with_cuda_memory_check",
            "setUp",
            "genSparseTensor",
            "safeToDense",
            "compare_with_numpy",
            "_getDefaultRtolAndAtol",
            "_compareTensors",
            "_compareScalars",
            "_get_assert_msg",
            "assertEqualIgnoreType",
            "assertEqual",
            "assertNotEqual",
            "assertEqualTypeString",
            "assertObjectIn",
            "assertExpectedRaises",
            "assertNotWarn",
            "maybeWarnsRegex",
            "assertExpected",
            "assertExpectedStripMangled",
            "run_process_no_exception",
            "runWithPytorchAPIUsageStderr",
            "wrapper",
            "deco_retry",
            "multiply",
            "check_value",
            "get_int64_dtype",
            "__enter__",
            "__exit__",
            "call_helper",
            "read_and_process",
            "wrapper",
            "remove_prefix",
            "accept_output",
            "f_retry",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "ProfilingMode",
            "DeterministicGuard",
            "CudaNonDefaultStream",
            "CudaMemoryLeakCheck",
            "TestCase",
            "BytesIOContext",
            "CuBLASConfigGuard"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/dist_utils.py",
        "functions": [
            "single_threaded_process_group_agent",
            "dist_init",
            "noop",
            "wait_until_node_failure",
            "wait_until_pending_futures_and_users_flushed",
            "get_num_owners_and_forks",
            "wait_until_owners_and_forks_on_rank",
            "initialize_pg",
            "worker_name",
            "get_function_event",
            "wrapper",
            "new_test_method"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/expecttest.py",
        "functions": [
            "nth_line",
            "nth_eol",
            "normalize_nl",
            "escape_trailing_quote",
            "ok_for_raw_triple_quoted_string",
            "replace_string_literal",
            "__init__",
            "adjust_lineno",
            "seen_file",
            "record_edit",
            "replace",
            "assertExpectedInline",
            "assertExpectedRaisesInline",
            "assertMultiLineEqualMaybeCppStack"
        ],
        "classes": [
            "EditHistory",
            "TestCase"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/hypothesis_utils.py",
        "functions": [
            "_get_valid_min_max",
            "_floats_wrapper",
            "floats",
            "assume_not_overflowing",
            "qparams",
            "array_shapes",
            "tensor",
            "per_channel_tensor",
            "tensor_conv",
            "assert_deadline_disabled"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/jit_metaprogramming_utils.py",
        "functions": [
            "value_to_literal",
            "get_call",
            "get_constant",
            "get_script_args",
            "gen_script_fn_and_args",
            "create_script_fn",
            "partial_apply_nontensors",
            "create_traced_fn",
            "get_nn_functional_compiled_fn_and_inputs",
            "create_script_module",
            "check_alias_annotation",
            "get_nn_module_name_from_kwargs",
            "get_nn_mod_test_name",
            "get_nn_module_class_from_kwargs",
            "try_get_nn_module_compiled_mod_and_inputs",
            "get_all_nn_module_tests",
            "script_fn",
            "new_fn",
            "traced_fn",
            "script_module",
            "make_module",
            "__init__"
        ],
        "classes": [
            "TheModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/jit_utils.py",
        "functions": [
            "execWrapper",
            "do_input_map",
            "clear_class_registry",
            "get_execution_plan",
            "inline_everything_mode",
            "set_fusion_group_inlining",
            "disable_autodiff_subgraph_inlining",
            "_inline_everything",
            "_tmp_donotuse_dont_inline_everything",
            "_trace",
            "enable_cpu_fuser",
            "enable_cpu_fuser_if",
            "get_forward",
            "get_forward_graph",
            "get_module_method",
            "attrs_with_prefix",
            "warmup_backward",
            "make_global",
            "__init__",
            "__enter__",
            "__exit__",
            "setHooks",
            "clearHooks",
            "setUp",
            "tearDown",
            "assertAllFused",
            "_isHookExceptionOk",
            "_compared_saved_loaded",
            "emitFunctionHook",
            "emitModuleHook",
            "getExportImportCopyWithPacking",
            "assertGraphContains",
            "assertGraphContainsExactly",
            "assertExpectedONNXGraph",
            "assertExpectedGraph",
            "run_pass",
            "get_frame_vars",
            "assertRaisesRegexWithHighlight",
            "checkScriptRaisesRegex",
            "checkBailouts",
            "checkScript",
            "checkTrace",
            "checkModule",
            "wrapper",
            "wrapper",
            "wrapper",
            "wrapper",
            "__enter__",
            "__exit__",
            "get_nodes_and_parents_recursively",
            "extract_files",
            "perform_assert",
            "nodes",
            "allSum",
            "flatten_inputs",
            "noop_fuser",
            "input_reduce",
            "wrapper"
        ],
        "classes": [
            "_AssertRaisesRegexWithHighlightContext",
            "JitTestCase",
            "capture_stdout"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/mypy_wrapper.py",
        "functions": [
            "config_files",
            "glob",
            "in_files",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/te_utils.py",
        "functions": [
            "try_get_trigger_value",
            "__init__",
            "elapsed_value",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": [
            "ExecutionCounter",
            "CudaCodeGenCreated",
            "CudaCodeGenExecuted",
            "LLVMCodeGenCreated",
            "LLVMCodeGenExecuted",
            "SimpleIREvalExecuted"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/data/network1.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "Net"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/data/network2.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "Net"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/data/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/codegen/random_topo_test.py",
        "functions": [
            "get_broadcast_compatible_shape",
            "random_topology_test",
            "prepareInputTensorsToRandomTopoTest",
            "reproString",
            "runDefaultTestWithSeed",
            "runTest",
            "parse_args",
            "get_root"
        ],
        "classes": [
            "WrongResultException"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/codegen/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/ddp_under_dist_autograd_test.py",
        "functions": [
            "init_logger",
            "_call_method",
            "_remote_method",
            "_remote_method_async",
            "getLinear",
            "get_training_examples",
            "set_shutdown_signal",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "destroy_pg",
            "train_batch",
            "world_size",
            "remote_worker_name",
            "trainer_name",
            "_remote_worker_process",
            "_trainer_process",
            "_master_process",
            "do_test_on_master",
            "_do_test",
            "test_backward_no_ddp",
            "test_backward_ddp_outside",
            "test_backward_ddp_outside_uneven_inputs",
            "test_backward_ddp_inside",
            "world_size",
            "trainer_name",
            "_run_test_ddp_comparision",
            "test_ddp_comparison",
            "test_ddp_comparison_uneven_inputs",
            "test_ddp_dist_autograd_sparse_grads",
            "get_remote_grads",
            "test_ddp_dist_autograd_local_vs_remote",
            "test_ddp_dist_autograd_local_vs_remote_gpu"
        ],
        "classes": [
            "DdpMode",
            "FeatureSet",
            "RemoteEM",
            "RemoteNet",
            "HybridModel",
            "Trainer",
            "DdpUnderDistAutogradTest",
            "DdpComparisonTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/distributed_test.py",
        "functions": [
            "get_timeout",
            "require_backend",
            "require_backends_available",
            "require_world_size",
            "apply_hack_for_nccl",
            "_lock",
            "_build_tensor",
            "_build_multidim_tensor",
            "__init__",
            "__eq__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "check",
            "init",
            "sync",
            "setUpClass",
            "setUp",
            "tearDown",
            "init_method",
            "_run",
            "world_size",
            "eq",
            "_barrier",
            "_init_group_test",
            "_init_full_group_test",
            "_init_global_test",
            "_init_multigpu_helper",
            "test_dump_DDP_relevant_env_vars",
            "test_get_rank",
            "test_get_backend",
            "test_Backend_enum_class",
            "test_destroy_group",
            "test_get_rank_size_group",
            "test_destroy_full_group",
            "test_get_rank_size_full_group",
            "_test_barrier_timeout",
            "test_barrier_timeout_global",
            "test_barrier_timeout_group",
            "test_barrier_timeout_full_group",
            "_test_group_override_backend",
            "test_backend_group",
            "test_backend_full_group",
            "test_batch_isend_irecv_nccl",
            "test_batch_isend_irecv_self_nccl",
            "test_batch_isend_irecv_no_rank_zero_nccl",
            "test_batch_isend_irecv_gloo",
            "test_batch_isend_irecv_gloo_tags",
            "test_batch_isend_irecv_tensor_err",
            "test_batch_isend_irecv_op_err",
            "test_batch_isend_irecv_op_list_err",
            "test_batch_isend_irecv_mixed_backend_err",
            "test_send_recv_nccl",
            "test_send_recv",
            "test_send_recv_any_source",
            "test_send_recv_with_tag",
            "test_isend",
            "test_irecv",
            "_test_broadcast_helper",
            "test_broadcast",
            "test_broadcast_cuda",
            "test_broadcast_group",
            "test_broadcast_full_group",
            "test_nccl_high_priority_stream",
            "_test_reduce_helper",
            "test_reduce_sum",
            "test_reduce_sum_cuda",
            "test_reduce_product",
            "test_reduce_min",
            "test_reduce_max",
            "test_reduce_group_sum",
            "test_reduce_group_product",
            "test_reduce_group_min",
            "test_reduce_group_max",
            "test_reduce_full_group_sum",
            "test_reduce_full_group_product",
            "test_reduce_full_group_min",
            "test_reduce_full_group_max",
            "_test_reduce_twice_helper",
            "test_reduce_sum_twice",
            "test_reduce_sum_cuda_twice",
            "test_all_reduce_result_cuda",
            "call_dist_op",
            "_test_all_reduce_helper",
            "test_all_reduce_sum",
            "test_all_reduce_sum_async",
            "test_all_reduce_sum_cuda",
            "test_all_reduce_sum_cuda_async",
            "test_all_reduce_sum_complex",
            "test_all_reduce_complex_unsupported_ops",
            "test_all_reduce_sum_cuda_complex",
            "test_all_reduce_product",
            "test_all_reduce_min",
            "test_all_reduce_max",
            "test_all_reduce_group_sum",
            "test_all_reduce_group_product",
            "test_all_reduce_group_min",
            "test_all_reduce_group_max",
            "test_all_reduce_full_group_sum",
            "test_all_reduce_full_group_product",
            "test_all_reduce_full_group_min",
            "test_all_reduce_full_group_max",
            "_test_sparse_all_reduce_sum",
            "test_sparse_all_reduce_sum",
            "test_sparse_all_reduce_sum_cuda",
            "_all_reduce_coalesced_sum_test_cases",
            "_all_reduce_coalesced_product_test_cases",
            "_all_reduce_coalesced_min_test_cases",
            "_all_reduce_coalesced_max_test_cases",
            "test_all_reduce_coalesced_max_complex_unsupported",
            "_test_all_reduce_coalesced_helper",
            "test_all_reduce_coalesced_sum",
            "test_all_reduce_coalesced_product",
            "test_all_reduce_coalesced_min",
            "test_all_reduce_coalesced_max",
            "test_all_reduce_coalesced_group_sum",
            "test_all_reduce_coalesced_group_product",
            "test_all_reduce_coalesced_group_min",
            "test_all_reduce_coalesced_group_max",
            "test_all_reduce_coalesced_full_group_sum",
            "test_all_reduce_coalesced_full_group_product",
            "test_all_reduce_coalesced_full_group_min",
            "test_all_reduce_coalesced_full_group_max",
            "_test_scatter_helper",
            "test_scatter_checks",
            "test_scatter",
            "test_scatter_group",
            "test_scatter_full_group",
            "_test_gather_helper",
            "test_gather_checks",
            "test_gather",
            "test_gather_group",
            "test_gather_full_group",
            "_test_all_gather_helper",
            "test_all_gather",
            "test_all_gather_cuda",
            "test_all_gather_complex",
            "test_all_gather_cuda_complex",
            "test_all_gather_group",
            "test_all_gather_full_group",
            "_run_all_gather_coalesced_and_verify",
            "_test_all_gather_coalesced_helper",
            "test_all_gather_coalesced_simple",
            "test_all_gather_coalesced_complex",
            "test_all_gather_coalesced_group",
            "test_all_gather_coalesced_full_group",
            "test_all_gather_coalesced_with_empty",
            "_test_all_to_all_single_equal_split_helper",
            "_test_all_to_all_single_unequal_split_helper",
            "_test_all_to_all_helper",
            "test_all_to_all_single_equal_split",
            "test_all_to_all_single_equal_split_cuda",
            "test_all_to_all_single_unequal_split",
            "test_all_to_all_single_unequal_split_cuda",
            "test_all_to_all",
            "test_all_to_all_cuda",
            "test_all_to_all_single_equal_split_group",
            "test_all_to_all_single_equal_split_group_cuda",
            "test_all_to_all_single_unequal_split_group",
            "test_all_to_all_single_unequal_split_group_cuda",
            "test_all_to_all_group",
            "test_all_to_all_group_cuda",
            "test_all_to_all_single_equal_split_full_group",
            "test_all_to_all_single_equal_split_full_group_cuda",
            "test_all_to_all_single_unequal_split_full_group",
            "test_all_to_all_single_unequal_split_full_group_cuda",
            "test_all_to_all_full_group",
            "test_all_to_all_full_group_cuda",
            "_test_barrier_helper",
            "test_barrier_cuda",
            "test_barrier_group_cuda",
            "test_barrier_full_group_cuda",
            "test_barrier",
            "test_barrier_group",
            "test_barrier_full_group",
            "_test_broadcast_multigpu_helper",
            "test_broadcast_multigpu",
            "_test_all_reduce_multigpu_helper",
            "test_all_reduce_multigpu",
            "test_all_reduce_multigpu_complex",
            "_test_reduce_multigpu_helper",
            "test_reduce_multigpu",
            "_test_all_gather_multigpu_helper",
            "test_all_gather_multigpu",
            "test_all_gather_multigpu_complex",
            "_model_step",
            "_model_step_with_zero_grad",
            "_prepare_dummy_data",
            "_test_DDP_helper",
            "_assert_equal_param",
            "_test_DDP_5iter",
            "_test_DistributedDataParallel",
            "_test_DistributedDataParallelCPU",
            "test_DistributedDataParallelCPU",
            "test_DistributedDataParallelCPU_grad_is_view",
            "test_DistributedDataParallel_requires_grad",
            "test_DistributedDataParallel_non_default_stream",
            "_test_ddp_hook_parity",
            "test_ddp_hook_parity_allreduce",
            "test_ddp_hook_parity_allreduce_process_group",
            "test_ddp_hook_parity_powerSGD",
            "test_DistributedDataParallel",
            "test_DistributedDataParallel_with_grad_is_view",
            "_test_DistributedDataParallel_SyncBatchNorm",
            "test_DistributedDataParallel_SyncBatchNorm",
            "test_DistributedDataParallel_SyncBatchNorm_2D_Input",
            "test_DistributedDataParallel_SyncBatchNorm_Single_Input_Per_Process",
            "test_DistributedDataParallel_SyncBatchNorm_Diff_Input_Sizes_Running_Value",
            "test_DistributedDataParallel_SyncBatchNorm_Diff_Input_Sizes_gradient",
            "test_ddp_logging_data_cpu",
            "test_ddp_logging_data_gpu",
            "test_SyncBatchNorm_process_group",
            "_run_reduction_test",
            "test_nccl_backend_bool_allreduce",
            "test_nccl_backend_bool_allgather",
            "test_nccl_backend_bool_reduce",
            "test_nccl_backend_bool_broadcast",
            "test_DistributedSampler_padding",
            "test_allgather_object",
            "test_gather_object",
            "test_nccl_gather_object_err",
            "validate_net_equivalence",
            "test_ddp_sync_params_and_buffers",
            "test_ddp_grad_div_uneven_inputs",
            "test_ddp_join_model_equivalence",
            "_run_uneven_inputs_test",
            "test_ddp_uneven_inputs",
            "test_ddp_uneven_input_join_disable",
            "test_ddp_uneven_input_exception",
            "test_ddp_uneven_inputs_replicated_error",
            "test_broadcast_object_list",
            "test_ddp_ignore_params_arg",
            "test_ddp_unused_params_rebuild_buckets_exception",
            "test_ddp_shared_grad_acc_unused_params",
            "test_ddp_device",
            "test_ddp_namedtuple",
            "test_ddp_control_flow_same_across_ranks",
            "test_ddp_control_flow_different_across_ranks",
            "test_scatter_object_list",
            "format_line",
            "get_event",
            "validate_global_samples",
            "tuple_and_list_validator",
            "namedtuple_validator",
            "custom_type_validator",
            "dict_validator",
            "train_iter",
            "__init__",
            "task_parameters",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "Foo",
            "TestNamedTupleInput_1",
            "_FC2",
            "Net",
            "Task",
            "BatchNormNet",
            "Barrier",
            "TestDistBackend",
            "DistributedTest",
            "_DistTestBase",
            "Bar",
            "DDPUnevenTestInput",
            "UnusedParamModule",
            "ExceptionModule",
            "TestModel",
            "ToyModel",
            "ToyModel",
            "TensorWrapper",
            "ToyModel",
            "NamedTupleModule",
            "ToyModel",
            "ToyModel"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/pipe_with_ddp_test.py",
        "functions": [
            "world_size",
            "test_basic_nccl_ckpt_never",
            "test_basic_nccl_ckpt_never_find_unused",
            "test_basic_nccl_ckpt_always",
            "test_basic_nccl_ckpt_except_last",
            "test_basic_gloo_ckpt_never",
            "test_basic_gloo_ckpt_never_find_unused",
            "test_basic_gloo_ckpt_always",
            "test_basic_gloo_ckpt_except_last",
            "_run_basic_test",
            "__init__",
            "forward"
        ],
        "classes": [
            "PipeWithDDPTest",
            "MyModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc_utils.py",
        "functions": [
            "_check_and_set_tcp_init",
            "_check_and_unset_tcp_init",
            "generate_tests",
            "setUp",
            "tearDown",
            "setUp",
            "tearDown"
        ],
        "classes": [
            "ForkHelper",
            "SpawnHelper",
            "MultiProcess"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/nn/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/nn/api/remote_module_test.py",
        "functions": [
            "remote_device",
            "create_scripted_module",
            "forward",
            "forward",
            "forward_async",
            "__init__",
            "forward",
            "__init__",
            "world_size",
            "_create_remote_module_iter",
            "test_bad_module",
            "test_forward_async",
            "test_forward_async_script",
            "test_forward_sync",
            "test_forward_sync_script",
            "test_forward_with_kwargs",
            "test_remote_parameters",
            "test_get_module_rref",
            "test_valid_device",
            "test_invalid_devices",
            "test_unsupported_methods",
            "run_forward_async",
            "run_forward",
            "hook"
        ],
        "classes": [
            "ModuleCreationMode",
            "MyModuleInterface",
            "RemoteMyModuleInterface",
            "MyModule",
            "BadModule",
            "RemoteModuleTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/nn/api/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/pipeline/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/dist_autograd_test.py",
        "functions": [
            "_set_rpc_done",
            "_check_rpc_done",
            "_torch_ones",
            "_compare_owner_value",
            "create_tensor",
            "create_torchscript_tensor",
            "my_py_add",
            "my_scalar_add",
            "my_rref_add",
            "my_script_add",
            "my_script_ref_add",
            "my_nested_rref_add",
            "ret_requires_grad",
            "my_py_nested_call",
            "_all_contexts_cleaned_up",
            "_run_trainer",
            "_run_trainer_torchscript",
            "forward",
            "backward",
            "_exec_func_with_dst",
            "_exec_func",
            "_next_rank",
            "_check_rpc_done",
            "test_autograd_context",
            "test_nested_context",
            "_verify_graph_for_first_rpc_call",
            "_verify_graph_for_rpc_call_exec",
            "_verify_graph_for_nested_rpc_call",
            "_test_graph",
            "test_graph_for_builtin_call",
            "test_graph_for_python_call",
            "test_graph_for_builtin_remote_call",
            "test_graph_for_python_remote_call",
            "_test_graph_for_py_nested_call",
            "test_graph_for_py_nested_call",
            "test_graph_for_py_nested_remote_call",
            "_test_graph_for_py_nested_call_itself",
            "test_graph_for_py_nested_call_itself",
            "test_graph_for_py_nested_remote_call_itself",
            "_test_no_graph_with_tensors_not_require_grad",
            "test_no_graph_with_tensors_not_require_grad",
            "test_no_graph_with_tensors_not_require_grad_remote",
            "_test_grad_only_on_return_value",
            "test_grad_only_on_return_value",
            "test_grad_only_on_return_value_remote",
            "_test_rpc_complex_args",
            "test_rpc_complex_args",
            "test_remote_complex_args",
            "context_cleanup_test_helper",
            "test_context_cleanup_tensor_with_grad",
            "test_context_cleanup_tensor_no_grad",
            "test_context_cleanup_no_tensors",
            "test_context_cleanup_nested_rpc",
            "test_worker_ids_recorded",
            "test_dist_autograd_profiling",
            "test_error_in_context",
            "_verify_backwards",
            "_verify_backwards_remote",
            "test_backward_no_grad_on_tensor",
            "_test_backward_simple",
            "test_backward_simple",
            "test_backward_simple_self",
            "_test_backward_rref",
            "test_backward_rref",
            "test_backward_rref_multi",
            "test_backward_rref_nested",
            "_test_trainer_ps",
            "test_trainer_ps",
            "test_trainer_ps_torchscript_functions",
            "test_backward_multiple_round_trips",
            "test_backward_different_tensor_dims",
            "test_backward_unused_tensors",
            "test_backward_multiple_output_tensors",
            "_run_test_backward_unused_send_function_in_thread",
            "test_backward_unused_send_function",
            "test_backward_autograd_engine_error",
            "test_backward_node_failure",
            "test_backward_without_context",
            "test_backward_without_rpc",
            "test_backward_invalid_args",
            "test_backward_multiple_roots",
            "test_backward_different_dtypes",
            "test_backward_simple_python_udf",
            "test_backward_simple_script_call",
            "_complex_python_udf",
            "test_backward_complex_python_udf",
            "_python_udf_with_backward_error",
            "_nested_rpc_call_backward_error",
            "test_backward_python_udf_error",
            "test_backward_node_failure_python_udf",
            "_nested_python_udf",
            "test_backwards_nested_python_udf",
            "test_clean_context_during_backward",
            "_call_remote_embedding",
            "_get_grad",
            "test_embedding_bag_with_no_grad_tensors",
            "_mixed_requires_grad",
            "test_mixed_requires_grad",
            "test_debug_info",
            "_workload_thread",
            "test_async_dist_autograd",
            "test_backward_accumulate_grads",
            "_test_nested_backward_accumulate_grads",
            "test_nested_backward_accumulate_grads",
            "test_multiple_backward",
            "test_multiple_backward_with_errors",
            "test_backward_verify_hooks",
            "test_no_grad_copy",
            "test_no_grad_copy_sparse",
            "test_grad_copy_sparse_indices_extra_ref",
            "test_post_hooks",
            "_slow_add",
            "test_thread_local_context_id",
            "test_gpu_simple",
            "test_gpu_to_cpu_continuation",
            "test_gpu_to_cpu_continuation_gpu_root",
            "context_cleanup_test_helper",
            "test_context_cleanup_tensor_with_grad",
            "test_verify_backend_options",
            "test_device_maps_backward_pass",
            "test_dist_autograd_sync_streams",
            "get_event",
            "forward",
            "backward",
            "forward",
            "backward",
            "post_hook_add_one",
            "post_hook_add_two",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward",
            "forward",
            "backward"
        ],
        "classes": [
            "SimulateBackwardError",
            "ExecMode",
            "DistAutogradTest",
            "FaultyAgentDistAutogradTest",
            "TensorPipeDistAutogradTest",
            "MyBackwardFunc",
            "TestDebugInfoFunc",
            "MyRemoteCompute",
            "MyLocalCompute",
            "MyFunc",
            "MyFuncSingleGrad",
            "NonContGradFunc",
            "MyFunc",
            "NonContGradFunc",
            "MyFunc"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/dist_optimizer_test.py",
        "functions": [
            "_call_method",
            "remote_method",
            "rpc_async_method",
            "__init__",
            "forward",
            "get_w",
            "__init__",
            "step",
            "__init__",
            "step",
            "test_dist_optim_exception",
            "test_dist_optim_exception_on_constructor",
            "_test_dist_optim_base",
            "test_dist_optim"
        ],
        "classes": [
            "MyModule",
            "FailingOptimizer",
            "OptimizerFailingOnConstructor",
            "DistOptimizerTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/faulty_rpc_agent_test_fixture.py",
        "functions": [
            "__init__",
            "rpc_backend",
            "rpc_backend_options",
            "setup_fault_injection",
            "get_shutdown_error_regex",
            "get_timeout_error_regex"
        ],
        "classes": [
            "FaultyRpcAgentTestFixture"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/process_group_agent_test_fixture.py",
        "functions": [
            "rpc_backend",
            "rpc_backend_options",
            "rpc_backend_options",
            "get_shutdown_error_regex",
            "get_timeout_error_regex"
        ],
        "classes": [
            "ProcessGroupRpcAgentTestFixture"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/rpc_agent_test_fixture.py",
        "functions": [
            "world_size",
            "init_method",
            "file_init_method",
            "rpc_backend",
            "rpc_backend_options",
            "setup_fault_injection",
            "get_shutdown_error_regex",
            "get_timeout_error_regex"
        ],
        "classes": [
            "RpcAgentTestFixture"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "functions": [
            "foo_add",
            "udf_with_torch_ops",
            "_stub_construct_rpc_backend_options_handler",
            "_stub_init_rpc_backend_handler",
            "set_value",
            "wait_for_value_future",
            "set_and_check_done",
            "_call_method_on_rref",
            "get_rref_list",
            "add_rref_to_value",
            "run_nested_pickle",
            "build_complex_tensors",
            "non_cont_test",
            "my_function",
            "my_tensor_function",
            "my_sleep_func",
            "my_complex_tensor_function",
            "my_rref_function",
            "delayed_add",
            "no_result",
            "raise_or_inc",
            "nested_rpc",
            "multi_layer_nested_async_rpc",
            "nested_rref",
            "nested_remote",
            "rref_forward_chain",
            "rpc_return_rref",
            "light_rpc",
            "heavy_rpc",
            "heavy_rpc_torchscript",
            "my_script_func",
            "raise_func",
            "raise_func_escape",
            "set_global_rref",
            "clear_global_rref",
            "check_rref_confirmed",
            "get_rref_debug_info",
            "add_use_future_cb",
            "get_events_from_profile",
            "add_use_future_set_result",
            "add_use_future_nested_cb",
            "fail_on_fut",
            "async_raise_func",
            "async_wrong_type",
            "async_add",
            "slow_add",
            "slow_async_add",
            "async_add_with_future_ctor",
            "async_add_chained",
            "async_add_chained_multi",
            "async_add_nested",
            "async_add_multi_fanout",
            "return_future",
            "__init__",
            "get_worker_infos",
            "__init__",
            "__getstate__",
            "__setstate__",
            "set",
            "__init__",
            "__getstate__",
            "__setstate__",
            "__init__",
            "my_instance_method",
            "my_class_method",
            "my_static_method",
            "increment_value",
            "get_value",
            "my_slow_method",
            "callback",
            "callback",
            "inc_and_set",
            "static_async_add",
            "class_async_add",
            "bound_async_add",
            "__init__",
            "test_worker_id",
            "test_get_worker_infos",
            "test_self_add",
            "test_send_to_rank",
            "test_self_py_udf_remote",
            "_test_self_remote_rref_as_rpc_arg",
            "test_self_remote_rref_as_rpc_arg",
            "test_self_remote_rref_as_self_rpc_arg",
            "_test_self_remote_rref_as_remote_arg",
            "test_self_remote_rref_as_remote_arg",
            "test_rref_proxy_non_exist",
            "_test_rref_proxy_tensor",
            "test_rref_proxy_tensor",
            "test_rref_proxy_tensor_self",
            "test_rref_proxy_reuse",
            "_test_rref_proxy_class",
            "test_rref_proxy_class",
            "test_rref_proxy_class_self",
            "test_self_remote_rref_as_self_remote_arg",
            "test_register_rpc_backend_and_set_and_start_rpc_backend",
            "test_duplicate_name",
            "test_reinit",
            "test_world_size_one",
            "test_invalid_names",
            "test_add",
            "test_add_with_id",
            "test_scalar_add",
            "test_async_add",
            "test_nonzero",
            "test_multi_rpc",
            "_run_uneven_workload",
            "test_wait_all_workers",
            "test_wait_all_workers_twice",
            "test_all_gather",
            "test_all_gather_timeout",
            "test_graceful_shutdown_with_uneven_workload",
            "test_shutdown_followed_by_rpc",
            "test_expected_src",
            "test_py_built_in",
            "test_py_user_defined",
            "test_build_rpc_profiling_key",
            "check_profiling_info",
            "test_profiler_rpc_record_shapes",
            "test_profiler_rpc_memory",
            "test_profiler_remote_cuda",
            "test_profiler_export_trace",
            "test_profiler_rpc_key_names",
            "_run_test_profiler_remote_events_profiled",
            "test_profiler_remote_events_profiled",
            "test_profiler_remote_events_profiled_single_threaded",
            "run_profiling_workload",
            "_run_rpc_profiling_async_function",
            "test_rpc_profiling_async_function",
            "test_rpc_profiling_async_function_single_threaded",
            "test_rpc_profiling_remote_record_function",
            "validate_profiling_workload",
            "_run_test_profiler_with_autograd_context",
            "test_profiler_with_autograd_context_single_threaded",
            "test_profiler_with_autograd_context",
            "_profiler_test_with_rpc",
            "_run_test_profiler_with_sync_rpc_udf",
            "test_profiler_with_sync_rpc_udf",
            "test_profiler_with_sync_rpc_udf_single_threaded",
            "_run_test_profiler_with_sync_rpc_builtin",
            "test_profiler_with_sync_rpc_builtin",
            "test_profiler_with_sync_rpc_builtin_single_threaded",
            "_run_test_profiler_with_async_rpc_udf",
            "test_profiler_with_async_rpc_udf",
            "test_profiler_with_async_rpc_udf_single_threaded",
            "_run_test_profiler_with_async_rpc_builtin",
            "test_profiler_with_async_rpc_builtin",
            "test_profiler_with_async_rpc_builtin_single_threaded",
            "_run_test_profiler_with_remote_udf",
            "test_profiler_with_remote_udf",
            "test_profiler_with_remote_udf_single_threaded",
            "_run_test_profiler_with_remote_builtin",
            "test_profiler_with_remote_builtin",
            "test_profiler_with_remote_builtin_single_threaded",
            "_run_test_profiler_with_script_async_rpc",
            "test_profiler_with_script_async_rpc",
            "test_profiler_with_script_async_rpc_single_threaded",
            "_run_test_profiler_with_script_sync_rpc",
            "test_profiler_with_script_sync_rpc",
            "test_profiler_with_script_sync_rpc_single_threaded",
            "_run_test_profiler_with_script_remote_rpc",
            "test_profiler_with_script_remote_rpc",
            "test_profiler_with_script_remote_rpc_single_threaded",
            "_assert_top_level_events",
            "test_server_process_global_profiler",
            "test_async_record_function_double_end_callbacks",
            "test_async_record_function_cbs_jit_call",
            "test_py_class_constructor",
            "test_py_class_instance_method",
            "test_py_class_method",
            "test_py_class_static_method",
            "test_py_multi_async_call",
            "test_py_no_return_result",
            "test_py_tensors",
            "test_py_tensors_multi_async_call",
            "test_py_tensors_in_container",
            "test_py_nested_pickle",
            "test_py_function_exception",
            "test_py_raise_in_user_func",
            "test_py_raise_in_user_func_escaped_str",
            "test_nested_rpc",
            "_stress_test_rpc",
            "test_stress_light_rpc",
            "test_stress_heavy_rpc",
            "test_stress_heavy_rpc_torchscript",
            "test_builtin_remote_ret",
            "test_builtin_remote_self",
            "_test_multi_remote_call",
            "test_multi_builtin_remote_ret",
            "test_py_udf_remote",
            "test_multi_py_udf_remote",
            "test_py_rref_args",
            "test_py_rref_args_user_share",
            "test_py_rpc_rref_args",
            "test_nested_remote",
            "test_nested_rref",
            "test_nested_rref_stress",
            "test_multi_layer_nested_async_rpc",
            "test_remote_with_exception",
            "test_rpc_return_rref",
            "test_rref_forward_chain",
            "test_local_rref_no_fork",
            "test_local_value_not_on_owner",
            "test_return_local_rrefs",
            "_test_rref_type",
            "test_rref_type_blocking",
            "test_rref_type_non_blocking",
            "_test_rref_type_with_error",
            "test_rref_type_with_error_blocking",
            "test_rref_type_with_error_non_blocking",
            "_test_rref_type_owner",
            "test_rref_type_owner_blocking",
            "test_rref_type_owner_non_blocking",
            "_slow_add",
            "test_rref_type_slow_init",
            "test_owner_equality",
            "test_pass_local_rrefs",
            "test_remote_same_worker",
            "test_call_method_on_rref",
            "_test_rref_leak",
            "test_rref_leak",
            "test_ignore_rref_leak",
            "test_rref_str",
            "test_rref_get_future",
            "test_rref_context_debug_info",
            "test_disable_gil_profiling",
            "test_local_shutdown",
            "test_debug_info",
            "test_handle_send_exceptions",
            "test_deadlock",
            "test_local_shutdown_with_rpc",
            "test_set_and_get_default_rpc_timeout",
            "test_default_timeout_used",
            "test_rpc_timeouts",
            "test_dist_init_decorator",
            "test_use_rpc_pickler",
            "test_wait_all",
            "test_wait_all_multiple_call",
            "test_wait_all_timeout",
            "test_wait_all_raise_in_user_func",
            "test_wait_all_raise_in_body",
            "test_function_not_on_callee",
            "test_non_garbage_collected_user_rref_due_to_local_circular_dependency",
            "test_use_rref_after_shutdown",
            "_return_gpu_tensor",
            "_return_gpu_tensor_list",
            "_gpu_tensor_list_arg",
            "_create_rref",
            "test_user_rrefs_confirmed",
            "test_user_rrefs_confirmed_remote",
            "test_rref_py_pickle_not_supported",
            "test_remote_throw",
            "test_non_cont_tensors",
            "test_callback_simple",
            "test_callback_wrong_arg_num",
            "test_callback_wrong_arg_type",
            "test_callback_multi",
            "test_callback_chain",
            "test_callback_in_rpc",
            "test_callback_with_ret",
            "test_callback_with_error",
            "test_callback_none",
            "test_add_done_callback",
            "test_mark_future_twice",
            "test_pickle_future",
            "test_future_done",
            "test_future_done_exception",
            "_test_future_cb",
            "test_future_in_rpc",
            "test_future_nested_callback",
            "_run_func_in_mode",
            "_test_async_function_raise",
            "test_async_function_raise",
            "test_async_function_raise_async",
            "test_async_function_raise_remote",
            "_test_async_function_wrong_return_type",
            "test_async_function_wrong_return_type",
            "test_async_function_wrong_return_type_async",
            "test_async_function_wrong_return_type_remote",
            "test_async_function_simple",
            "_test_async_function",
            "test_async_function_with_future_ctor",
            "test_async_function_with_future_ctor_remote",
            "test_async_function_chained",
            "test_async_function_chained_remote",
            "test_async_function_nested",
            "test_async_function_nested_remote",
            "test_async_static_method",
            "test_async_static_method_remote",
            "test_async_class_method",
            "test_async_class_method_remote",
            "_test_test_async_class_rref_proxy",
            "test_async_class_rref_proxy",
            "test_async_class_rref_proxy_async",
            "test_async_class_rref_proxy_remote",
            "_test_async_function_multi",
            "test_async_function_multi_chained",
            "test_async_function_multi_chained_async",
            "test_async_function_multi_chained_remote",
            "test_async_function_multi_fanout",
            "test_async_function_multi_fanout_async",
            "test_async_function_multi_fanout_remote",
            "_test_return_future",
            "test_return_future",
            "test_return_future_async",
            "test_return_future_remote",
            "test_rref_timeout",
            "test_init_pg_then_rpc",
            "test_init_rpc_then_pg",
            "test_wait_all_with_exception",
            "test_wait_all_with_partial_exception",
            "test_init_rpc_twice",
            "test_wrong_types",
            "test_cannot_infer_backend_from_options",
            "test_owner_rref_backward",
            "_sum",
            "_identity",
            "test_user_rref_backward",
            "test_mismatched_type_for_options",
            "test_infer_backend_from_options",
            "test_logs_deprecation_warning",
            "test_cuda",
            "test_single_threaded_rref_owner",
            "test_single_threaded_rref_to_here",
            "test_process_group_debug_info",
            "test_set_and_get_num_send_recv_threads",
            "test_process_group_set_default_timeout",
            "test_process_group_options_throw_on_timedelta_timeout",
            "test_check_failed_messages",
            "test_verify_backend_options",
            "test_custom_faulty_messages",
            "test_no_faulty_messages",
            "test_custom_messages_to_delay",
            "_test_remote_message_dropped_pickle",
            "test_remote_message_dropped_pickle",
            "test_remote_message_dropped_pickle_to_self",
            "_test_remote_message_dropped_timeout",
            "test_builtin_remote_message_dropped_timeout",
            "test_builtin_remote_message_dropped_timeout_to_self",
            "test_udf_remote_message_dropped_timeout",
            "test_udf_remote_message_dropped_timeout_to_self",
            "_test_remote_message_delay_timeout",
            "test_udf_remote_message_delay_timeout",
            "test_udf_remote_message_delay_timeout_to_self",
            "test_remote_message_builtin_delay_timeout",
            "test_remote_message_builtin_delay_timeout_to_self",
            "test_remote_message_script_delay_timeout",
            "test_remote_message_script_delay_timeout_to_self",
            "test_rref_to_here_timeout",
            "test_rpc_builtin_timeout",
            "test_rpc_script_timeout",
            "test_mismatched_type_for_options",
            "test_infer_backend_from_options",
            "test_set_and_get_num_worker_threads",
            "test_tensorpipe_set_default_timeout",
            "test_tensorpipe_options_throw_on_timedelta_timeout",
            "_test_device_maps",
            "test_device_maps_wrong_worker_name",
            "test_device_maps_invalid_max_local_device",
            "test_device_maps_invalid_max_remote_device",
            "test_device_maps_many_to_one",
            "test_device_maps_one_to_many",
            "test_device_maps_invalid_min_device",
            "_gpu_add",
            "test_device_maps_gpu",
            "_gpu_add_given_gpus",
            "_test_device_maps_gpu",
            "test_device_map_gpu_default",
            "test_device_map_gpu_non_default",
            "test_device_map_gpu_default_to_non_default",
            "test_device_map_gpu_non_default_to_default",
            "test_device_map_gpu_mixed_1",
            "test_device_map_gpu_mixed_2",
            "test_device_map_gpu_mixed_3",
            "test_device_map_gpu_mixed_4",
            "test_device_map_gpu_mixed_5",
            "test_device_map_gpu_mixed_6",
            "test_device_map_gpu_mixed_7",
            "test_device_map_gpu_mixed_8",
            "test_device_map_gpu_mixed_self_1",
            "test_device_map_gpu_mixed_self_2",
            "test_device_map_gpu_mixed_self_3",
            "test_device_map_gpu_mixed_self_4",
            "test_device_map_gpu_mixed_self_5",
            "test_device_map_gpu_mixed_self_6",
            "test_device_map_gpu_mixed_self_7",
            "test_device_map_gpu_mixed_self_8",
            "_gpu_add_multi_gpu",
            "_test_device_maps_multi_gpu",
            "test_device_maps_multi_gpu",
            "test_device_maps_multi_gpu_self",
            "_gpu_add_return_to_gpu",
            "test_device_maps_in_options",
            "_test_device_maps_return_to_gpu",
            "test_device_maps_return_to_gpu",
            "test_device_maps_return_to_gpu_self",
            "_add_to_gpu",
            "_test_device_maps_missing_config",
            "_test_device_maps_missing_config_response",
            "test_device_maps_missing_config",
            "test_device_maps_missing_config_not_timeout",
            "test_device_maps_missing_config_loop",
            "test_device_maps_missing_config_response",
            "test_device_maps_missing_config_response_loop",
            "test_device_maps_missing_config_remote",
            "test_device_maps_missing_config_remote_response",
            "test_device_maps_remote",
            "_slow_add_on_user_stream",
            "_test_custom_stream",
            "_test_stream_sync",
            "test_custom_stream",
            "_test_stream_multi_async",
            "test_custom_stream_multi",
            "_nested_slow_add_on_user_stream",
            "_test_stream_nested_sync",
            "test_custom_stream_nested",
            "_test_stream_nested_multi_async",
            "test_custom_stream_nested_multi",
            "_test_rref_get_type_timeout",
            "test_rref_get_type_timeout_blocking",
            "test_rref_get_type_timeout_non_blocking",
            "test_op_with_invalid_args",
            "_test_rref_proxy_timeout",
            "test_rref_proxy_timeout",
            "get_name",
            "rpc_with_profiling",
            "convert_remote_to_local",
            "args_fn",
            "kwargs_fn",
            "launched_rpc",
            "verify",
            "test_func",
            "test_func",
            "callback",
            "callback",
            "callback",
            "callback",
            "callback",
            "callback",
            "convert_remote_to_local",
            "convert_remote_to_local",
            "get_cpu_children"
        ],
        "classes": [
            "StubRpcAgent",
            "MyPickleClass",
            "SlowPickleClass",
            "MyClass",
            "AsyncExecutionClass",
            "FooBackendOptions",
            "RpcTest",
            "ProcessGroupAgentRpcTest",
            "FaultyAgentRpcTest",
            "TensorPipeAgentRpcTest",
            "TestPickler"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/tensorpipe_rpc_agent_test_fixture.py",
        "functions": [
            "rpc_backend",
            "rpc_backend_options",
            "get_shutdown_error_regex",
            "get_timeout_error_regex"
        ],
        "classes": [
            "TensorPipeRpcAgentTestFixture"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/examples/parameter_server_test.py",
        "functions": [
            "timed_log",
            "run_trainer",
            "run_ps",
            "__init__",
            "get_model",
            "update_and_fetch_model",
            "__init__",
            "get_next_batch",
            "train",
            "test_batch_updating_parameter_server"
        ],
        "classes": [
            "BatchUpdateParameterServer",
            "Trainer",
            "ParameterServerTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/examples/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/jit/dist_autograd_test.py",
        "functions": [
            "local_add",
            "remote_add",
            "fork_add",
            "test_get_gradients",
            "test_dist_backward",
            "test_jit_fork_within_context",
            "test_restore_context_after_swtich_to_jit_thread",
            "dist_get_gradients",
            "dist_backward_script",
            "forward_script"
        ],
        "classes": [
            "JitDistAutogradTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/jit/rpc_test.py",
        "functions": [
            "rref_isinstance",
            "sleep",
            "rpc_return_rref",
            "rref_local_value",
            "list_create",
            "rref_list_mutate",
            "return_value",
            "no_arg",
            "one_arg",
            "script_add_ones",
            "script_add_ones_with_record_function",
            "record_function_on_caller_rpc_async",
            "script_fork_wait_udf",
            "rref_to_here",
            "return_rref",
            "script_raise_func",
            "script_fork_wait_throw",
            "call_rpc_with_profiling",
            "call_rpc_torchscript_with_record_function",
            "call_fork_with_profiling",
            "rref_python_annotation",
            "rref_script_annotation",
            "owner_create_rref_my_script_class",
            "owner_create_rref_my_script_module",
            "script_rref_get_value_my_script_class",
            "script_rref_run_forward_my_script_module",
            "python_function",
            "two_args_two_kwargs",
            "assorted_types_args_kwargs",
            "raise_script",
            "script_rpc_async_call",
            "script_rpc_sync_call",
            "script_rpc_remote_call",
            "my_script_module_init",
            "construct_my_script_module",
            "run_ref_script_module",
            "script_check_rref_confirmed",
            "save_rref",
            "script_add",
            "async_add",
            "async_wrong_type",
            "load_script_module_with_pickled_rref",
            "test_rref_is_owner",
            "test_rref_local_value",
            "test_local_rref_local_value",
            "_create_rref",
            "test_user_rrefs_confirmed",
            "test_user_rrefs_confirmed_remote",
            "test_rref_list_mutate",
            "__init__",
            "forward",
            "test_rref_as_arg_and_return",
            "test_my_script_module_with_rrefs",
            "test_rref_python_annotation",
            "test_future_passed_between_python_and_jit",
            "test_future_python_annotation",
            "__init__",
            "get_value",
            "forward",
            "__init__",
            "forward",
            "custom_func",
            "test_create_local_script_class_rref_in_py",
            "test_create_local_script_module_rref_in_py",
            "test_return_local_script_class_rref_in_py_and_use_in_script",
            "test_return_local_script_module_rref_in_py_and_use_in_script",
            "test_all_kwargs_are_populated_by_defaults",
            "test_some_kwargs_are_populated_by_defaults",
            "test_no_kwargs_are_populated_by_defaults",
            "test_args_and_kwargs_contain_different_types",
            "test_kwargs_not_passed",
            "test_args_kwargs_are_neither_passed",
            "test_less_than_needed_args_are_specified",
            "test_more_than_needed_args_are_specified",
            "test_unexepected_kwarg_is_specified",
            "test_call_python_function_remotely_from_script_not_supported",
            "test_call_script_function_that_raises_remotely_from_script",
            "test_call_script_function_that_not_exists_remotely_from_script",
            "test_torchscript_function",
            "test_torchscript_function_exception",
            "test_torchscript_functions_not_supported",
            "test_remote_script_module",
            "test_create_script_module_on_remote",
            "test_load_script_module_with_pickled_rref",
            "test_rref_jit_pickle_not_supported",
            "test_remote_script_throw",
            "test_remote_script_udf",
            "test_async_script_udf",
            "test_callback_simple",
            "test_callback_chain",
            "test_add_done_callback",
            "test_async_script_throw",
            "test_callback_with_exception",
            "test_call_rpc_with_profiling",
            "test_rpc_async_jit_profiled",
            "test_record_function_on_caller_rpc_async",
            "test_rpc_torchscript_record_function",
            "test_record_function_jit_end_callbacks_with_fork",
            "test_call_fork_in_jit_with_profiling",
            "test_async_function_simple",
            "test_async_function_wrong_return_type",
            "test_async_function_wrong_decorator_order",
            "test_async_function_remote",
            "test_async_function_remote_multi",
            "test_async_function_wrong_return_type_remote",
            "rref_tensor_is_owner",
            "future_wait_in_script",
            "future_return_to_python",
            "python_return_future",
            "script_use_future",
            "use_rref_on_owner",
            "use_rref_on_owner",
            "script_rpc_async_call_with_assorted_types",
            "script_rpc_async_call_without_kwargs_passed",
            "script_rpc_async_call_without_args_kwargs_passed",
            "script_rpc_async_call_with_unexpected_kwarg",
            "rpc_async_call_remote_py_function_in_torchscript",
            "rpc_async_call_remote_raising_torchscript_in_torchscript",
            "nonexisting_script",
            "rpc_async_call_remote_nonexisting_torchscript_in_torchscript",
            "callback",
            "callback",
            "callback",
            "callback",
            "script_rpc_async_call_with_less_args",
            "script_rpc_async_call_with_more_args",
            "async_wrong_decorator_order"
        ],
        "classes": [
            "RRefAPITest",
            "MyScriptModuleWithRRefs",
            "RRefTypingTest",
            "FutureTypingTest",
            "MyScriptClass",
            "MyModuleInterface",
            "MyScriptModule",
            "LocalRRefTest",
            "JitRpcOpTest",
            "JitRpcTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/jit/rpc_test_faulty.py",
        "functions": [
            "two_args_two_kwargs",
            "script_rpc_async_call",
            "rpc_async_call_with_timeout",
            "rpc_async_call_with_timeout_future_ret",
            "rpc_async_call_future_ret",
            "rref_to_here",
            "rref_to_here_with_timeout",
            "rpc_async_with_rref_arg",
            "test_timeout_in_torchscript_function",
            "test_timeout_in_python",
            "test_remote_timeout_to_here_in_jit",
            "test_rref_to_here_timeout_in_jit",
            "test_rref_timeout_pickle_in_jit",
            "test_rref_timeout_pickle_script_func"
        ],
        "classes": [
            "JitFaultyAgentRpcTest"
        ]
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/distributed/rpc/jit/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/generated/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/test_module/future_div.py",
        "functions": [
            "div_int_future",
            "div_float_future"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/test_module/no_future_div.py",
        "functions": [
            "div_int_nofuture",
            "div_float_nofuture"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/testing/_internal/test_module/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/model_zoo.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/bundled_inputs.py",
        "functions": [
            "augment_model_with_bundled_inputs",
            "augment_many_model_functions_with_bundled_inputs",
            "_inflate_expr",
            "bundle_randn",
            "bundle_large_tensor"
        ],
        "classes": [
            "InflatableArg"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/checkpoint.py",
        "functions": [
            "detach_variable",
            "check_backward_validity",
            "get_device_states",
            "set_device_states",
            "checkpoint",
            "checkpoint_sequential",
            "forward",
            "backward",
            "run_function",
            "forward"
        ],
        "classes": [
            "CheckpointFunction"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/collect_env.py",
        "functions": [
            "run",
            "run_and_read_all",
            "run_and_parse_first_match",
            "get_conda_packages",
            "get_gcc_version",
            "get_clang_version",
            "get_cmake_version",
            "get_nvidia_driver_version",
            "get_gpu_info",
            "get_running_cuda_version",
            "get_cudnn_version",
            "get_nvidia_smi",
            "get_platform",
            "get_mac_version",
            "get_windows_version",
            "get_lsb_version",
            "check_release_file",
            "get_os",
            "get_pip_packages",
            "get_env_info",
            "pretty_str",
            "get_pretty_env_info",
            "main",
            "run_with_pip",
            "replace_nones",
            "replace_bools",
            "prepend",
            "replace_if_empty",
            "maybe_start_on_next_line"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/cpp_extension.py",
        "functions": [
            "_nt_quote_args",
            "_find_cuda_home",
            "_find_rocm_home",
            "_join_rocm_home",
            "_is_binary_build",
            "_accepted_compilers_for_platform",
            "get_default_build_root",
            "check_compiler_ok_for_platform",
            "check_compiler_abi_compatibility",
            "CppExtension",
            "CUDAExtension",
            "include_paths",
            "library_paths",
            "load",
            "load_inline",
            "_jit_compile",
            "_write_ninja_file_and_compile_objects",
            "_write_ninja_file_and_build_library",
            "is_ninja_available",
            "verify_ninja_availability",
            "_prepare_ldflags",
            "_get_cuda_arch_flags",
            "_get_rocm_arch_flags",
            "_get_build_directory",
            "_get_num_workers",
            "_run_ninja_build",
            "_get_exec_path",
            "_import_module_from_library",
            "_write_ninja_file_to_build_library",
            "_write_ninja_file",
            "_join_cuda_home",
            "_is_cuda_file",
            "with_options",
            "__init__",
            "finalize_options",
            "build_extensions",
            "get_ext_filename",
            "_check_abi",
            "_add_compile_flag",
            "_define_torch_extension_name",
            "_add_gnu_cpp_abi_flag",
            "object_file_path",
            "sanitize_flags",
            "append_std14_if_no_std_present",
            "unix_cuda_flags",
            "convert_to_absolute_paths_inplace",
            "unix_wrap_single_compile",
            "unix_wrap_ninja_compile",
            "win_cuda_flags",
            "win_wrap_single_compile",
            "win_wrap_ninja_compile",
            "__init__",
            "spawn"
        ],
        "classes": [
            "BuildExtension",
            "cls_with_options"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/dlpack.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/file_baton.py",
        "functions": [
            "__init__",
            "try_acquire",
            "wait",
            "release"
        ],
        "classes": [
            "FileBaton"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/hooks.py",
        "functions": [
            "unserializable_hook",
            "warn_if_has_hooks",
            "__init__",
            "remove",
            "__getstate__",
            "__setstate__",
            "__enter__",
            "__exit__",
            "__init__",
            "_pack_with_none",
            "_unpack_none",
            "_set_user_hook",
            "_apply_on_tensors",
            "setup_input_hook",
            "setup_output_hook",
            "hook",
            "fn",
            "fn",
            "hook"
        ],
        "classes": [
            "RemovableHandle",
            "BackwardHook"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/mkldnn.py",
        "functions": [
            "to_mkldnn",
            "__init__",
            "__getstate__",
            "__setstate__",
            "forward",
            "__init__",
            "__getstate__",
            "forward",
            "__init__",
            "__setstate__",
            "__init__",
            "__setstate__",
            "__init__",
            "__setstate__",
            "__init__",
            "__getstate__",
            "__setstate__",
            "forward",
            "m_fn",
            "m_fn_rec"
        ],
        "classes": [
            "MkldnnLinear",
            "_MkldnnConvNd",
            "MkldnnConv1d",
            "MkldnnConv2d",
            "MkldnnConv3d",
            "MkldnnBatchNorm"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/mobile_optimizer.py",
        "functions": [
            "optimize_for_mobile",
            "generate_mobile_module_lints",
            "_get_bundled_inputs_preserved_attributes"
        ],
        "classes": [
            "LintCode"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/show_pickle.py",
        "functions": [
            "main",
            "__init__",
            "__repr__",
            "__setstate__",
            "pp_format",
            "__init__",
            "__repr__",
            "__call__",
            "fake_new",
            "find_class",
            "persistent_load",
            "dump"
        ],
        "classes": [
            "FakeObject",
            "FakeClass",
            "DumpUnpickler"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/throughput_benchmark.py",
        "functions": [
            "format_time",
            "__init__",
            "latency_avg_ms",
            "num_iters",
            "iters_per_second",
            "total_time_seconds",
            "__str__",
            "__init__",
            "run_once",
            "add_input",
            "benchmark"
        ],
        "classes": [
            "ExecutionStats",
            "ThroughputBenchmark"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/_cpp_extension_versioner.py",
        "functions": [
            "update_hash",
            "hash_source_files",
            "hash_build_arguments",
            "__init__",
            "get_version",
            "bump_version_if_changed"
        ],
        "classes": [
            "ExtensionVersioner"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/_pytree.py",
        "functions": [
            "_register_pytree_node",
            "_dict_flatten",
            "_dict_unflatten",
            "_list_flatten",
            "_list_unflatten",
            "_tuple_flatten",
            "_tuple_unflatten",
            "_is_leaf",
            "tree_flatten",
            "tree_unflatten",
            "_broadcast_to_and_flatten",
            "__init__",
            "__repr__",
            "__eq__",
            "__ne__",
            "__init__",
            "__repr__"
        ],
        "classes": [
            "NodeDef",
            "TreeSpec",
            "LeafSpec"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/__init__.py",
        "functions": [
            "set_module"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/backcompat/__init__.py",
        "functions": [
            "__init__",
            "set_enabled",
            "get_enabled"
        ],
        "classes": [
            "Warning"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/blas_compare.py",
        "functions": [
            "clear_worker_pool",
            "fill_core_pool",
            "_subprocess_main",
            "run_subprocess",
            "_compare_main",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/blas_compare_setup.py",
        "functions": [
            "conda_run",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/compare.py",
        "functions": [
            "main",
            "__init__",
            "extra_overhead",
            "add",
            "mul",
            "cat",
            "matmul"
        ],
        "classes": [
            "FauxTorch"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/end_to_end.py",
        "functions": [
            "parse_args",
            "construct_stmt_and_label",
            "subprocess_main",
            "_main",
            "merge",
            "process_results",
            "construct_table",
            "row_str",
            "read_results",
            "run",
            "test_source",
            "map_fn",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/fuzzer.py",
        "functions": [
            "main",
            "time_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/op_benchmark.py",
        "functions": [
            "assert_dicts_equal",
            "run",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/simple_timeit.py",
        "functions": [
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/spectral_ops_fuzz_test.py",
        "functions": [
            "_dim_options",
            "run_benchmark",
            "_output_csv"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/sparse/compare.py",
        "functions": [
            "generate_coo_data",
            "gen_sparse",
            "main",
            "__init__",
            "sparse",
            "__init__",
            "extra_overhead",
            "mm"
        ],
        "classes": [
            "FauxTorch",
            "Sparse"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/sparse/fuzzer.py",
        "functions": [
            "main",
            "time_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/examples/sparse/op_benchmark.py",
        "functions": [
            "assert_dicts_equal",
            "run",
            "main"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/binary.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "BinaryOpFuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/sparse_binary.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "BinaryOpSparseFuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/sparse_unary.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "UnaryOpSparseFuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/spectral.py",
        "functions": [
            "power_range",
            "__init__"
        ],
        "classes": [
            "SpectralOpFuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/unary.py",
        "functions": [
            "__init__"
        ],
        "classes": [
            "UnaryOpFuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/op_fuzzers/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/common.py",
        "functions": [
            "select_unit",
            "unit_to_english",
            "trim_sigfig",
            "ordered_unique",
            "set_torch_threads",
            "title",
            "setup_str",
            "summarize",
            "__post_init__",
            "__getattr__",
            "times",
            "median",
            "mean",
            "iqr",
            "significant_figures",
            "has_warnings",
            "_lazy_init",
            "meets_confidence",
            "title",
            "env",
            "as_row_name",
            "__repr__",
            "merge",
            "merge_group",
            "add_warning"
        ],
        "classes": [
            "TaskSpec",
            "Measurement"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/compare.py",
        "functions": [
            "optional_min",
            "__init__",
            "get_results_for",
            "num_to_str",
            "__init__",
            "register_columns",
            "as_column_strings",
            "color_segment",
            "row_separator",
            "finalize_column_strings",
            "__init__",
            "row_fn",
            "col_fn",
            "populate_rows_and_columns",
            "render",
            "__init__",
            "__str__",
            "extend_results",
            "trim_significant_figures",
            "colorize",
            "highlight_warnings",
            "print",
            "_render",
            "_group_by_label",
            "_layout"
        ],
        "classes": [
            "Colorize",
            "_Column",
            "_Row",
            "Table",
            "Compare"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/cpp_jit.py",
        "functions": [
            "get_compat_bindings",
            "_compile_template",
            "compile_timeit_template",
            "compile_callgrind_template"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/fuzzer.py",
        "functions": [
            "dtype_size",
            "prod",
            "__init__",
            "name",
            "sample",
            "_check_distribution",
            "_loguniform",
            "_uniform",
            "_custom_distribution",
            "__init__",
            "__repr__",
            "__init__",
            "name",
            "default_tensor_constructor",
            "_make_tensor",
            "_get_size_and_steps",
            "satisfies_constraints",
            "__init__",
            "_unpack",
            "take",
            "rejection_rate",
            "_generate",
            "_resolve_aliases",
            "resolve",
            "nullable_greater"
        ],
        "classes": [
            "FuzzedParameter",
            "ParameterAlias",
            "FuzzedTensor",
            "Fuzzer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/sparse_fuzzer.py",
        "functions": [
            "__init__",
            "sparse_tensor_constructor",
            "_make_tensor"
        ],
        "classes": [
            "FuzzedSparseTensor"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/timer.py",
        "functions": [
            "timer",
            "__init__",
            "timeit",
            "__init__",
            "timeit",
            "repeat",
            "autorange",
            "_threaded_measurement_loop",
            "_estimate_block_size",
            "adaptive_autorange",
            "blocked_autorange",
            "collect_callgrind",
            "time_hook",
            "stop_hook",
            "time_hook",
            "stop_hook"
        ],
        "classes": [
            "Language",
            "CPPTimer",
            "Timer"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/_stubs.py",
        "functions": [
            "__init__",
            "timeit",
            "timeit",
            "_valgrind_supported_platform",
            "_valgrind_toggle"
        ],
        "classes": [
            "TimerClass",
            "TimeitModuleType",
            "CallgrindModuleType"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/valgrind_wrapper/timer_interface.py",
        "functions": [
            "wrapper_singleton",
            "__iter__",
            "__len__",
            "__getitem__",
            "__repr__",
            "__add__",
            "__sub__",
            "transform",
            "filter",
            "sum",
            "denoise",
            "_merge",
            "_from_dict",
            "__repr__",
            "stats",
            "counts",
            "delta",
            "as_standardized",
            "__init__",
            "value",
            "setup",
            "serialization",
            "unwrap_all",
            "__init__",
            "construct",
            "__init__",
            "_validate",
            "collect_callgrind",
            "_invoke",
            "_construct_script",
            "strip",
            "run",
            "parse_output"
        ],
        "classes": [
            "FunctionCounts",
            "CallgrindStats",
            "Serialization",
            "CopyIfCallgrind",
            "GlobalsBridge",
            "_ValgrindWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/benchmark/utils/valgrind_wrapper/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/bottleneck/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/bottleneck/__main__.py",
        "functions": [
            "redirect_argv",
            "compiled_with_cuda",
            "run_env_analysis",
            "run_cprofile",
            "print_cprofile_summary",
            "run_autograd_prof",
            "print_autograd_prof_summary",
            "parse_args",
            "cpu_time_total",
            "main",
            "run_prof"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/dataloader.py",
        "functions": [
            "create_fetcher",
            "__init__",
            "__iter__",
            "__init__",
            "_get_iterator",
            "multiprocessing_context",
            "multiprocessing_context",
            "__setattr__",
            "__iter__",
            "_auto_collation",
            "_index_sampler",
            "__len__",
            "check_worker_number_rationality",
            "__init__",
            "__iter__",
            "_reset",
            "_next_index",
            "_next_data",
            "__next__",
            "__len__",
            "__getstate__",
            "__init__",
            "_next_data",
            "__init__",
            "_reset",
            "_try_get_data",
            "_get_data",
            "_next_data",
            "_try_put_index",
            "_process_data",
            "_mark_worker_as_unavailable",
            "_shutdown_workers",
            "__del__",
            "_create_warning_msg"
        ],
        "classes": [
            "_DatasetKind",
            "_InfiniteConstantSampler",
            "DataLoader",
            "_BaseDataLoaderIter",
            "_SingleProcessDataLoaderIter",
            "_MultiProcessingDataLoaderIter"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/dataset.py",
        "functions": [
            "random_split",
            "__getitem__",
            "__add__",
            "__iter__",
            "__add__",
            "__init__",
            "__getitem__",
            "__len__",
            "cumsum",
            "__init__",
            "__len__",
            "__getitem__",
            "cummulative_sizes",
            "__init__",
            "__iter__",
            "__len__",
            "__init__",
            "__iter__",
            "__init__",
            "__getitem__",
            "__len__"
        ],
        "classes": [
            "Dataset",
            "IterableDataset",
            "TensorDataset",
            "ConcatDataset",
            "ChainDataset",
            "BufferedShuffleDataset",
            "Subset"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/distributed.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__",
            "set_epoch"
        ],
        "classes": [
            "DistributedSampler"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/sampler.py",
        "functions": [
            "__init__",
            "__iter__",
            "__init__",
            "__iter__",
            "__len__",
            "__init__",
            "num_samples",
            "__iter__",
            "__len__",
            "__init__",
            "__iter__",
            "__len__",
            "__init__",
            "__iter__",
            "__len__",
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "Sampler",
            "SequentialSampler",
            "RandomSampler",
            "SubsetRandomSampler",
            "WeightedRandomSampler",
            "BatchSampler"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/batch.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__",
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "BatchIterDataPipe",
            "BucketBatchIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/callable.py",
        "functions": [
            "default_fn",
            "__init__",
            "__iter__",
            "__len__",
            "__init__"
        ],
        "classes": [
            "CallableIterDataPipe",
            "CollateIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/listdirfiles.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "ListDirFilesIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/loadfilesfromdisk.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "LoadFilesFromDiskIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/readfilesfromtar.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "ReadFilesFromTarIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/readfilesfromzip.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "ReadFilesFromZipIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/sampler.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "SamplerIterDataPipe"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/iter/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/utils/common.py",
        "functions": [
            "match_masks",
            "get_file_pathnames_from_root",
            "get_file_binaries_from_pathnames",
            "validate_pathname_binary_tuple",
            "onerror"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datapipes/utils/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datasets/common.py",
        "functions": [
            "match_masks",
            "get_file_pathnames_from_root",
            "get_file_binaries_from_pathnames",
            "onerror"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/datasets/listdirfilesdataset.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "ListDirFilesIterableDataset"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datasets/loadfilesfromdiskdataset.py",
        "functions": [
            "__init__",
            "__iter__",
            "__len__"
        ],
        "classes": [
            "LoadFilesFromDiskIterableDataset"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/datasets/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/collate.py",
        "functions": [
            "default_convert",
            "default_collate"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/fetch.py",
        "functions": [
            "__init__",
            "fetch",
            "__init__",
            "fetch",
            "__init__",
            "fetch"
        ],
        "classes": [
            "_BaseDatasetFetcher",
            "_IterableDatasetFetcher",
            "_MapDatasetFetcher"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/pin_memory.py",
        "functions": [
            "_pin_memory_loop",
            "pin_memory"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/signal_handling.py",
        "functions": [
            "_set_SIGCHLD_handler",
            "handler"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/worker.py",
        "functions": [
            "get_worker_info",
            "_worker_loop",
            "__init__",
            "__setattr__",
            "__repr__",
            "__init__",
            "is_alive",
            "__init__",
            "is_alive"
        ],
        "classes": [
            "WorkerInfo",
            "_IterableDatasetStopIteration",
            "_ResumeIteration",
            "ManagerWatchdog",
            "ManagerWatchdog"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/data/_utils/__init__.py",
        "functions": [
            "_set_python_exit_flag"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/ffi/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/hipify/constants.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/hipify/cuda_to_hip_mappings.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/hipify/hipify_python.py",
        "functions": [
            "openf",
            "match_extensions",
            "matched_files_iter",
            "preprocess_file_and_save_result",
            "preprocess",
            "compute_stats",
            "add_dim3",
            "processKernelLaunches",
            "find_closure_group",
            "find_bracket_group",
            "find_parentheses_group",
            "replace_math_functions",
            "hip_header_magic",
            "replace_extern_shared",
            "get_hip_file_path",
            "is_out_of_place",
            "is_pytorch_file",
            "is_caffe2_gpu_file",
            "preprocessor",
            "file_specific_replacement",
            "file_add_header",
            "fix_static_global_kernels",
            "extract_arguments",
            "str2bool",
            "hipify",
            "__init__",
            "__str__",
            "__init__",
            "__enter__",
            "open",
            "makedirs",
            "__exit__",
            "_fnmatch",
            "grab_method_and_template",
            "find_kernel_bounds",
            "__init__",
            "add",
            "dump",
            "quote",
            "_pattern",
            "pattern",
            "pt_repl",
            "mk_repl",
            "repl",
            "c2_repl"
        ],
        "classes": [
            "InputError",
            "bcolors",
            "GeneratedFileCleaner",
            "Trie"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/hipify/version.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/hipify/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/summary.py",
        "functions": [
            "_calc_scale_factor",
            "_draw_single_box",
            "hparams",
            "scalar",
            "histogram_raw",
            "histogram",
            "make_histogram",
            "image",
            "image_boxes",
            "draw_boxes",
            "make_image",
            "video",
            "make_video",
            "audio",
            "custom_scalars",
            "text",
            "pr_curve_raw",
            "pr_curve",
            "compute_curve",
            "_get_tensor_summary",
            "_get_json_config",
            "mesh"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/writer.py",
        "functions": [
            "__init__",
            "get_logdir",
            "add_event",
            "add_summary",
            "add_graph",
            "add_onnx_graph",
            "flush",
            "close",
            "reopen",
            "__init__",
            "_check_caffe2_blob",
            "_get_file_writer",
            "get_logdir",
            "add_hparams",
            "add_scalar",
            "add_scalars",
            "add_histogram",
            "add_histogram_raw",
            "add_image",
            "add_images",
            "add_image_with_boxes",
            "add_figure",
            "add_video",
            "add_audio",
            "add_text",
            "add_onnx_graph",
            "add_graph",
            "_encode",
            "add_embedding",
            "add_pr_curve",
            "add_pr_curve_raw",
            "add_custom_scalars_multilinechart",
            "add_custom_scalars_marginchart",
            "add_custom_scalars",
            "add_mesh",
            "flush",
            "close",
            "__enter__",
            "__exit__"
        ],
        "classes": [
            "FileWriter",
            "SummaryWriter"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_caffe2_graph.py",
        "functions": [
            "_make_unique_name",
            "_rename_tensorflow_style",
            "_convert_to_ssa",
            "_get_blob_names",
            "_remap_keys",
            "_rename_all",
            "_add_gradient_scope",
            "_replace_colons",
            "_fill_missing_operator_names",
            "_tf_device",
            "_add_tf_shape",
            "_set_tf_attr",
            "_operator_to_node",
            "_operator_to_node_simp",
            "_blob_to_node",
            "_clear_debug_info",
            "_check_if_forward",
            "_check_if_cpu",
            "_compute_in_out",
            "_filter_ops",
            "_operators_to_graph_def",
            "_propagate_device_option",
            "_try_get_shapes",
            "model_to_graph_def",
            "nets_to_graph_def",
            "protos_to_graph_def",
            "f",
            "ssa_name",
            "g",
            "f",
            "f"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_convert_np.py",
        "functions": [
            "make_np",
            "_prepare_pytorch",
            "_prepare_caffe2"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_embedding.py",
        "functions": [
            "make_tsv",
            "make_sprite",
            "get_embedding_info",
            "write_pbtxt",
            "make_mat"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_onnx_graph.py",
        "functions": [
            "load_onnx_graph",
            "parse"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_proto_graph.py",
        "functions": [
            "attr_value_proto",
            "tensor_shape_proto",
            "node_proto"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_pytorch_graph.py",
        "functions": [
            "parse",
            "graph",
            "__init__",
            "__repr__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "append",
            "printall",
            "find_common_root",
            "populate_namespace_from_OP_to_IO",
            "to_proto",
            "parse_traced_name"
        ],
        "classes": [
            "NodeBase",
            "NodePy",
            "NodePyIO",
            "NodePyOP",
            "GraphPy"
        ]
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/_utils.py",
        "functions": [
            "figure_to_image",
            "_prepare_video",
            "make_grid",
            "convert_to_HWC",
            "render_to_rgb",
            "is_power2"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/utils/tensorboard/__init__.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/futures/__init__.py",
        "functions": [
            "collect_all",
            "wait_all",
            "done",
            "wait",
            "then",
            "_add_done_callback",
            "set_result",
            "set_exception",
            "raise_error"
        ],
        "classes": [
            "Future",
            "_PyFutureMeta",
            "_PyFutureMeta"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fake_quantize.py",
        "functions": [
            "_is_per_channel",
            "_is_per_tensor",
            "_is_fake_quant_script_module",
            "disable_fake_quant",
            "enable_fake_quant",
            "disable_observer",
            "enable_observer",
            "__init__",
            "forward",
            "calculate_qparams",
            "enable_fake_quant",
            "disable_fake_quant",
            "enable_observer",
            "disable_observer",
            "__init__",
            "calculate_qparams",
            "forward",
            "extra_repr",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__init__",
            "forward",
            "calculate_qparams",
            "extra_repr"
        ],
        "classes": [
            "FakeQuantizeBase",
            "FakeQuantize",
            "FixedQParamsFakeQuantize"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fuser_method_mappings.py",
        "functions": [
            "fuse_conv_bn",
            "fuse_conv_bn_relu",
            "fuse_linear_bn",
            "get_fuser_method"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/fuse_modules.py",
        "functions": [
            "_get_module",
            "_set_module",
            "fuse_known_modules",
            "_fuse_modules",
            "fuse_modules"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/observer.py",
        "functions": [
            "_with_args",
            "_is_observer_script_module",
            "_is_activation_post_process",
            "_is_per_channel_script_obs_instance",
            "get_observer_state_dict",
            "load_observer_state_dict",
            "__init__",
            "forward",
            "calculate_qparams",
            "__init__",
            "_load_from_state_dict",
            "_validate_qmin_qmax",
            "_calculate_qmin_qmax",
            "_calculate_qparams",
            "__init__",
            "forward",
            "calculate_qparams",
            "extra_repr",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "_forward",
            "calculate_qparams",
            "extra_repr",
            "_load_from_state_dict",
            "_load_from_state_dict_script",
            "__init__",
            "forward",
            "__init__",
            "_get_norm",
            "_compute_quantization_error",
            "_non_linear_param_search",
            "_adjust_min_max",
            "_combine_histograms",
            "forward",
            "calculate_qparams",
            "_save_to_state_dict",
            "_load_from_state_dict",
            "__init__",
            "forward",
            "calculate_qparams",
            "__init__",
            "forward",
            "calculate_qparams",
            "get_tensor_value",
            "__init__",
            "forward",
            "calculate_qparams",
            "__init__",
            "__call__",
            "__repr__"
        ],
        "classes": [
            "ObserverBase",
            "_ObserverBase",
            "MinMaxObserver",
            "MovingAverageMinMaxObserver",
            "PerChannelMinMaxObserver",
            "MovingAveragePerChannelMinMaxObserver",
            "HistogramObserver",
            "PlaceholderObserver",
            "RecordingObserver",
            "NoopObserver",
            "_PartialWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/qconfig.py",
        "functions": [
            "get_default_qconfig",
            "get_default_qat_qconfig",
            "assert_valid_qconfig",
            "__new__",
            "__new__"
        ],
        "classes": [
            "QConfig",
            "QConfigDynamic"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/quantization_mappings.py",
        "functions": [
            "get_default_static_quant_module_mappings",
            "get_static_quant_module_class",
            "get_dynamic_quant_module_class",
            "get_default_qat_module_mappings",
            "get_default_dynamic_quant_module_mappings",
            "get_default_qconfig_propagation_list",
            "get_default_compare_output_module_list",
            "get_quantized_operator",
            "_get_special_act_post_process",
            "_has_special_act_post_process"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/quantize.py",
        "functions": [
            "is_activation_post_process",
            "_propagate_qconfig_helper",
            "propagate_qconfig_",
            "_observer_forward_hook",
            "register_activation_post_process_hook",
            "add_observer_",
            "get_unique_devices_",
            "add_quant_dequant",
            "prepare",
            "_remove_activation_post_process",
            "_remove_qconfig",
            "quantize",
            "quantize_dynamic",
            "prepare_qat",
            "quantize_qat",
            "convert",
            "_convert",
            "swap_module",
            "get_observer_dict",
            "get_activation_post_process",
            "needs_observation",
            "insert_activation_post_process",
            "get_prefix"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/quantize_fx.py",
        "functions": [
            "_check_is_graph_module",
            "_swap_ff_with_fxff",
            "_fuse_fx",
            "_prepare_fx",
            "_prepare_standalone_module_fx",
            "fuse_fx",
            "prepare_fx",
            "prepare_qat_fx",
            "_convert_fx",
            "convert_fx",
            "_convert_standalone_module_fx",
            "__init__",
            "__init__",
            "__enter__",
            "__exit__",
            "__init__",
            "is_leaf_module",
            "call_module",
            "create_node"
        ],
        "classes": [
            "Scope",
            "ScopeContextManager",
            "QuantizationTracer"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/quantize_jit.py",
        "functions": [
            "_check_is_script_module",
            "_check_forward_method",
            "script_qconfig",
            "script_qconfig_dict",
            "fuse_conv_bn_jit",
            "_prepare_jit",
            "prepare_jit",
            "prepare_dynamic_jit",
            "_convert_jit",
            "convert_jit",
            "convert_dynamic_jit",
            "_quantize_jit",
            "quantize_jit",
            "quantize_dynamic_jit"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/quant_type.py",
        "functions": [
            "quant_type_to_str"
        ],
        "classes": [
            "QuantType"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/stubs.py",
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward"
        ],
        "classes": [
            "QuantStub",
            "DeQuantStub",
            "QuantWrapper"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/utils.py",
        "functions": [
            "get_combined_dict",
            "is_per_tensor",
            "is_per_channel",
            "get_swapped_custom_module_class",
            "activation_is_statically_quantized",
            "weight_dtype",
            "weight_is_statically_quantized",
            "get_qconfig_dtypes",
            "get_quant_type"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/_correct_bias.py",
        "functions": [
            "get_module",
            "parent_child_names",
            "get_param",
            "bias_correction",
            "__init__",
            "forward",
            "clear"
        ],
        "classes": [
            "MeanShadowLogger"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/_equalize.py",
        "functions": [
            "max_over_ndim",
            "min_over_ndim",
            "channel_range",
            "cross_layer_equalization",
            "equalize",
            "converged"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/_learnable_fake_quantize.py",
        "functions": [
            "__init__",
            "enable_param_learning",
            "enable_static_estimate",
            "enable_static_observation",
            "toggle_observer_update",
            "enable_observer",
            "toggle_qparam_learning",
            "toggle_fake_quant",
            "observe_quant_params",
            "calculate_qparams",
            "forward"
        ],
        "classes": [
            "_LearnableFakeQuantize"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/_numeric_suite.py",
        "functions": [
            "_find_match",
            "compare_weights",
            "_get_logger_dict_helper",
            "get_logger_dict",
            "_convert_tuple_to_list",
            "_dequantize_tensor_list",
            "prepare_model_with_stubs",
            "_is_identical_module_type",
            "compare_model_stub",
            "get_matching_activations",
            "prepare_model_outputs",
            "compare_model_outputs",
            "get_prefix",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "add",
            "add_scalar",
            "mul",
            "mul_scalar",
            "cat",
            "add_relu"
        ],
        "classes": [
            "Logger",
            "ShadowLogger",
            "OutputLogger",
            "Shadow"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/_numeric_suite_fx.py",
        "functions": [
            "remove_qconfig_observer_fx",
            "_get_logger_dict_helper_fx",
            "get_logger_dict_fx",
            "compare_weights_fx",
            "prepare_model_with_stubs_fx",
            "compare_model_stub_fx",
            "get_matching_activations_fx",
            "prepare_model_outputs_fx",
            "compare_model_outputs_fx",
            "__init__",
            "convert",
            "load_arg"
        ],
        "classes": [
            "NumericSuiteQuantizeHandler"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/__init__.py",
        "functions": [
            "default_eval_fn"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/fuse.py",
        "functions": [
            "fuse",
            "_find_matches",
            "load_arg",
            "apply_match"
        ],
        "classes": [
            "Fuser"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/fusion_patterns.py",
        "functions": [
            "__init__",
            "fuse",
            "__init__",
            "fuse",
            "__init__",
            "fuse"
        ],
        "classes": [
            "FuseHandler",
            "ConvBNReLUFusion",
            "ModuleReLUFusion"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/observed_module.py",
        "functions": [
            "mark_observed_module",
            "is_observed_module",
            "mark_observed_standalone_module",
            "is_observed_standalone_module",
            "get_preserved_attr_names",
            "__init__",
            "__deepcopy__",
            "get_preserved_attr_names",
            "__deepcopy__"
        ],
        "classes": [
            "ObservedGraphModule",
            "ObservedStandaloneGraphModule"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/pattern_utils.py",
        "functions": [
            "register_fusion_pattern",
            "get_default_fusion_patterns",
            "register_quant_pattern",
            "get_default_quant_patterns",
            "get_default_output_activation_post_process_map",
            "mark_input_output_not_observed",
            "input_output_observed",
            "is_match",
            "insert",
            "insert",
            "insert"
        ],
        "classes": [
            "MatchAllNode"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/qconfig_utils.py",
        "functions": [
            "get_flattened_qconfig_dict",
            "convert_dict_to_ordered_dict",
            "get_object_type_qconfig",
            "get_module_name_regex_qconfig",
            "get_module_name_qconfig",
            "get_qconfig",
            "flatten_key",
            "_convert_to_ordered_dict"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/quantization_patterns.py",
        "functions": [
            "__init__",
            "convert",
            "__init__",
            "convert",
            "__init__",
            "convert",
            "convert",
            "__init__",
            "convert",
            "__init__",
            "convert",
            "__init__",
            "convert",
            "__init__",
            "convert",
            "__init__",
            "convert",
            "convert",
            "convert",
            "convert",
            "convert",
            "convert",
            "convert",
            "convert"
        ],
        "classes": [
            "QuantizeHandler",
            "Add",
            "Mul",
            "Cat",
            "ConvRelu",
            "LinearReLUQuantizeHandler",
            "BatchNorm",
            "Embedding",
            "RNNDynamic",
            "DefaultNode",
            "ELU",
            "FixedQParamsOpQuantizeHandler",
            "CopyNode",
            "DefaultQuantizeHandler",
            "CustomModuleQuantizeHandler",
            "StandaloneModuleQuantizeHandler"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/quantization_types.py",
        "functions": [],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/quantize.py",
        "functions": [
            "insert_observer",
            "maybe_insert_observer_for_special_module",
            "insert_observer_for_output_of_the_node",
            "insert_observer_for_input_arg_of_observed_node",
            "node_arg_is_weight",
            "node_arg_is_bias",
            "__init__",
            "_qat_swap_modules",
            "_generate_qconfig_map",
            "_prepare",
            "save_state",
            "restore_state",
            "prepare",
            "_run_weight_observers",
            "_convert",
            "_fold_weight",
            "convert",
            "_find_matches",
            "_find_quants",
            "load_arg",
            "load_non_quantized",
            "load_quantized",
            "load_x",
            "load_arg",
            "node_arg_is_quantized",
            "is_output_quantized",
            "insert_quantize_node",
            "load_arg_simple",
            "load_arg",
            "record_match",
            "is_standalone_module",
            "visit",
            "load_arg_impl",
            "visit_arg",
            "is_observed",
            "input_is_observed"
        ],
        "classes": [
            "Quantizer"
        ]
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/utils.py",
        "functions": [
            "_parent_name",
            "graph_pretty_str",
            "get_per_tensor_qparams",
            "get_quantize_op_and_qparams",
            "quantize_node",
            "get_custom_module_class_keys",
            "get_linear_prepack_op_for_dtype",
            "get_qconv_prepack_op",
            "get_qconv_op",
            "get_new_attr_name_with_prefix",
            "collect_producer_nodes",
            "graph_module_from_producer_nodes",
            "assert_and_get_unique_device",
            "create_getattr_from_value",
            "create_qparam_nodes",
            "get_new_attr_name",
            "load_arg",
            "get_attr_name"
        ],
        "classes": []
    },
    {
        "file_path": "../pytorch/torch/quantization/fx/__init__.py",
        "functions": [],
        "classes": []
    }
]